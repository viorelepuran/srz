"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Module = require('module'); // typescript 'import' brokes Module
class GlobalPatcher {
    constructor() {
        this.separator = '\n;';
        this.exports = {};
    }
    export(filename, variable, name) {
        if (this.hasVariable(filename, variable, name))
            return;
        const variables = this.getVariables(filename);
        variables.push({ variable, name });
    }
    unexport(filename, variable, name) {
        if (!variable)
            this.getVariables(filename).splice(0);
        if (!this.hasVariable(filename, variable, name))
            return;
        const index = this.getVariableIndex(filename, variable, name);
        const variables = this.getVariables(filename);
        variables.splice(index, 1);
    }
    patch() {
        if (global.locals)
            return false;
        this.compile = Module.prototype._compile;
        const patcher = this;
        Module.prototype._compile = function (content, filename) {
            const source = patcher.source(filename);
            if (source)
                content += patcher.separator + source;
            return patcher.compile.call(this, content, filename);
        };
        global.locals = patcher;
        return true;
    }
    unpatch() {
        Module.prototype._compile = this.compile;
        delete global.locals;
    }
    source(filename) {
        return this.getVariables(filename)
            .map(({ variable, name }) => `exports[${JSON.stringify(name)}]=${variable}`)
            .join(';');
    }
    hasVariable(filename, variable, name) {
        return this.getVariableIndex(filename, variable, name) > -1;
    }
    getVariableIndex(filename, variable, name) {
        return this.getVariables(filename).findIndex(({ variable: $variable, name: $name }) => $variable === variable && $name === name);
    }
    getVariables(filename) {
        if (!this.exports[filename])
            this.exports[filename] = [];
        return this.exports[filename];
    }
}
exports.default = GlobalPatcher;
