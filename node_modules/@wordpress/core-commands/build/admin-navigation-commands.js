"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAdminNavigationCommands = useAdminNavigationCommands;
var _commands = require("@wordpress/commands");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _url = require("@wordpress/url");
var _coreData = require("@wordpress/core-data");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _notices = require("@wordpress/notices");
var _router = require("@wordpress/router");
var _lockUnlock = require("./lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  useHistory
} = (0, _lockUnlock.unlock)(_router.privateApis);
const getAddNewPageCommand = () => function useAddNewPageCommand() {
  const isSiteEditor = (0, _url.getPath)(window.location.href)?.includes('site-editor.php');
  const history = useHistory();
  const isBlockBasedTheme = (0, _data.useSelect)(select => {
    return select(_coreData.store).getCurrentTheme()?.is_block_theme;
  }, []);
  const {
    saveEntityRecord
  } = (0, _data.useDispatch)(_coreData.store);
  const {
    createErrorNotice
  } = (0, _data.useDispatch)(_notices.store);
  const createPageEntity = (0, _element.useCallback)(async ({
    close
  }) => {
    try {
      const page = await saveEntityRecord('postType', 'page', {
        status: 'draft'
      }, {
        throwOnError: true
      });
      if (page?.id) {
        history.navigate(`/page/${page.id}?canvas=edit`);
      }
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0, _i18n.__)('An error occurred while creating the item.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    } finally {
      close();
    }
  }, [createErrorNotice, history, saveEntityRecord]);
  const commands = (0, _element.useMemo)(() => {
    const addNewPage = isSiteEditor && isBlockBasedTheme ? createPageEntity : () => document.location.href = 'post-new.php?post_type=page';
    return [{
      name: 'core/add-new-page',
      label: (0, _i18n.__)('Add new page'),
      icon: _icons.plus,
      callback: addNewPage
    }];
  }, [createPageEntity, isSiteEditor, isBlockBasedTheme]);
  return {
    isLoading: false,
    commands
  };
};
function useAdminNavigationCommands() {
  (0, _commands.useCommand)({
    name: 'core/add-new-post',
    label: (0, _i18n.__)('Add new post'),
    icon: _icons.plus,
    callback: () => {
      document.location.assign('post-new.php');
    }
  });
  (0, _commands.useCommandLoader)({
    name: 'core/add-new-page',
    hook: getAddNewPageCommand()
  });
}
//# sourceMappingURL=admin-navigation-commands.js.map