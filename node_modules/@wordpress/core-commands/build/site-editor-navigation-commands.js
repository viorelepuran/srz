"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSiteEditorNavigationCommands = useSiteEditorNavigationCommands;
var _commands = require("@wordpress/commands");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _coreData = require("@wordpress/core-data");
var _icons = require("@wordpress/icons");
var _router = require("@wordpress/router");
var _url = require("@wordpress/url");
var _compose = require("@wordpress/compose");
var _htmlEntities = require("@wordpress/html-entities");
var _lockUnlock = require("./lock-unlock");
var _orderEntityRecordsBySearch = require("./utils/order-entity-records-by-search");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  useHistory
} = (0, _lockUnlock.unlock)(_router.privateApis);
const icons = {
  post: _icons.post,
  page: _icons.page,
  wp_template: _icons.layout,
  wp_template_part: _icons.symbolFilled
};
function useDebouncedValue(value) {
  const [debouncedValue, setDebouncedValue] = (0, _element.useState)('');
  const debounced = (0, _compose.useDebounce)(setDebouncedValue, 250);
  (0, _element.useEffect)(() => {
    debounced(value);
    return () => debounced.cancel();
  }, [debounced, value]);
  return debouncedValue;
}
const getNavigationCommandLoaderPerPostType = postType => function useNavigationCommandLoader({
  search
}) {
  const history = useHistory();
  const {
    isBlockBasedTheme,
    canCreateTemplate
  } = (0, _data.useSelect)(select => {
    return {
      isBlockBasedTheme: select(_coreData.store).getCurrentTheme()?.is_block_theme,
      canCreateTemplate: select(_coreData.store).canUser('create', {
        kind: 'postType',
        name: 'wp_template'
      })
    };
  }, []);
  const delayedSearch = useDebouncedValue(search);
  const {
    records,
    isLoading
  } = (0, _data.useSelect)(select => {
    if (!delayedSearch) {
      return {
        isLoading: false
      };
    }
    const query = {
      search: delayedSearch,
      per_page: 10,
      orderby: 'relevance',
      status: ['publish', 'future', 'draft', 'pending', 'private']
    };
    return {
      records: select(_coreData.store).getEntityRecords('postType', postType, query),
      isLoading: !select(_coreData.store).hasFinishedResolution('getEntityRecords', ['postType', postType, query])
    };
  }, [delayedSearch]);
  const commands = (0, _element.useMemo)(() => {
    return (records !== null && records !== void 0 ? records : []).map(record => {
      const command = {
        name: postType + '-' + record.id,
        searchLabel: record.title?.rendered + ' ' + record.id,
        label: record.title?.rendered ? (0, _htmlEntities.decodeEntities)(record.title?.rendered) : (0, _i18n.__)('(no title)'),
        icon: icons[postType]
      };
      if (!canCreateTemplate || postType === 'post' || postType === 'page' && !isBlockBasedTheme) {
        return {
          ...command,
          callback: ({
            close
          }) => {
            const args = {
              post: record.id,
              action: 'edit'
            };
            const targetUrl = (0, _url.addQueryArgs)('post.php', args);
            document.location = targetUrl;
            close();
          }
        };
      }
      const isSiteEditor = (0, _url.getPath)(window.location.href)?.includes('site-editor.php');
      return {
        ...command,
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate(`/${postType}/${record.id}?canvas=edit`);
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: `/${postType}/${record.id}`,
              canvas: 'edit'
            });
          }
          close();
        }
      };
    });
  }, [canCreateTemplate, records, isBlockBasedTheme, history]);
  return {
    commands,
    isLoading
  };
};
const getNavigationCommandLoaderPerTemplate = templateType => function useNavigationCommandLoader({
  search
}) {
  const history = useHistory();
  const {
    isBlockBasedTheme,
    canCreateTemplate
  } = (0, _data.useSelect)(select => {
    return {
      isBlockBasedTheme: select(_coreData.store).getCurrentTheme()?.is_block_theme,
      canCreateTemplate: select(_coreData.store).canUser('create', {
        kind: 'postType',
        name: templateType
      })
    };
  }, []);
  const {
    records,
    isLoading
  } = (0, _data.useSelect)(select => {
    const {
      getEntityRecords
    } = select(_coreData.store);
    const query = {
      per_page: -1
    };
    return {
      records: getEntityRecords('postType', templateType, query),
      isLoading: !select(_coreData.store).hasFinishedResolution('getEntityRecords', ['postType', templateType, query])
    };
  }, []);

  /*
   * wp_template and wp_template_part endpoints do not support per_page or orderby parameters.
   * We need to sort the results based on the search query to avoid removing relevant
   * records below using .slice().
   */
  const orderedRecords = (0, _element.useMemo)(() => {
    return (0, _orderEntityRecordsBySearch.orderEntityRecordsBySearch)(records, search).slice(0, 10);
  }, [records, search]);
  const commands = (0, _element.useMemo)(() => {
    if (!canCreateTemplate || !isBlockBasedTheme && !templateType === 'wp_template_part') {
      return [];
    }
    const isSiteEditor = (0, _url.getPath)(window.location.href)?.includes('site-editor.php');
    const result = [];
    result.push(...orderedRecords.map(record => {
      return {
        name: templateType + '-' + record.id,
        searchLabel: record.title?.rendered + ' ' + record.id,
        label: record.title?.rendered ? record.title?.rendered : (0, _i18n.__)('(no title)'),
        icon: icons[templateType],
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate(`/${templateType}/${record.id}?canvas=edit`);
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: `/${templateType}/${record.id}`,
              canvas: 'edit'
            });
          }
          close();
        }
      };
    }));
    if (orderedRecords?.length > 0 && templateType === 'wp_template_part') {
      result.push({
        name: 'core/edit-site/open-template-parts',
        label: (0, _i18n.__)('Template parts'),
        icon: _icons.symbolFilled,
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate('/pattern?postType=wp_template_part&categoryId=all-parts');
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: '/pattern',
              postType: 'wp_template_part',
              categoryId: 'all-parts'
            });
          }
          close();
        }
      });
    }
    return result;
  }, [canCreateTemplate, isBlockBasedTheme, orderedRecords, history]);
  return {
    commands,
    isLoading
  };
};
const getSiteEditorBasicNavigationCommands = () => function useSiteEditorBasicNavigationCommands() {
  const history = useHistory();
  const isSiteEditor = (0, _url.getPath)(window.location.href)?.includes('site-editor.php');
  const {
    isBlockBasedTheme,
    canCreateTemplate
  } = (0, _data.useSelect)(select => {
    return {
      isBlockBasedTheme: select(_coreData.store).getCurrentTheme()?.is_block_theme,
      canCreateTemplate: select(_coreData.store).canUser('create', {
        kind: 'postType',
        name: 'wp_template'
      })
    };
  }, []);
  const commands = (0, _element.useMemo)(() => {
    const result = [];
    if (canCreateTemplate && isBlockBasedTheme) {
      result.push({
        name: 'core/edit-site/open-navigation',
        label: (0, _i18n.__)('Navigation'),
        icon: _icons.navigation,
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate('/navigation');
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: '/navigation'
            });
          }
          close();
        }
      });
      result.push({
        name: 'core/edit-site/open-styles',
        label: (0, _i18n.__)('Styles'),
        icon: _icons.styles,
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate('/styles');
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: '/styles'
            });
          }
          close();
        }
      });
      result.push({
        name: 'core/edit-site/open-pages',
        label: (0, _i18n.__)('Pages'),
        icon: _icons.page,
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate('/page');
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: '/page'
            });
          }
          close();
        }
      });
      result.push({
        name: 'core/edit-site/open-templates',
        label: (0, _i18n.__)('Templates'),
        icon: _icons.layout,
        callback: ({
          close
        }) => {
          if (isSiteEditor) {
            history.navigate('/template');
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: '/template'
            });
          }
          close();
        }
      });
    }
    result.push({
      name: 'core/edit-site/open-patterns',
      label: (0, _i18n.__)('Patterns'),
      icon: _icons.symbol,
      callback: ({
        close
      }) => {
        if (canCreateTemplate) {
          if (isSiteEditor) {
            history.navigate('/pattern');
          } else {
            document.location = (0, _url.addQueryArgs)('site-editor.php', {
              p: '/pattern'
            });
          }
          close();
        } else {
          // If a user cannot access the site editor
          document.location.href = 'edit.php?post_type=wp_block';
        }
      }
    });
    return result;
  }, [history, isSiteEditor, canCreateTemplate, isBlockBasedTheme]);
  return {
    commands,
    isLoading: false
  };
};
function useSiteEditorNavigationCommands() {
  (0, _commands.useCommandLoader)({
    name: 'core/edit-site/navigate-pages',
    hook: getNavigationCommandLoaderPerPostType('page')
  });
  (0, _commands.useCommandLoader)({
    name: 'core/edit-site/navigate-posts',
    hook: getNavigationCommandLoaderPerPostType('post')
  });
  (0, _commands.useCommandLoader)({
    name: 'core/edit-site/navigate-templates',
    hook: getNavigationCommandLoaderPerTemplate('wp_template')
  });
  (0, _commands.useCommandLoader)({
    name: 'core/edit-site/navigate-template-parts',
    hook: getNavigationCommandLoaderPerTemplate('wp_template_part')
  });
  (0, _commands.useCommandLoader)({
    name: 'core/edit-site/basic-navigation',
    hook: getSiteEditorBasicNavigationCommands(),
    context: 'site-editor'
  });
}
//# sourceMappingURL=site-editor-navigation-commands.js.map