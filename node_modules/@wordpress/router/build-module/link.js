/**
 * WordPress dependencies
 */
import { useContext, useMemo } from '@wordpress/element';
import { getQueryArgs, getPath, buildQueryString } from '@wordpress/url';

/**
 * Internal dependencies
 */
import { ConfigContext, useHistory } from './router';
import { jsx as _jsx } from "react/jsx-runtime";
export function useLink(to, options = {}) {
  var _getPath;
  const history = useHistory();
  const {
    pathArg,
    beforeNavigate
  } = useContext(ConfigContext);
  function onClick(event) {
    event?.preventDefault();
    history.navigate(to, options);
  }
  const query = getQueryArgs(to);
  const path = (_getPath = getPath('http://domain.com/' + to)) !== null && _getPath !== void 0 ? _getPath : '';
  const link = useMemo(() => {
    return beforeNavigate ? beforeNavigate({
      path,
      query
    }) : {
      path,
      query
    };
  }, [path, query, beforeNavigate]);
  const [before] = window.location.href.split('?');
  return {
    href: `${before}?${buildQueryString({
      [pathArg]: link.path,
      ...link.query
    })}`,
    onClick
  };
}
export function Link({
  to,
  options,
  children,
  ...props
}) {
  const {
    href,
    onClick
  } = useLink(to, options);
  return /*#__PURE__*/_jsx("a", {
    href: href,
    onClick: onClick,
    ...props,
    children: children
  });
}
//# sourceMappingURL=link.js.map