/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { createInterpolateElement } from '@wordpress/element';
import { dateI18n, getDate, getSettings } from '@wordpress/date';

/**
 * Internal dependencies
 */
import { jsx as _jsx } from "react/jsx-runtime";
const getFormattedDate = dateToDisplay => dateI18n(getSettings().formats.datetimeAbbreviated, getDate(dateToDisplay));
const DateView = ({
  item
}) => {
  var _item$status, _item$modified, _item$date4, _item$date5;
  const isDraftOrPrivate = ['draft', 'private'].includes((_item$status = item.status) !== null && _item$status !== void 0 ? _item$status : '');
  if (isDraftOrPrivate) {
    var _item$date;
    return createInterpolateElement(sprintf(/* translators: %s: page creation or modification date. */
    __('<span>Modified: <time>%s</time></span>'), getFormattedDate((_item$date = item.date) !== null && _item$date !== void 0 ? _item$date : null)), {
      span: /*#__PURE__*/_jsx("span", {}),
      time: /*#__PURE__*/_jsx("time", {})
    });
  }
  const isScheduled = item.status === 'future';
  if (isScheduled) {
    var _item$date2;
    return createInterpolateElement(sprintf(/* translators: %s: page creation date */
    __('<span>Scheduled: <time>%s</time></span>'), getFormattedDate((_item$date2 = item.date) !== null && _item$date2 !== void 0 ? _item$date2 : null)), {
      span: /*#__PURE__*/_jsx("span", {}),
      time: /*#__PURE__*/_jsx("time", {})
    });
  }
  const isPublished = item.status === 'publish';
  if (isPublished) {
    var _item$date3;
    return createInterpolateElement(sprintf(/* translators: %s: page creation time */
    __('<span>Published: <time>%s</time></span>'), getFormattedDate((_item$date3 = item.date) !== null && _item$date3 !== void 0 ? _item$date3 : null)), {
      span: /*#__PURE__*/_jsx("span", {}),
      time: /*#__PURE__*/_jsx("time", {})
    });
  }

  // Pending posts show the modified date if it's newer.
  const dateToDisplay = getDate((_item$modified = item.modified) !== null && _item$modified !== void 0 ? _item$modified : null) > getDate((_item$date4 = item.date) !== null && _item$date4 !== void 0 ? _item$date4 : null) ? item.modified : item.date;
  const isPending = item.status === 'pending';
  if (isPending) {
    return createInterpolateElement(sprintf(/* translators: %s: page creation or modification date. */
    __('<span>Modified: <time>%s</time></span>'), getFormattedDate(dateToDisplay !== null && dateToDisplay !== void 0 ? dateToDisplay : null)), {
      span: /*#__PURE__*/_jsx("span", {}),
      time: /*#__PURE__*/_jsx("time", {})
    });
  }

  // Unknow status.
  return /*#__PURE__*/_jsx("time", {
    children: getFormattedDate((_item$date5 = item.date) !== null && _item$date5 !== void 0 ? _item$date5 : null)
  });
};
export default DateView;
//# sourceMappingURL=date-view.js.map