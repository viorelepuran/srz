"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _date = require("@wordpress/date");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const getFormattedDate = dateToDisplay => (0, _date.dateI18n)((0, _date.getSettings)().formats.datetimeAbbreviated, (0, _date.getDate)(dateToDisplay));
const DateView = ({
  item
}) => {
  var _item$status, _item$modified, _item$date4, _item$date5;
  const isDraftOrPrivate = ['draft', 'private'].includes((_item$status = item.status) !== null && _item$status !== void 0 ? _item$status : '');
  if (isDraftOrPrivate) {
    var _item$date;
    return (0, _element.createInterpolateElement)((0, _i18n.sprintf)(/* translators: %s: page creation or modification date. */
    (0, _i18n.__)('<span>Modified: <time>%s</time></span>'), getFormattedDate((_item$date = item.date) !== null && _item$date !== void 0 ? _item$date : null)), {
      span: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {}),
      time: /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {})
    });
  }
  const isScheduled = item.status === 'future';
  if (isScheduled) {
    var _item$date2;
    return (0, _element.createInterpolateElement)((0, _i18n.sprintf)(/* translators: %s: page creation date */
    (0, _i18n.__)('<span>Scheduled: <time>%s</time></span>'), getFormattedDate((_item$date2 = item.date) !== null && _item$date2 !== void 0 ? _item$date2 : null)), {
      span: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {}),
      time: /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {})
    });
  }
  const isPublished = item.status === 'publish';
  if (isPublished) {
    var _item$date3;
    return (0, _element.createInterpolateElement)((0, _i18n.sprintf)(/* translators: %s: page creation time */
    (0, _i18n.__)('<span>Published: <time>%s</time></span>'), getFormattedDate((_item$date3 = item.date) !== null && _item$date3 !== void 0 ? _item$date3 : null)), {
      span: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {}),
      time: /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {})
    });
  }

  // Pending posts show the modified date if it's newer.
  const dateToDisplay = (0, _date.getDate)((_item$modified = item.modified) !== null && _item$modified !== void 0 ? _item$modified : null) > (0, _date.getDate)((_item$date4 = item.date) !== null && _item$date4 !== void 0 ? _item$date4 : null) ? item.modified : item.date;
  const isPending = item.status === 'pending';
  if (isPending) {
    return (0, _element.createInterpolateElement)((0, _i18n.sprintf)(/* translators: %s: page creation or modification date. */
    (0, _i18n.__)('<span>Modified: <time>%s</time></span>'), getFormattedDate(dateToDisplay !== null && dateToDisplay !== void 0 ? dateToDisplay : null)), {
      span: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {}),
      time: /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {})
    });
  }

  // Unknow status.
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {
    children: getFormattedDate((_item$date5 = item.date) !== null && _item$date5 !== void 0 ? _item$date5 : null)
  });
};
var _default = exports.default = DateView;
//# sourceMappingURL=date-view.js.map