"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemplateEdit = void 0;
var _element = require("@wordpress/element");
var _blocks = require("@wordpress/blocks");
var _coreData = require("@wordpress/core-data");
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _htmlEntities = require("@wordpress/html-entities");
var _i18n = require("@wordpress/i18n");
var _utils = require("../../actions/utils");
var _lockUnlock = require("../../lock-unlock");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

// @ts-ignore

/**
 * Internal dependencies
 */
// @ts-expect-error block-editor is not typed correctly.

const EMPTY_ARRAY = [];
const TemplateEdit = ({
  data,
  field,
  onChange
}) => {
  const {
    id
  } = field;
  const postType = data.type;
  const postId = typeof data.id === 'number' ? data.id : parseInt(data.id, 10);
  const slug = data.slug;
  const {
    canSwitchTemplate,
    templates
  } = (0, _data.useSelect)(select => {
    var _select$getEntityReco;
    const allTemplates = (_select$getEntityReco = select(_coreData.store).getEntityRecords('postType', 'wp_template', {
      per_page: -1,
      post_type: postType
    })) !== null && _select$getEntityReco !== void 0 ? _select$getEntityReco : EMPTY_ARRAY;
    const {
      getHomePage,
      getPostsPageId
    } = (0, _lockUnlock.unlock)(select(_coreData.store));
    const isPostsPage = getPostsPageId() === +postId;
    const isFrontPage = postType === 'page' && getHomePage()?.postId === +postId;
    const allowSwitchingTemplate = !isPostsPage && !isFrontPage;
    return {
      templates: allTemplates,
      canSwitchTemplate: allowSwitchingTemplate
    };
  }, [postId, postType]);
  const templatesAsPatterns = (0, _element.useMemo)(() => {
    if (!canSwitchTemplate) {
      return [];
    }
    return templates.filter(template => template.is_custom && template.slug !== data.template &&
    // Skip empty templates.
    !!template.content.raw).map(template => ({
      name: template.slug,
      blocks: (0, _blocks.parse)(template.content.raw),
      title: (0, _htmlEntities.decodeEntities)(template.title.rendered),
      id: template.id
    }));
  }, [canSwitchTemplate, data.template, templates]);
  const shownTemplates = (0, _compose.useAsyncList)(templatesAsPatterns);
  const value = field.getValue({
    item: data
  });
  const foundTemplate = templates.find(template => template.slug === value);
  const currentTemplate = (0, _data.useSelect)(select => {
    if (foundTemplate) {
      return foundTemplate;
    }
    let slugToCheck;
    // In `draft` status we might not have a slug available, so we use the `single`
    // post type templates slug(ex page, single-post, single-product etc..).
    // Pages do not need the `single` prefix in the slug to be prioritized
    // through template hierarchy.
    if (slug) {
      slugToCheck = postType === 'page' ? `${postType}-${slug}` : `single-${postType}-${slug}`;
    } else {
      slugToCheck = postType === 'page' ? 'page' : `single-${postType}`;
    }
    if (postType) {
      const templateId = select(_coreData.store).getDefaultTemplateId({
        slug: slugToCheck
      });
      return select(_coreData.store).getEntityRecord('postType', 'wp_template', templateId);
    }
  }, [foundTemplate, postType, slug]);
  const [showModal, setShowModal] = (0, _element.useState)(false);
  const onChangeControl = (0, _element.useCallback)(newValue => onChange({
    [id]: newValue
  }), [id, onChange]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("fieldset", {
    className: "fields-controls__template",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Dropdown, {
      popoverProps: {
        placement: 'bottom-start'
      },
      renderToggle: ({
        onToggle
      }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
        __next40pxDefaultSize: true,
        variant: "tertiary",
        size: "compact",
        onClick: onToggle,
        children: currentTemplate ? (0, _utils.getItemTitle)(currentTemplate) : ''
      }),
      renderContent: ({
        onToggle
      }) => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.MenuGroup, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.MenuItem, {
          onClick: () => {
            setShowModal(true);
            onToggle();
          },
          children: (0, _i18n.__)('Change template')
        }),
        // The default template in a post is indicated by an empty string
        value !== '' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.MenuItem, {
          onClick: () => {
            onChangeControl('');
            onToggle();
          },
          children: (0, _i18n.__)('Use default template')
        })]
      })
    }), showModal && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Modal, {
      title: (0, _i18n.__)('Choose a template'),
      onRequestClose: () => setShowModal(false),
      overlayClassName: "fields-controls__template-modal",
      isFullScreen: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "fields-controls__template-content",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.__experimentalBlockPatternsList, {
          label: (0, _i18n.__)('Templates'),
          blockPatterns: templatesAsPatterns,
          shownPatterns: shownTemplates,
          onClickPattern: template => {
            onChangeControl(template.name);
            setShowModal(false);
          }
        })
      })
    })]
  });
};
exports.TemplateEdit = TemplateEdit;
//# sourceMappingURL=template-edit.js.map