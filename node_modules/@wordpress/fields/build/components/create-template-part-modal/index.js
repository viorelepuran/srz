"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateTemplatePartModalContents = CreateTemplatePartModalContents;
exports.default = CreateTemplatePartModal;
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _coreData = require("@wordpress/core-data");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _notices = require("@wordpress/notices");
var _blocks = require("@wordpress/blocks");
var _utils = require("./utils");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

// @ts-expect-error serialize is not typed

/**
 * Internal dependencies
 */

function getAreaRadioId(value, instanceId) {
  return `fields-create-template-part-modal__area-option-${value}-${instanceId}`;
}
function getAreaRadioDescriptionId(value, instanceId) {
  return `fields-create-template-part-modal__area-option-description-${value}-${instanceId}`;
}
/**
 * A React component that renders a modal for creating a template part. The modal displays a title and the contents for creating the template part.
 * This component should not live in this package, it should be moved to a dedicated package responsible for managing template.
 * @param {Object} props            The component props.
 * @param          props.modalTitle
 */
function CreateTemplatePartModal({
  modalTitle,
  ...restProps
}) {
  const defaultModalTitle = (0, _data.useSelect)(select => select(_coreData.store).getPostType('wp_template_part')?.labels?.add_new_item, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Modal, {
    title: modalTitle || defaultModalTitle,
    onRequestClose: restProps.closeModal,
    overlayClassName: "fields-create-template-part-modal",
    focusOnMount: "firstContentElement",
    size: "medium",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(CreateTemplatePartModalContents, {
      ...restProps
    })
  });
}
const getTemplatePartIcon = iconName => {
  if ('header' === iconName) {
    return _icons.header;
  } else if ('footer' === iconName) {
    return _icons.footer;
  } else if ('sidebar' === iconName) {
    return _icons.sidebar;
  }
  return _icons.symbolFilled;
};

/**
 * A React component that renders the content of a model for creating a template part.
 * This component should not live in this package; it should be moved to a dedicated package responsible for managing template.
 *
 * @param {Object}   props                             - The component props.
 * @param {string}   [props.defaultArea=uncategorized] - The default area for the template part.
 * @param {Array}    [props.blocks=[]]                 - The blocks to be included in the template part.
 * @param {string}   [props.confirmLabel='Add']        - The label for the confirm button.
 * @param {Function} props.closeModal                  - Function to close the modal.
 * @param {Function} props.onCreate                    - Function to call when the template part is successfully created.
 * @param {Function} [props.onError]                   - Function to call when there is an error creating the template part.
 * @param {string}   [props.defaultTitle='']           - The default title for the template part.
 */
function CreateTemplatePartModalContents({
  defaultArea = 'uncategorized',
  blocks = [],
  confirmLabel = (0, _i18n.__)('Add'),
  closeModal,
  onCreate,
  onError,
  defaultTitle = ''
}) {
  const {
    createErrorNotice
  } = (0, _data.useDispatch)(_notices.store);
  const {
    saveEntityRecord
  } = (0, _data.useDispatch)(_coreData.store);
  const existingTemplateParts = (0, _utils.useExistingTemplateParts)();
  const [title, setTitle] = (0, _element.useState)(defaultTitle);
  const [area, setArea] = (0, _element.useState)(defaultArea);
  const [isSubmitting, setIsSubmitting] = (0, _element.useState)(false);
  const instanceId = (0, _compose.useInstanceId)(CreateTemplatePartModal);
  const defaultTemplatePartAreas = (0, _data.useSelect)(select => select(_coreData.store).getCurrentTheme()?.default_template_part_areas, []);
  async function createTemplatePart() {
    if (!title || isSubmitting) {
      return;
    }
    try {
      setIsSubmitting(true);
      const uniqueTitle = (0, _utils.getUniqueTemplatePartTitle)(title, existingTemplateParts);
      const cleanSlug = (0, _utils.getCleanTemplatePartSlug)(uniqueTitle);
      const templatePart = await saveEntityRecord('postType', 'wp_template_part', {
        slug: cleanSlug,
        title: uniqueTitle,
        content: (0, _blocks.serialize)(blocks),
        area
      }, {
        throwOnError: true
      });
      await onCreate(templatePart);

      // TODO: Add a success notice?
    } catch (error) {
      const errorMessage = error instanceof Error && 'code' in error && error.message && error.code !== 'unknown_error' ? error.message : (0, _i18n.__)('An error occurred while creating the template part.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
      onError?.();
    } finally {
      setIsSubmitting(false);
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("form", {
    onSubmit: async event => {
      event.preventDefault();
      await createTemplatePart();
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
      spacing: "4",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.TextControl, {
        __next40pxDefaultSize: true,
        __nextHasNoMarginBottom: true,
        label: (0, _i18n.__)('Name'),
        value: title,
        onChange: setTitle,
        required: true
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("fieldset", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BaseControl.VisualLabel, {
          as: "legend",
          children: (0, _i18n.__)('Area')
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "fields-create-template-part-modal__area-radio-group",
          children: (defaultTemplatePartAreas !== null && defaultTemplatePartAreas !== void 0 ? defaultTemplatePartAreas : []).map(item => {
            const icon = getTemplatePartIcon(item.icon);
            return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "fields-create-template-part-modal__area-radio-wrapper",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                type: "radio",
                id: getAreaRadioId(item.area, instanceId),
                name: `fields-create-template-part-modal__area-${instanceId}`,
                value: item.area,
                checked: area === item.area,
                onChange: () => {
                  setArea(item.area);
                },
                "aria-describedby": getAreaRadioDescriptionId(item.area, instanceId)
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Icon, {
                icon: icon,
                className: "fields-create-template-part-modal__area-radio-icon"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                htmlFor: getAreaRadioId(item.area, instanceId),
                className: "fields-create-template-part-modal__area-radio-label",
                children: item.label
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Icon, {
                icon: _icons.check,
                className: "fields-create-template-part-modal__area-radio-checkmark"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "fields-create-template-part-modal__area-radio-description",
                id: getAreaRadioDescriptionId(item.area, instanceId),
                children: item.description
              })]
            }, item.area);
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
        justify: "right",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          __next40pxDefaultSize: true,
          variant: "tertiary",
          onClick: () => {
            closeModal();
          },
          children: (0, _i18n.__)('Cancel')
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          __next40pxDefaultSize: true,
          variant: "primary",
          type: "submit",
          "aria-disabled": !title || isSubmitting,
          isBusy: isSubmitting,
          children: confirmLabel
        })]
      })]
    })
  });
}
//# sourceMappingURL=index.js.map