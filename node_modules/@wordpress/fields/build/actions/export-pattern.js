"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _changeCase = require("change-case");
var _clientZip = require("client-zip");
var _blob = require("@wordpress/blob");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _utils = require("./utils");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function getJsonFromItem(item) {
  return JSON.stringify({
    __file: item.type,
    title: (0, _utils.getItemTitle)(item),
    content: typeof item.content === 'string' ? item.content : item.content?.raw,
    syncStatus: item.wp_pattern_sync_status
  }, null, 2);
}
const exportPattern = {
  id: 'export-pattern',
  label: (0, _i18n.__)('Export as JSON'),
  icon: _icons.download,
  supportsBulk: true,
  isEligible: item => item.type === 'wp_block',
  callback: async items => {
    if (items.length === 1) {
      return (0, _blob.downloadBlob)(`${(0, _changeCase.paramCase)((0, _utils.getItemTitle)(items[0]) || items[0].slug)}.json`, getJsonFromItem(items[0]), 'application/json');
    }
    const nameCount = {};
    const filesToZip = items.map(item => {
      const name = (0, _changeCase.paramCase)((0, _utils.getItemTitle)(item) || item.slug);
      nameCount[name] = (nameCount[name] || 0) + 1;
      return {
        name: `${name + (nameCount[name] > 1 ? '-' + (nameCount[name] - 1) : '')}.json`,
        lastModified: new Date(),
        input: getJsonFromItem(item)
      };
    });
    return (0, _blob.downloadBlob)((0, _i18n.__)('patterns-export') + '.zip', await (0, _clientZip.downloadZip)(filesToZip).blob(), 'application/zip');
  }
};

/**
 * Export action as JSON for Pattern.
 */
var _default = exports.default = exportPattern;
//# sourceMappingURL=export-pattern.js.map