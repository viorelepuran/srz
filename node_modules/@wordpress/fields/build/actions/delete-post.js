"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _icons = require("@wordpress/icons");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _patterns = require("@wordpress/patterns");
var _htmlEntities = require("@wordpress/html-entities");
var _utils = require("./utils");
var _mutation = require("../mutation");
var _lockUnlock = require("../lock-unlock");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

// @ts-ignore

/**
 * Internal dependencies
 */

const {
  PATTERN_TYPES
} = (0, _lockUnlock.unlock)(_patterns.privateApis);

// This action is used for templates, patterns and template parts.
// Every other post type uses the similar `trashPostAction` which
// moves the post to trash.
const deletePostAction = {
  id: 'delete-post',
  label: (0, _i18n.__)('Delete'),
  isPrimary: true,
  icon: _icons.trash,
  isEligible(post) {
    if ((0, _utils.isTemplateOrTemplatePart)(post)) {
      return (0, _utils.isTemplateRemovable)(post);
    }
    // We can only remove user patterns.
    return post.type === PATTERN_TYPES.user;
  },
  supportsBulk: true,
  hideModalHeader: true,
  modalFocusOnMount: 'firstContentElement',
  RenderModal: ({
    items,
    closeModal,
    onActionPerformed
  }) => {
    const [isBusy, setIsBusy] = (0, _element.useState)(false);
    const isResetting = items.every(item => (0, _utils.isTemplateOrTemplatePart)(item) && item?.has_theme_file);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
      spacing: "5",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalText, {
        children: items.length > 1 ? (0, _i18n.sprintf)(
        // translators: %d: number of items to delete.
        (0, _i18n._n)('Delete %d item?', 'Delete %d items?', items.length), items.length) : (0, _i18n.sprintf)(
        // translators: %s: The template or template part's title
        (0, _i18n._x)('Delete "%s"?', 'template part'), (0, _utils.getItemTitle)(items[0]))
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
        justify: "right",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          variant: "tertiary",
          onClick: closeModal,
          disabled: isBusy,
          accessibleWhenDisabled: true,
          __next40pxDefaultSize: true,
          children: (0, _i18n.__)('Cancel')
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          variant: "primary",
          onClick: async () => {
            setIsBusy(true);
            const notice = {
              success: {
                messages: {
                  getMessage: item => {
                    return isResetting ? (0, _i18n.sprintf)(/* translators: The template/part's name. */
                    (0, _i18n.__)('"%s" reset.'), (0, _htmlEntities.decodeEntities)((0, _utils.getItemTitle)(item))) : (0, _i18n.sprintf)(/* translators: %s: The template/part's name. */
                    (0, _i18n._x)('"%s" deleted.', 'template part'), (0, _htmlEntities.decodeEntities)((0, _utils.getItemTitle)(item)));
                  },
                  getBatchMessage: () => {
                    return isResetting ? (0, _i18n.__)('Items reset.') : (0, _i18n.__)('Items deleted.');
                  }
                }
              },
              error: {
                messages: {
                  getMessage: error => {
                    if (error.size === 1) {
                      return [...error][0];
                    }
                    return isResetting ? (0, _i18n.__)('An error occurred while reverting the item.') : (0, _i18n.__)('An error occurred while deleting the item.');
                  },
                  getBatchMessage: errors => {
                    if (errors.size === 0) {
                      return isResetting ? (0, _i18n.__)('An error occurred while reverting the items.') : (0, _i18n.__)('An error occurred while deleting the items.');
                    }
                    if (errors.size === 1) {
                      return isResetting ? (0, _i18n.sprintf)(/* translators: %s: an error message */
                      (0, _i18n.__)('An error occurred while reverting the items: %s'), [...errors][0]) : (0, _i18n.sprintf)(/* translators: %s: an error message */
                      (0, _i18n.__)('An error occurred while deleting the items: %s'), [...errors][0]);
                    }
                    return isResetting ? (0, _i18n.sprintf)(/* translators: %s: a list of comma separated error messages */
                    (0, _i18n.__)('Some errors occurred while reverting the items: %s'), [...errors].join(',')) : (0, _i18n.sprintf)(/* translators: %s: a list of comma separated error messages */
                    (0, _i18n.__)('Some errors occurred while deleting the items: %s'), [...errors].join(','));
                  }
                }
              }
            };
            await (0, _mutation.deletePostWithNotices)(items, notice, {
              onActionPerformed
            });
            setIsBusy(false);
            closeModal?.();
          },
          isBusy: isBusy,
          disabled: isBusy,
          accessibleWhenDisabled: true,
          __next40pxDefaultSize: true,
          children: (0, _i18n.__)('Delete')
        })]
      })]
    });
  }
};

/**
 * Delete action for Templates, Patterns and Template Parts.
 */
var _default = exports.default = deletePostAction;
//# sourceMappingURL=delete-post.js.map