"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _coreData = require("@wordpress/core-data");
var _i18n = require("@wordpress/i18n");
var _notices = require("@wordpress/notices");
var _icons = require("@wordpress/icons");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _htmlEntities = require("@wordpress/html-entities");
var _utils = require("./utils");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const permanentlyDeletePost = {
  id: 'permanently-delete',
  label: (0, _i18n.__)('Permanently delete'),
  supportsBulk: true,
  icon: _icons.trash,
  isEligible(item) {
    if ((0, _utils.isTemplateOrTemplatePart)(item) || item.type === 'wp_block') {
      return false;
    }
    const {
      status,
      permissions
    } = item;
    return status === 'trash' && permissions?.delete;
  },
  hideModalHeader: true,
  modalFocusOnMount: 'firstContentElement',
  RenderModal: ({
    items,
    closeModal,
    onActionPerformed
  }) => {
    const [isBusy, setIsBusy] = (0, _element.useState)(false);
    const {
      createSuccessNotice,
      createErrorNotice
    } = (0, _data.useDispatch)(_notices.store);
    const {
      deleteEntityRecord
    } = (0, _data.useDispatch)(_coreData.store);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
      spacing: "5",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalText, {
        children: items.length > 1 ? (0, _i18n.sprintf)(
        // translators: %d: number of items to delete.
        (0, _i18n._n)('Are you sure you want to permanently delete %d item?', 'Are you sure you want to permanently delete %d items?', items.length), items.length) : (0, _i18n.sprintf)(
        // translators: %s: The post's title
        (0, _i18n.__)('Are you sure you want to permanently delete "%s"?'), (0, _htmlEntities.decodeEntities)((0, _utils.getItemTitle)(items[0])))
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
        justify: "right",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          variant: "tertiary",
          onClick: closeModal,
          disabled: isBusy,
          accessibleWhenDisabled: true,
          __next40pxDefaultSize: true,
          children: (0, _i18n.__)('Cancel')
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          variant: "primary",
          onClick: async () => {
            setIsBusy(true);
            const promiseResult = await Promise.allSettled(items.map(post => deleteEntityRecord('postType', post.type, post.id, {
              force: true
            }, {
              throwOnError: true
            })));

            // If all the promises were fulfilled with success.
            if (promiseResult.every(({
              status
            }) => status === 'fulfilled')) {
              let successMessage;
              if (promiseResult.length === 1) {
                successMessage = (0, _i18n.sprintf)(/* translators: The posts's title. */
                (0, _i18n.__)('"%s" permanently deleted.'), (0, _utils.getItemTitle)(items[0]));
              } else {
                successMessage = (0, _i18n.__)('The items were permanently deleted.');
              }
              createSuccessNotice(successMessage, {
                type: 'snackbar',
                id: 'permanently-delete-post-action'
              });
              onActionPerformed?.(items);
            } else {
              // If there was at lease one failure.
              let errorMessage;
              // If we were trying to permanently delete a single post.
              if (promiseResult.length === 1) {
                const typedError = promiseResult[0];
                if (typedError.reason?.message) {
                  errorMessage = typedError.reason.message;
                } else {
                  errorMessage = (0, _i18n.__)('An error occurred while permanently deleting the item.');
                }
                // If we were trying to permanently delete multiple posts
              } else {
                const errorMessages = new Set();
                const failedPromises = promiseResult.filter(({
                  status
                }) => status === 'rejected');
                for (const failedPromise of failedPromises) {
                  const typedError = failedPromise;
                  if (typedError.reason?.message) {
                    errorMessages.add(typedError.reason.message);
                  }
                }
                if (errorMessages.size === 0) {
                  errorMessage = (0, _i18n.__)('An error occurred while permanently deleting the items.');
                } else if (errorMessages.size === 1) {
                  errorMessage = (0, _i18n.sprintf)(/* translators: %s: an error message */
                  (0, _i18n.__)('An error occurred while permanently deleting the items: %s'), [...errorMessages][0]);
                } else {
                  errorMessage = (0, _i18n.sprintf)(/* translators: %s: a list of comma separated error messages */
                  (0, _i18n.__)('Some errors occurred while permanently deleting the items: %s'), [...errorMessages].join(','));
                }
              }
              createErrorNotice(errorMessage, {
                type: 'snackbar'
              });
            }
            setIsBusy(false);
            closeModal?.();
          },
          isBusy: isBusy,
          disabled: isBusy,
          accessibleWhenDisabled: true,
          __next40pxDefaultSize: true,
          children: (0, _i18n.__)('Delete permanently')
        })]
      })]
    });
  }
};

/**
 * Delete action for PostWithPermissions.
 */
var _default = exports.default = permanentlyDeletePost;
//# sourceMappingURL=permanently-delete-post.js.map