"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Edit;
var _clsx = _interopRequireDefault(require("clsx"));
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _coreData = require("@wordpress/core-data");
var _widgetTypeSelector = _interopRequireDefault(require("./widget-type-selector"));
var _inspectorCard = _interopRequireDefault(require("./inspector-card"));
var _form = _interopRequireDefault(require("./form"));
var _preview = _interopRequireDefault(require("./preview"));
var _noPreview = _interopRequireDefault(require("./no-preview"));
var _convertToBlocksButton = _interopRequireDefault(require("./convert-to-blocks-button"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function Edit(props) {
  const {
    id,
    idBase
  } = props.attributes;
  const {
    isWide = false
  } = props;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _clsx.default)({
      'is-wide-widget': isWide
    })
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    ...blockProps,
    children: !id && !idBase ? /*#__PURE__*/(0, _jsxRuntime.jsx)(Empty, {
      ...props
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(NotEmpty, {
      ...props
    })
  });
}
function Empty({
  attributes: {
    id,
    idBase
  },
  setAttributes
}) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Placeholder, {
    icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.BlockIcon, {
      icon: _icons.brush
    }),
    label: (0, _i18n.__)('Legacy Widget'),
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Flex, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.FlexBlock, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_widgetTypeSelector.default, {
          selectedId: id !== null && id !== void 0 ? id : idBase,
          onSelect: ({
            selectedId,
            isMulti
          }) => {
            if (!selectedId) {
              setAttributes({
                id: null,
                idBase: null,
                instance: null
              });
            } else if (isMulti) {
              setAttributes({
                id: null,
                idBase: selectedId,
                instance: {}
              });
            } else {
              setAttributes({
                id: selectedId,
                idBase: null,
                instance: null
              });
            }
          }
        })
      })
    })
  });
}
function NotEmpty({
  attributes: {
    id,
    idBase,
    instance
  },
  setAttributes,
  clientId,
  isSelected,
  isWide = false
}) {
  const [hasPreview, setHasPreview] = (0, _element.useState)(null);
  const widgetTypeId = id !== null && id !== void 0 ? id : idBase;
  const {
    record: widgetType,
    hasResolved: hasResolvedWidgetType
  } = (0, _coreData.useEntityRecord)('root', 'widgetType', widgetTypeId);
  const setInstance = (0, _element.useCallback)(nextInstance => {
    setAttributes({
      instance: nextInstance
    });
  }, []);
  if (!widgetType && hasResolvedWidgetType) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Placeholder, {
      icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.BlockIcon, {
        icon: _icons.brush
      }),
      label: (0, _i18n.__)('Legacy Widget'),
      children: (0, _i18n.__)('Widget is missing.')
    });
  }
  if (!hasResolvedWidgetType) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Placeholder, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Spinner, {})
    });
  }
  const mode = idBase && !isSelected ? 'preview' : 'edit';
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [idBase === 'text' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.BlockControls, {
      group: "other",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_convertToBlocksButton.default, {
        clientId: clientId,
        rawInstance: instance.raw
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.InspectorControls, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_inspectorCard.default, {
        name: widgetType.name,
        description: widgetType.description
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_form.default, {
      title: widgetType.name,
      isVisible: mode === 'edit',
      id: id,
      idBase: idBase,
      instance: instance,
      isWide: isWide,
      onChangeInstance: setInstance,
      onChangeHasPreview: setHasPreview
    }), idBase && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [hasPreview === null && mode === 'preview' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Placeholder, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Spinner, {})
      }), hasPreview === true && /*#__PURE__*/(0, _jsxRuntime.jsx)(_preview.default, {
        idBase: idBase,
        instance: instance,
        isVisible: mode === 'preview'
      }), hasPreview === false && mode === 'preview' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_noPreview.default, {
        name: widgetType.name
      })]
    })]
  });
}
//# sourceMappingURL=index.js.map