{"version":3,"names":["store","blockEditorStore","createBlock","isReusableBlock","parse","serialize","__","__experimentalConvertBlockToStatic","clientId","registry","oldBlock","select","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","content","dispatch","replaceBlocks","__experimentalConvertBlocksToReusable","clientIds","title","syncType","meta","wp_pattern_sync_status","undefined","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","id","__experimentalSetEditingReusableBlock","__experimentalDeleteReusableBlock","allBlocks","getBlocks","associatedBlocks","filter","block","associatedBlockClientIds","map","length","removeBlocks","deleteEntityRecord","isEditing","type"],"sources":["@wordpress/reusable-blocks/src/store/actions.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport {\n\tcreateBlock,\n\tisReusableBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Returns a generator converting a reusable block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n */\nexport const __experimentalConvertBlockToStatic =\n\t( clientId ) =>\n\t( { registry } ) => {\n\t\tconst oldBlock = registry\n\t\t\t.select( blockEditorStore )\n\t\t\t.getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_block',\n\t\t\t\toldBlock.attributes.ref\n\t\t\t);\n\n\t\tconst newBlocks = parse(\n\t\t\ttypeof reusableBlock.content === 'function'\n\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t};\n\n/**\n * Returns a generator converting one or more static blocks into a pattern.\n *\n * @param {string[]}             clientIds The client IDs of the block to detach.\n * @param {string}               title     Pattern title.\n * @param {undefined|'unsynced'} syncType  They way block is synced, current undefined (synced) and 'unsynced'.\n */\nexport const __experimentalConvertBlocksToReusable =\n\t( clientIds, title, syncType ) =>\n\tasync ( { registry, dispatch } ) => {\n\t\tconst meta =\n\t\t\tsyncType === 'unsynced'\n\t\t\t\t? {\n\t\t\t\t\t\twp_pattern_sync_status: syncType,\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tconst reusableBlock = {\n\t\t\ttitle: title || __( 'Untitled pattern block' ),\n\t\t\tcontent: serialize(\n\t\t\t\tregistry\n\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t),\n\t\t\tstatus: 'publish',\n\t\t\tmeta,\n\t\t};\n\n\t\tconst updatedRecord = await registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\tif ( syncType === 'unsynced' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\tref: updatedRecord.id,\n\t\t} );\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\tdispatch.__experimentalSetEditingReusableBlock(\n\t\t\tnewBlock.clientId,\n\t\t\ttrue\n\t\t);\n\t};\n\n/**\n * Returns a generator deleting a reusable block.\n *\n * @param {string} id The ID of the reusable block to delete.\n */\nexport const __experimentalDeleteReusableBlock =\n\t( id ) =>\n\tasync ( { registry } ) => {\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t// Don't allow a reusable block with a temporary ID to be deleted.\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove any other blocks that reference this reusable block.\n\t\tconst allBlocks = registry.select( blockEditorStore ).getBlocks();\n\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t);\n\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t( block ) => block.clientId\n\t\t);\n\n\t\t// Remove the parsed block.\n\t\tif ( associatedBlockClientIds.length ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t}\n\n\t\tawait registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t};\n\n/**\n * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.\n *\n * @param {string}  clientId  The clientID of the reusable block to target.\n * @param {boolean} isEditing Whether the block should be in editing state.\n * @return {Object} Action descriptor.\n */\nexport function __experimentalSetEditingReusableBlock( clientId, isEditing ) {\n\treturn {\n\t\ttype: 'SET_EDITING_REUSABLE_BLOCK',\n\t\tclientId,\n\t\tisEditing,\n\t};\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,KAAK,IAAIC,gBAAgB,QAAQ,yBAAyB;AACnE,SACCC,WAAW,EACXC,eAAe,EACfC,KAAK,EACLC,SAAS,QACH,mBAAmB;AAC1B,SAASC,EAAE,QAAQ,iBAAiB;;AAEpC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kCAAkC,GAC5CC,QAAQ,IACV,CAAE;EAAEC;AAAS,CAAC,KAAM;EACnB,MAAMC,QAAQ,GAAGD,QAAQ,CACvBE,MAAM,CAAEV,gBAAiB,CAAC,CAC1BW,QAAQ,CAAEJ,QAAS,CAAC;EACtB,MAAMK,aAAa,GAAGJ,QAAQ,CAC5BE,MAAM,CAAE,MAAO,CAAC,CAChBG,qBAAqB,CACrB,UAAU,EACV,UAAU,EACVJ,QAAQ,CAACK,UAAU,CAACC,GACrB,CAAC;EAEF,MAAMC,SAAS,GAAGb,KAAK,CACtB,OAAOS,aAAa,CAACK,OAAO,KAAK,UAAU,GACxCL,aAAa,CAACK,OAAO,CAAEL,aAAc,CAAC,GACtCA,aAAa,CAACK,OAClB,CAAC;EACDT,QAAQ,CACNU,QAAQ,CAAElB,gBAAiB,CAAC,CAC5BmB,aAAa,CAAEV,QAAQ,CAACF,QAAQ,EAAES,SAAU,CAAC;AAChD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,qCAAqC,GACjDA,CAAEC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,KAC5B,OAAQ;EAAEf,QAAQ;EAAEU;AAAS,CAAC,KAAM;EACnC,MAAMM,IAAI,GACTD,QAAQ,KAAK,UAAU,GACpB;IACAE,sBAAsB,EAAEF;EACxB,CAAC,GACDG,SAAS;EAEb,MAAMd,aAAa,GAAG;IACrBU,KAAK,EAAEA,KAAK,IAAIjB,EAAE,CAAE,wBAAyB,CAAC;IAC9CY,OAAO,EAAEb,SAAS,CACjBI,QAAQ,CACNE,MAAM,CAAEV,gBAAiB,CAAC,CAC1B2B,mBAAmB,CAAEN,SAAU,CAClC,CAAC;IACDO,MAAM,EAAE,SAAS;IACjBJ;EACD,CAAC;EAED,MAAMK,aAAa,GAAG,MAAMrB,QAAQ,CAClCU,QAAQ,CAAE,MAAO,CAAC,CAClBY,gBAAgB,CAAE,UAAU,EAAE,UAAU,EAAElB,aAAc,CAAC;EAE3D,IAAKW,QAAQ,KAAK,UAAU,EAAG;IAC9B;EACD;EAEA,MAAMQ,QAAQ,GAAG9B,WAAW,CAAE,YAAY,EAAE;IAC3Cc,GAAG,EAAEc,aAAa,CAACG;EACpB,CAAE,CAAC;EACHxB,QAAQ,CACNU,QAAQ,CAAElB,gBAAiB,CAAC,CAC5BmB,aAAa,CAAEE,SAAS,EAAEU,QAAS,CAAC;EACtCb,QAAQ,CAACe,qCAAqC,CAC7CF,QAAQ,CAACxB,QAAQ,EACjB,IACD,CAAC;AACF,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2B,iCAAiC,GAC3CF,EAAE,IACJ,OAAQ;EAAExB;AAAS,CAAC,KAAM;EACzB,MAAMI,aAAa,GAAGJ,QAAQ,CAC5BE,MAAM,CAAE,MAAO,CAAC,CAChBG,qBAAqB,CAAE,UAAU,EAAE,UAAU,EAAEmB,EAAG,CAAC;;EAErD;EACA,IAAK,CAAEpB,aAAa,EAAG;IACtB;EACD;;EAEA;EACA,MAAMuB,SAAS,GAAG3B,QAAQ,CAACE,MAAM,CAAEV,gBAAiB,CAAC,CAACoC,SAAS,CAAC,CAAC;EACjE,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,MAAM,CACtCC,KAAK,IAAMrC,eAAe,CAAEqC,KAAM,CAAC,IAAIA,KAAK,CAACzB,UAAU,CAACC,GAAG,KAAKiB,EACnE,CAAC;EACD,MAAMQ,wBAAwB,GAAGH,gBAAgB,CAACI,GAAG,CAClDF,KAAK,IAAMA,KAAK,CAAChC,QACpB,CAAC;;EAED;EACA,IAAKiC,wBAAwB,CAACE,MAAM,EAAG;IACtClC,QAAQ,CACNU,QAAQ,CAAElB,gBAAiB,CAAC,CAC5B2C,YAAY,CAAEH,wBAAyB,CAAC;EAC3C;EAEA,MAAMhC,QAAQ,CACZU,QAAQ,CAAE,MAAO,CAAC,CAClB0B,kBAAkB,CAAE,UAAU,EAAE,UAAU,EAAEZ,EAAG,CAAC;AACnD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qCAAqCA,CAAE1B,QAAQ,EAAEsC,SAAS,EAAG;EAC5E,OAAO;IACNC,IAAI,EAAE,4BAA4B;IAClCvC,QAAQ;IACRsC;EACD,CAAC;AACF","ignoreList":[]}