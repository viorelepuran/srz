"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomFieldsConfirmation = CustomFieldsConfirmation;
exports.default = EnableCustomFieldsOption;
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _editor = require("@wordpress/editor");
var _preferences = require("@wordpress/preferences");
var _url = require("@wordpress/url");
var _lockUnlock = require("../../lock-unlock");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  PreferenceBaseOption
} = (0, _lockUnlock.unlock)(_preferences.privateApis);
function submitCustomFieldsForm() {
  const customFieldsForm = document.getElementById('toggle-custom-fields-form');

  // Ensure the referrer values is up to update with any
  customFieldsForm.querySelector('[name="_wp_http_referer"]').setAttribute('value', (0, _url.getPathAndQueryString)(window.location.href));
  customFieldsForm.submit();
}
function CustomFieldsConfirmation({
  willEnable
}) {
  const [isReloading, setIsReloading] = (0, _element.useState)(false);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
      className: "edit-post-preferences-modal__custom-fields-confirmation-message",
      children: (0, _i18n.__)('A page reload is required for this change. Make sure your content is saved before reloading.')
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
      __next40pxDefaultSize: true,
      variant: "secondary",
      isBusy: isReloading,
      accessibleWhenDisabled: true,
      disabled: isReloading,
      onClick: () => {
        setIsReloading(true);
        submitCustomFieldsForm();
      },
      children: willEnable ? (0, _i18n.__)('Show & Reload Page') : (0, _i18n.__)('Hide & Reload Page')
    })]
  });
}
function EnableCustomFieldsOption({
  label
}) {
  const areCustomFieldsEnabled = (0, _data.useSelect)(select => {
    return !!select(_editor.store).getEditorSettings().enableCustomFields;
  }, []);
  const [isChecked, setIsChecked] = (0, _element.useState)(areCustomFieldsEnabled);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(PreferenceBaseOption, {
    label: label,
    isChecked: isChecked,
    onChange: setIsChecked,
    children: isChecked !== areCustomFieldsEnabled && /*#__PURE__*/(0, _jsxRuntime.jsx)(CustomFieldsConfirmation, {
      willEnable: isChecked
    })
  });
}
//# sourceMappingURL=enable-custom-fields.js.map