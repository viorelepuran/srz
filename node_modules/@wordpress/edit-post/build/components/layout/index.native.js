"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _reactNativeSafeArea = _interopRequireDefault(require("react-native-safe-area"));
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _editor = require("@wordpress/editor");
var _reactNativeBridge = require("@wordpress/react-native-bridge");
var _style = _interopRequireDefault(require("./style.scss"));
var _style2 = _interopRequireDefault(require("../header/header-toolbar/style.scss"));
var _header = _interopRequireDefault(require("../header"));
var _visualEditor = _interopRequireDefault(require("../visual-editor"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

class Layout extends _element.Component {
  constructor() {
    super(...arguments);
    this.onSafeAreaInsetsUpdate = this.onSafeAreaInsetsUpdate.bind(this);
    this.onRootViewLayout = this.onRootViewLayout.bind(this);
    this.state = {
      rootViewHeight: 0,
      safeAreaInsets: {
        top: 0,
        bottom: 0,
        right: 0,
        left: 0
      }
    };
    _reactNativeSafeArea.default.getSafeAreaInsetsForRootView().then(this.onSafeAreaInsetsUpdate);
  }
  componentDidMount() {
    this._isMounted = true;
    this.safeAreaSubscription = _reactNativeSafeArea.default.addEventListener('safeAreaInsetsForRootViewDidChange', this.onSafeAreaInsetsUpdate);
  }
  componentWillUnmount() {
    this.safeAreaSubscription?.remove();
    this._isMounted = false;
  }
  onSafeAreaInsetsUpdate(result) {
    const {
      safeAreaInsets
    } = result;
    if (this._isMounted) {
      this.setState({
        safeAreaInsets
      });
    }
  }
  onRootViewLayout(event) {
    if (this._isMounted) {
      this.setHeightState(event);
    }
  }
  setHeightState(event) {
    const {
      height
    } = event.nativeEvent.layout;
    if (height !== this.state.rootViewHeight) {
      this.setState({
        rootViewHeight: height
      }, _reactNativeBridge.sendNativeEditorDidLayout);
    }
  }
  renderHTML() {
    const {
      globalStyles
    } = this.props;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.HTMLTextInput, {
      parentHeight: this.state.rootViewHeight,
      style: globalStyles
    });
  }
  renderVisual() {
    const {
      isReady
    } = this.props;
    if (!isReady) {
      return null;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_visualEditor.default, {
      setTitleRef: this.props.setTitleRef
    });
  }
  render() {
    const {
      getStylesFromColorScheme,
      mode,
      globalStyles
    } = this.props;
    const isHtmlView = mode === 'text';

    // Add a margin view at the bottom for the header.
    const marginBottom = _reactNative.Platform.OS === 'android' && !isHtmlView ? _style2.default['header-toolbar__container'].height : 0;
    const containerStyles = getStylesFromColorScheme(_style.default.container, _style.default.containerDark);
    const toolbarKeyboardAvoidingViewStyle = {
      ..._style.default.toolbarKeyboardAvoidingView,
      left: this.state.safeAreaInsets.left,
      right: this.state.safeAreaInsets.right,
      bottom: this.state.safeAreaInsets.bottom,
      backgroundColor: containerStyles.backgroundColor
    };
    const editorStyles = [getStylesFromColorScheme(_style.default.background, _style.default.backgroundDark), globalStyles?.background && {
      backgroundColor: globalStyles.background
    }];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Tooltip.Slot, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: containerStyles,
        onLayout: this.onRootViewLayout,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_editor.AutosaveMonitor, {
          disableIntervalChecks: true
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_editor.OfflineStatus, {}), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: editorStyles,
          children: [isHtmlView ? this.renderHTML() : this.renderVisual(), !isHtmlView && _reactNative.Platform.OS === 'android' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.FloatingToolbar, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.NoticeList, {})]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            flex: 0,
            flexBasis: marginBottom,
            height: marginBottom
          }
        }), !isHtmlView && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.KeyboardAvoidingView, {
          parentHeight: this.state.rootViewHeight,
          style: toolbarKeyboardAvoidingViewStyle,
          withAnimatedHeight: true,
          children: [_reactNative.Platform.OS === 'ios' && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__unstableAutocompletionItemsSlot, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.FloatingToolbar, {})]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_header.default, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.BottomSheetSettings, {})]
        }), _reactNative.Platform.OS === 'android' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__unstableAutocompletionItemsSlot, {})]
      })
    });
  }
}
var _default = exports.default = (0, _compose.compose)([(0, _data.withSelect)(select => {
  const {
    __unstableIsEditorReady: isEditorReady,
    getEditorMode
  } = select(_editor.store);
  const {
    getSettings
  } = select(_blockEditor.store);
  const globalStyles = getSettings()?.__experimentalGlobalStylesBaseStyles?.color;
  return {
    isReady: isEditorReady(),
    mode: getEditorMode(),
    globalStyles
  };
}), _compose.withPreferredColorScheme])(Layout);
//# sourceMappingURL=index.native.js.map