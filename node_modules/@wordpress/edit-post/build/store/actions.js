"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__experimentalSetPreviewDeviceType = void 0;
exports.__unstableCreateTemplate = __unstableCreateTemplate;
exports.initializeMetaBoxes = exports.hideBlockTypes = exports.closePublishSidebar = exports.closeModal = exports.closeGeneralSidebar = void 0;
exports.metaBoxUpdatesFailure = metaBoxUpdatesFailure;
exports.metaBoxUpdatesSuccess = metaBoxUpdatesSuccess;
exports.requestMetaBoxUpdates = exports.removeEditorPanel = exports.openPublishSidebar = exports.openModal = exports.openGeneralSidebar = void 0;
exports.setAvailableMetaBoxesPerLocation = setAvailableMetaBoxesPerLocation;
exports.setIsEditingTemplate = setIsEditingTemplate;
exports.togglePublishSidebar = exports.togglePinnedPluginItem = exports.toggleFullscreenMode = exports.toggleFeature = exports.toggleEditorPanelOpened = exports.toggleEditorPanelEnabled = exports.toggleDistractionFree = exports.switchEditorMode = exports.showBlockTypes = exports.setIsListViewOpened = exports.setIsInserterOpened = void 0;
exports.updatePreferredStyleVariations = updatePreferredStyleVariations;
var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));
var _preferences = require("@wordpress/preferences");
var _editor = require("@wordpress/editor");
var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));
var _hooks = require("@wordpress/hooks");
var _coreData = require("@wordpress/core-data");
var _notices = require("@wordpress/notices");
var _i18n = require("@wordpress/i18n");
var _metaBoxes = require("../utils/meta-boxes");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  interfaceStore
} = (0, _lockUnlock.unlock)(_editor.privateApis);

/**
 * Returns an action object used in signalling that the user opened an editor sidebar.
 *
 * @param {?string} name Sidebar name to be opened.
 */
const openGeneralSidebar = name => ({
  registry
}) => {
  registry.dispatch(interfaceStore).enableComplementaryArea('core', name);
};

/**
 * Returns an action object signalling that the user closed the sidebar.
 */
exports.openGeneralSidebar = openGeneralSidebar;
const closeGeneralSidebar = () => ({
  registry
}) => registry.dispatch(interfaceStore).disableComplementaryArea('core');

/**
 * Returns an action object used in signalling that the user opened a modal.
 *
 * @deprecated since WP 6.3 use `core/interface` store's action with the same name instead.
 *
 *
 * @param {string} name A string that uniquely identifies the modal.
 *
 * @return {Object} Action object.
 */
exports.closeGeneralSidebar = closeGeneralSidebar;
const openModal = name => ({
  registry
}) => {
  (0, _deprecated.default)("select( 'core/edit-post' ).openModal( name )", {
    since: '6.3',
    alternative: "select( 'core/interface').openModal( name )"
  });
  return registry.dispatch(interfaceStore).openModal(name);
};

/**
 * Returns an action object signalling that the user closed a modal.
 *
 * @deprecated since WP 6.3 use `core/interface` store's action with the same name instead.
 *
 * @return {Object} Action object.
 */
exports.openModal = openModal;
const closeModal = () => ({
  registry
}) => {
  (0, _deprecated.default)("select( 'core/edit-post' ).closeModal()", {
    since: '6.3',
    alternative: "select( 'core/interface').closeModal()"
  });
  return registry.dispatch(interfaceStore).closeModal();
};

/**
 * Returns an action object used in signalling that the user opened the publish
 * sidebar.
 * @deprecated
 *
 * @return {Object} Action object
 */
exports.closeModal = closeModal;
const openPublishSidebar = () => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).openPublishSidebar", {
    since: '6.6',
    alternative: "dispatch( 'core/editor').openPublishSidebar"
  });
  registry.dispatch(_editor.store).openPublishSidebar();
};

/**
 * Returns an action object used in signalling that the user closed the
 * publish sidebar.
 * @deprecated
 *
 * @return {Object} Action object.
 */
exports.openPublishSidebar = openPublishSidebar;
const closePublishSidebar = () => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).closePublishSidebar", {
    since: '6.6',
    alternative: "dispatch( 'core/editor').closePublishSidebar"
  });
  registry.dispatch(_editor.store).closePublishSidebar();
};

/**
 * Returns an action object used in signalling that the user toggles the publish sidebar.
 * @deprecated
 *
 * @return {Object} Action object
 */
exports.closePublishSidebar = closePublishSidebar;
const togglePublishSidebar = () => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).togglePublishSidebar", {
    since: '6.6',
    alternative: "dispatch( 'core/editor').togglePublishSidebar"
  });
  registry.dispatch(_editor.store).togglePublishSidebar();
};

/**
 * Returns an action object used to enable or disable a panel in the editor.
 *
 * @deprecated
 *
 * @param {string} panelName A string that identifies the panel to enable or disable.
 *
 * @return {Object} Action object.
 */
exports.togglePublishSidebar = togglePublishSidebar;
const toggleEditorPanelEnabled = panelName => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).toggleEditorPanelEnabled", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').toggleEditorPanelEnabled"
  });
  registry.dispatch(_editor.store).toggleEditorPanelEnabled(panelName);
};

/**
 * Opens a closed panel and closes an open panel.
 *
 * @deprecated
 *
 * @param {string} panelName A string that identifies the panel to open or close.
 */
exports.toggleEditorPanelEnabled = toggleEditorPanelEnabled;
const toggleEditorPanelOpened = panelName => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).toggleEditorPanelOpened", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').toggleEditorPanelOpened"
  });
  registry.dispatch(_editor.store).toggleEditorPanelOpened(panelName);
};

/**
 * Returns an action object used to remove a panel from the editor.
 *
 * @deprecated
 *
 * @param {string} panelName A string that identifies the panel to remove.
 *
 * @return {Object} Action object.
 */
exports.toggleEditorPanelOpened = toggleEditorPanelOpened;
const removeEditorPanel = panelName => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).removeEditorPanel", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').removeEditorPanel"
  });
  registry.dispatch(_editor.store).removeEditorPanel(panelName);
};

/**
 * Triggers an action used to toggle a feature flag.
 *
 * @param {string} feature Feature name.
 */
exports.removeEditorPanel = removeEditorPanel;
const toggleFeature = feature => ({
  registry
}) => registry.dispatch(_preferences.store).toggle('core/edit-post', feature);

/**
 * Triggers an action used to switch editor mode.
 *
 * @deprecated
 *
 * @param {string} mode The editor mode.
 */
exports.toggleFeature = toggleFeature;
const switchEditorMode = mode => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).switchEditorMode", {
    since: '6.6',
    alternative: "dispatch( 'core/editor').switchEditorMode"
  });
  registry.dispatch(_editor.store).switchEditorMode(mode);
};

/**
 * Triggers an action object used to toggle a plugin name flag.
 *
 * @param {string} pluginName Plugin name.
 */
exports.switchEditorMode = switchEditorMode;
const togglePinnedPluginItem = pluginName => ({
  registry
}) => {
  const isPinned = registry.select(interfaceStore).isItemPinned('core', pluginName);
  registry.dispatch(interfaceStore)[isPinned ? 'unpinItem' : 'pinItem']('core', pluginName);
};

/**
 * Returns an action object used in signaling that a style should be auto-applied when a block is created.
 *
 * @deprecated
 */
exports.togglePinnedPluginItem = togglePinnedPluginItem;
function updatePreferredStyleVariations() {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).updatePreferredStyleVariations", {
    since: '6.6',
    hint: 'Preferred Style Variations are not supported anymore.'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Update the provided block types to be visible.
 *
 * @param {string[]} blockNames Names of block types to show.
 */
const showBlockTypes = blockNames => ({
  registry
}) => {
  (0, _lockUnlock.unlock)(registry.dispatch(_editor.store)).showBlockTypes(blockNames);
};

/**
 * Update the provided block types to be hidden.
 *
 * @param {string[]} blockNames Names of block types to hide.
 */
exports.showBlockTypes = showBlockTypes;
const hideBlockTypes = blockNames => ({
  registry
}) => {
  (0, _lockUnlock.unlock)(registry.dispatch(_editor.store)).hideBlockTypes(blockNames);
};

/**
 * Stores info about which Meta boxes are available in which location.
 *
 * @param {Object} metaBoxesPerLocation Meta boxes per location.
 */
exports.hideBlockTypes = hideBlockTypes;
function setAvailableMetaBoxesPerLocation(metaBoxesPerLocation) {
  return {
    type: 'SET_META_BOXES_PER_LOCATIONS',
    metaBoxesPerLocation
  };
}

/**
 * Update a metabox.
 */
const requestMetaBoxUpdates = () => async ({
  registry,
  select,
  dispatch
}) => {
  dispatch({
    type: 'REQUEST_META_BOX_UPDATES'
  });

  // Saves the wp_editor fields.
  if (window.tinyMCE) {
    window.tinyMCE.triggerSave();
  }

  // We gather the base form data.
  const baseFormData = new window.FormData(document.querySelector('.metabox-base-form'));
  const postId = baseFormData.get('post_ID');
  const postType = baseFormData.get('post_type');

  // Additional data needed for backward compatibility.
  // If we do not provide this data, the post will be overridden with the default values.
  // We cannot rely on getCurrentPost because right now on the editor we may be editing a pattern or a template.
  // We need to retrieve the post that the base form data is referring to.
  const post = registry.select(_coreData.store).getEditedEntityRecord('postType', postType, postId);
  const additionalData = [post.comment_status ? ['comment_status', post.comment_status] : false, post.ping_status ? ['ping_status', post.ping_status] : false, post.sticky ? ['sticky', post.sticky] : false, post.author ? ['post_author', post.author] : false].filter(Boolean);

  // We gather all the metaboxes locations.
  const activeMetaBoxLocations = select.getActiveMetaBoxLocations();
  const formDataToMerge = [baseFormData, ...activeMetaBoxLocations.map(location => new window.FormData((0, _metaBoxes.getMetaBoxContainer)(location)))];

  // Merge all form data objects into a single one.
  const formData = formDataToMerge.reduce((memo, currentFormData) => {
    for (const [key, value] of currentFormData) {
      memo.append(key, value);
    }
    return memo;
  }, new window.FormData());
  additionalData.forEach(([key, value]) => formData.append(key, value));
  try {
    // Save the metaboxes.
    await (0, _apiFetch.default)({
      url: window._wpMetaBoxUrl,
      method: 'POST',
      body: formData,
      parse: false
    });
    dispatch.metaBoxUpdatesSuccess();
  } catch {
    dispatch.metaBoxUpdatesFailure();
  }
};

/**
 * Returns an action object used to signal a successful meta box update.
 *
 * @return {Object} Action object.
 */
exports.requestMetaBoxUpdates = requestMetaBoxUpdates;
function metaBoxUpdatesSuccess() {
  return {
    type: 'META_BOX_UPDATES_SUCCESS'
  };
}

/**
 * Returns an action object used to signal a failed meta box update.
 *
 * @return {Object} Action object.
 */
function metaBoxUpdatesFailure() {
  return {
    type: 'META_BOX_UPDATES_FAILURE'
  };
}

/**
 * Action that changes the width of the editing canvas.
 *
 * @deprecated
 *
 * @param {string} deviceType
 */
const __experimentalSetPreviewDeviceType = deviceType => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).__experimentalSetPreviewDeviceType", {
    since: '6.5',
    version: '6.7',
    hint: 'registry.dispatch( editorStore ).setDeviceType'
  });
  registry.dispatch(_editor.store).setDeviceType(deviceType);
};

/**
 * Returns an action object used to open/close the inserter.
 *
 * @deprecated
 *
 * @param {boolean|Object} value Whether the inserter should be opened (true) or closed (false).
 */
exports.__experimentalSetPreviewDeviceType = __experimentalSetPreviewDeviceType;
const setIsInserterOpened = value => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).setIsInserterOpened", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').setIsInserterOpened"
  });
  registry.dispatch(_editor.store).setIsInserterOpened(value);
};

/**
 * Returns an action object used to open/close the list view.
 *
 * @deprecated
 *
 * @param {boolean} isOpen A boolean representing whether the list view should be opened or closed.
 */
exports.setIsInserterOpened = setIsInserterOpened;
const setIsListViewOpened = isOpen => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).setIsListViewOpened", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').setIsListViewOpened"
  });
  registry.dispatch(_editor.store).setIsListViewOpened(isOpen);
};

/**
 * Returns an action object used to switch to template editing.
 *
 * @deprecated
 */
exports.setIsListViewOpened = setIsListViewOpened;
function setIsEditingTemplate() {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).setIsEditingTemplate", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').setRenderingMode"
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Create a block based template.
 *
 * @deprecated
 */
function __unstableCreateTemplate() {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).__unstableCreateTemplate", {
    since: '6.5'
  });
  return {
    type: 'NOTHING'
  };
}
let metaBoxesInitialized = false;

/**
 * Initializes WordPress `postboxes` script and the logic for saving meta boxes.
 */
const initializeMetaBoxes = () => ({
  registry,
  select,
  dispatch
}) => {
  const isEditorReady = registry.select(_editor.store).__unstableIsEditorReady();
  if (!isEditorReady) {
    return;
  }
  // Only initialize once.
  if (metaBoxesInitialized) {
    return;
  }
  const postType = registry.select(_editor.store).getCurrentPostType();
  if (window.postboxes.page !== postType) {
    window.postboxes.add_postbox_toggles(postType);
  }
  metaBoxesInitialized = true;

  // Save metaboxes on save completion, except for autosaves.
  (0, _hooks.addAction)('editor.savePost', 'core/edit-post/save-metaboxes', async (post, options) => {
    if (!options.isAutosave && select.hasMetaBoxes()) {
      await dispatch.requestMetaBoxUpdates();
    }
  });
  dispatch({
    type: 'META_BOXES_INITIALIZED'
  });
};

/**
 * Action that toggles Distraction free mode.
 * Distraction free mode expects there are no sidebars, as due to the
 * z-index values set, you can't close sidebars.
 *
 * @deprecated
 */
exports.initializeMetaBoxes = initializeMetaBoxes;
const toggleDistractionFree = () => ({
  registry
}) => {
  (0, _deprecated.default)("dispatch( 'core/edit-post' ).toggleDistractionFree", {
    since: '6.6',
    alternative: "dispatch( 'core/editor').toggleDistractionFree"
  });
  registry.dispatch(_editor.store).toggleDistractionFree();
};

/**
 * Action that toggles the Fullscreen Mode view option.
 */
exports.toggleDistractionFree = toggleDistractionFree;
const toggleFullscreenMode = () => ({
  registry
}) => {
  const isFullscreen = registry.select(_preferences.store).get('core/edit-post', 'fullscreenMode');
  registry.dispatch(_preferences.store).toggle('core/edit-post', 'fullscreenMode');
  registry.dispatch(_notices.store).createInfoNotice(isFullscreen ? (0, _i18n.__)('Fullscreen mode deactivated.') : (0, _i18n.__)('Fullscreen mode activated.'), {
    id: 'core/edit-post/toggle-fullscreen-mode/notice',
    type: 'snackbar',
    actions: [{
      label: (0, _i18n.__)('Undo'),
      onClick: () => {
        registry.dispatch(_preferences.store).toggle('core/edit-post', 'fullscreenMode');
      }
    }]
  });
};
exports.toggleFullscreenMode = toggleFullscreenMode;
//# sourceMappingURL=actions.js.map