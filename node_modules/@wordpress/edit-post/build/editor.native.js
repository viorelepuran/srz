"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _memize = _interopRequireDefault(require("memize"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _element = require("@wordpress/element");
var _editor = require("@wordpress/editor");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _reactNativeBridge = require("@wordpress/react-native-bridge");
var _components = require("@wordpress/components");
var _coreData = require("@wordpress/core-data");
var _layout = _interopRequireDefault(require("./components/layout"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

class Editor extends _element.Component {
  constructor(props) {
    super(...arguments);
    if (props.initialHtmlModeEnabled && props.mode === 'visual') {
      // Enable html mode if the initial mode the parent wants it but we're not already in it.
      this.props.switchEditorMode('text');
    }
    this.getEditorSettings = (0, _memize.default)(this.getEditorSettings, {
      maxSize: 1
    });
    this.setTitleRef = this.setTitleRef.bind(this);
  }
  getEditorSettings(settings) {
    settings = {
      ...settings,
      isRTL: _reactNative.I18nManager.isRTL
    };
    return settings;
  }
  componentDidMount() {
    const {
      editEntityRecord,
      postType,
      postId
    } = this.props;
    this.subscriptionParentSetFocusOnTitle = (0, _reactNativeBridge.subscribeSetFocusOnTitle)(() => {
      if (this.postTitleRef) {
        this.postTitleRef.focus();
      } else {
        // If the post title ref is not available, we postpone setting focus to when it's available.
        this.focusTitleWhenAvailable = true;
      }
    });
    this.subscriptionParentFeaturedImageIdNativeUpdated = (0, _reactNativeBridge.subscribeFeaturedImageIdNativeUpdated)(payload => {
      editEntityRecord('postType', postType, postId, {
        featured_media: payload.featuredImageId
      }, {
        undoIgnore: true
      });
    });
  }
  componentWillUnmount() {
    if (this.subscriptionParentSetFocusOnTitle) {
      this.subscriptionParentSetFocusOnTitle.remove();
    }
    if (this.subscribeFeaturedImageIdNativeUpdated) {
      this.subscribeFeaturedImageIdNativeUpdated.remove();
    }
  }
  setTitleRef(titleRef) {
    if (this.focusTitleWhenAvailable && !this.postTitleRef) {
      this.focusTitleWhenAvailable = false;
      titleRef.focus();
    }
    this.postTitleRef = titleRef;
  }
  render() {
    const {
      settings,
      initialEdits,
      post,
      postId,
      postType,
      featuredImageId,
      initialHtml,
      ...props
    } = this.props;
    const editorSettings = this.getEditorSettings(settings);
    const normalizedPost = post || {
      id: postId,
      title: {
        raw: props.initialTitle || ''
      },
      featured_media: featuredImageId,
      content: {
        // Make sure the post content is in sync with gutenberg store
        // to avoid marking the post as modified when simply loaded
        // For now, let's assume: serialize( parse( html ) ) !== html.
        raw: (0, _blocks.serialize)((0, _blocks.parse)(initialHtml || ''))
      },
      type: postType,
      status: 'draft',
      meta: []
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureHandlerRootView, {
      style: {
        flex: 1
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.SlotFillProvider, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_editor.EditorProvider, {
          settings: editorSettings,
          post: normalizedPost,
          initialEdits: initialEdits,
          useSubRegistry: false,
          ...props,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_editor.ErrorBoundary, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_layout.default, {
              setTitleRef: this.setTitleRef
            })
          })
        })
      })
    });
  }
}
var _default = exports.default = (0, _compose.compose)([(0, _data.withSelect)(select => {
  const {
    getEditorMode
  } = select(_editor.store);
  return {
    mode: getEditorMode()
  };
}), (0, _data.withDispatch)(dispatch => {
  const {
    switchEditorMode
  } = dispatch(_editor.store);
  const {
    editEntityRecord
  } = dispatch(_coreData.store);
  return {
    switchEditorMode,
    editEntityRecord
  };
})])(Editor);
//# sourceMappingURL=editor.native.js.map