{"version":3,"names":["__","Flex","FlexBlock","__experimentalNumberControl","NumberControl","useSelect","useDispatch","useState","PostTypeSupportCheck","store","editorStore","jsx","_jsx","PageAttributesOrder","order","select","_select$getEditedPost","getEditedPostAttribute","editPost","orderInput","setOrderInput","setUpdatedOrder","value","newOrder","Number","isInteger","trim","menu_order","children","__next40pxDefaultSize","label","help","onChange","hideLabelFromVision","onBlur","PageAttributesOrderWithChecks","supportKeys"],"sources":["@wordpress/editor/src/components/page-attributes/order.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n\tFlex,\n\tFlexBlock,\n\t__experimentalNumberControl as NumberControl,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport PostTypeSupportCheck from '../post-type-support-check';\nimport { store as editorStore } from '../../store';\n\nfunction PageAttributesOrder() {\n\tconst order = useSelect(\n\t\t( select ) =>\n\t\t\tselect( editorStore ).getEditedPostAttribute( 'menu_order' ) ?? 0,\n\t\t[]\n\t);\n\tconst { editPost } = useDispatch( editorStore );\n\tconst [ orderInput, setOrderInput ] = useState( null );\n\n\tconst setUpdatedOrder = ( value ) => {\n\t\tsetOrderInput( value );\n\t\tconst newOrder = Number( value );\n\t\tif ( Number.isInteger( newOrder ) && value.trim?.() !== '' ) {\n\t\t\teditPost( { menu_order: newOrder } );\n\t\t}\n\t};\n\n\tconst value = orderInput ?? order;\n\n\treturn (\n\t\t<Flex>\n\t\t\t<FlexBlock>\n\t\t\t\t<NumberControl\n\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\tlabel={ __( 'Order' ) }\n\t\t\t\t\thelp={ __( 'Set the page order.' ) }\n\t\t\t\t\tvalue={ value }\n\t\t\t\t\tonChange={ setUpdatedOrder }\n\t\t\t\t\thideLabelFromVision\n\t\t\t\t\tonBlur={ () => {\n\t\t\t\t\t\tsetOrderInput( null );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</FlexBlock>\n\t\t</Flex>\n\t);\n}\n\n/**\n * Renders the Page Attributes Order component. A number input in an editor interface\n * for setting the order of a given page.\n * The component is now not used in core but was kept for backward compatibility.\n *\n * @return {React.ReactNode} The rendered component.\n */\nexport default function PageAttributesOrderWithChecks() {\n\treturn (\n\t\t<PostTypeSupportCheck supportKeys=\"page-attributes\">\n\t\t\t<PageAttributesOrder />\n\t\t</PostTypeSupportCheck>\n\t);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,EAAE,QAAQ,iBAAiB;AACpC,SACCC,IAAI,EACJC,SAAS,EACTC,2BAA2B,IAAIC,aAAa,QACtC,uBAAuB;AAC9B,SAASC,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AACxD,SAASC,QAAQ,QAAQ,oBAAoB;;AAE7C;AACA;AACA;AACA,OAAOC,oBAAoB,MAAM,4BAA4B;AAC7D,SAASC,KAAK,IAAIC,WAAW,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEnD,SAASC,mBAAmBA,CAAA,EAAG;EAC9B,MAAMC,KAAK,GAAGT,SAAS,CACpBU,MAAM;IAAA,IAAAC,qBAAA;IAAA,QAAAA,qBAAA,GACPD,MAAM,CAAEL,WAAY,CAAC,CAACO,sBAAsB,CAAE,YAAa,CAAC,cAAAD,qBAAA,cAAAA,qBAAA,GAAI,CAAC;EAAA,GAClE,EACD,CAAC;EACD,MAAM;IAAEE;EAAS,CAAC,GAAGZ,WAAW,CAAEI,WAAY,CAAC;EAC/C,MAAM,CAAES,UAAU,EAAEC,aAAa,CAAE,GAAGb,QAAQ,CAAE,IAAK,CAAC;EAEtD,MAAMc,eAAe,GAAKC,KAAK,IAAM;IACpCF,aAAa,CAAEE,KAAM,CAAC;IACtB,MAAMC,QAAQ,GAAGC,MAAM,CAAEF,KAAM,CAAC;IAChC,IAAKE,MAAM,CAACC,SAAS,CAAEF,QAAS,CAAC,IAAID,KAAK,CAACI,IAAI,GAAG,CAAC,KAAK,EAAE,EAAG;MAC5DR,QAAQ,CAAE;QAAES,UAAU,EAAEJ;MAAS,CAAE,CAAC;IACrC;EACD,CAAC;EAED,MAAMD,KAAK,GAAGH,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIL,KAAK;EAEjC,oBACCF,IAAA,CAACX,IAAI;IAAA2B,QAAA,eACJhB,IAAA,CAACV,SAAS;MAAA0B,QAAA,eACThB,IAAA,CAACR,aAAa;QACbyB,qBAAqB;QACrBC,KAAK,EAAG9B,EAAE,CAAE,OAAQ,CAAG;QACvB+B,IAAI,EAAG/B,EAAE,CAAE,qBAAsB,CAAG;QACpCsB,KAAK,EAAGA,KAAO;QACfU,QAAQ,EAAGX,eAAiB;QAC5BY,mBAAmB;QACnBC,MAAM,EAAGA,CAAA,KAAM;UACdd,aAAa,CAAE,IAAK,CAAC;QACtB;MAAG,CACH;IAAC,CACQ;EAAC,CACP,CAAC;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASe,6BAA6BA,CAAA,EAAG;EACvD,oBACCvB,IAAA,CAACJ,oBAAoB;IAAC4B,WAAW,EAAC,iBAAiB;IAAAR,QAAA,eAClDhB,IAAA,CAACC,mBAAmB,IAAE;EAAC,CACF,CAAC;AAEzB","ignoreList":[]}