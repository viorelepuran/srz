{"version":3,"names":["__","getNotificationArgumentsForSaveSuccess","data","_postType$viewable","previousPost","post","postType","options","isAutosave","publishStatus","isPublished","includes","status","willPublish","willTrash","noticeMessage","shouldShowLink","viewable","isDraft","labels","item_trashed","item_reverted_to_draft","publish","item_published","private","item_published_privately","future","item_scheduled","item_updated","actions","push","label","view_item","url","link","id","type","getNotificationArgumentsForSaveFail","edits","error","code","indexOf","messages","message","test","join","getNotificationArgumentsForTrashFail"],"sources":["@wordpress/editor/src/store/utils/notice-builder.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Builds the arguments for a success notification dispatch.\n *\n * @param {Object} data Incoming data to build the arguments from.\n *\n * @return {Array} Arguments for dispatch. An empty array signals no\n *                 notification should be sent.\n */\nexport function getNotificationArgumentsForSaveSuccess( data ) {\n\tconst { previousPost, post, postType } = data;\n\t// Autosaves are neither shown a notice nor redirected.\n\tif ( data.options?.isAutosave ) {\n\t\treturn [];\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = publishStatus.includes( previousPost.status );\n\tconst willPublish = publishStatus.includes( post.status );\n\tconst willTrash =\n\t\tpost.status === 'trash' && previousPost.status !== 'trash';\n\n\tlet noticeMessage;\n\tlet shouldShowLink = postType?.viewable ?? false;\n\tlet isDraft;\n\n\t// Always should a notice, which will be spoken for accessibility.\n\tif ( willTrash ) {\n\t\tnoticeMessage = postType.labels.item_trashed;\n\t\tshouldShowLink = false;\n\t} else if ( ! isPublished && ! willPublish ) {\n\t\t// If saving a non-published post, don't show notice.\n\t\tnoticeMessage = __( 'Draft saved.' );\n\t\tisDraft = true;\n\t} else if ( isPublished && ! willPublish ) {\n\t\t// If undoing publish status, show specific notice.\n\t\tnoticeMessage = postType.labels.item_reverted_to_draft;\n\t\tshouldShowLink = false;\n\t} else if ( ! isPublished && willPublish ) {\n\t\t// If publishing or scheduling a post, show the corresponding\n\t\t// publish message.\n\t\tnoticeMessage = {\n\t\t\tpublish: postType.labels.item_published,\n\t\t\tprivate: postType.labels.item_published_privately,\n\t\t\tfuture: postType.labels.item_scheduled,\n\t\t}[ post.status ];\n\t} else {\n\t\t// Generic fallback notice.\n\t\tnoticeMessage = postType.labels.item_updated;\n\t}\n\n\tconst actions = [];\n\tif ( shouldShowLink ) {\n\t\tactions.push( {\n\t\t\tlabel: isDraft ? __( 'View Preview' ) : postType.labels.view_item,\n\t\t\turl: post.link,\n\t\t} );\n\t}\n\treturn [\n\t\tnoticeMessage,\n\t\t{\n\t\t\tid: 'editor-save',\n\t\t\ttype: 'snackbar',\n\t\t\tactions,\n\t\t},\n\t];\n}\n\n/**\n * Builds the fail notification arguments for dispatch.\n *\n * @param {Object} data Incoming data to build the arguments with.\n *\n * @return {Array} Arguments for dispatch. An empty array signals no\n *                 notification should be sent.\n */\nexport function getNotificationArgumentsForSaveFail( data ) {\n\tconst { post, edits, error } = data;\n\tif ( error && 'rest_autosave_no_changes' === error.code ) {\n\t\t// Autosave requested a new autosave, but there were no changes. This shouldn't\n\t\t// result in an error notice for the user.\n\t\treturn [];\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = publishStatus.indexOf( post.status ) !== -1;\n\t// If the post was being published, we show the corresponding publish error message\n\t// Unless we publish an \"updating failed\" message.\n\tconst messages = {\n\t\tpublish: __( 'Publishing failed.' ),\n\t\tprivate: __( 'Publishing failed.' ),\n\t\tfuture: __( 'Scheduling failed.' ),\n\t};\n\tlet noticeMessage =\n\t\t! isPublished && publishStatus.indexOf( edits.status ) !== -1\n\t\t\t? messages[ edits.status ]\n\t\t\t: __( 'Updating failed.' );\n\n\t// Check if message string contains HTML. Notice text is currently only\n\t// supported as plaintext, and stripping the tags may muddle the meaning.\n\tif ( error.message && ! /<\\/?[^>]*>/.test( error.message ) ) {\n\t\tnoticeMessage = [ noticeMessage, error.message ].join( ' ' );\n\t}\n\treturn [\n\t\tnoticeMessage,\n\t\t{\n\t\t\tid: 'editor-save',\n\t\t},\n\t];\n}\n\n/**\n * Builds the trash fail notification arguments for dispatch.\n *\n * @param {Object} data\n *\n * @return {Array} Arguments for dispatch.\n */\nexport function getNotificationArgumentsForTrashFail( data ) {\n\treturn [\n\t\tdata.error.message && data.error.code !== 'unknown_error'\n\t\t\t? data.error.message\n\t\t\t: __( 'Trashing failed' ),\n\t\t{\n\t\t\tid: 'editor-trash-fail',\n\t\t},\n\t];\n}\n"],"mappings":"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","ignoreList":[]}