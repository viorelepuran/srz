"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostURLPanel;
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _url = require("@wordpress/url");
var _coreData = require("@wordpress/core-data");
var _check = _interopRequireDefault(require("./check"));
var _index = _interopRequireDefault(require("./index"));
var _postPanelRow = _interopRequireDefault(require("../post-panel-row"));
var _store = require("../../store");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Renders the `PostURLPanel` component.
 *
 * @return {React.ReactNode} The rendered PostURLPanel component.
 */function PostURLPanel() {
  const {
    isFrontPage
  } = (0, _data.useSelect)(select => {
    const {
      getCurrentPostId
    } = select(_store.store);
    const {
      getEditedEntityRecord,
      canUser
    } = select(_coreData.store);
    const siteSettings = canUser('read', {
      kind: 'root',
      name: 'site'
    }) ? getEditedEntityRecord('root', 'site') : undefined;
    const _id = getCurrentPostId();
    return {
      isFrontPage: siteSettings?.page_on_front === _id
    };
  }, []);
  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = (0, _element.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    placement: 'left-start',
    offset: 36,
    shift: true
  }), [popoverAnchor]);
  const label = isFrontPage ? (0, _i18n.__)('Link') : (0, _i18n.__)('Slug');
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_check.default, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_postPanelRow.default, {
      label: label,
      ref: setPopoverAnchor,
      children: [!isFrontPage && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Dropdown, {
        popoverProps: popoverProps,
        className: "editor-post-url__panel-dropdown",
        contentClassName: "editor-post-url__panel-dialog",
        focusOnMount: true,
        renderToggle: ({
          isOpen,
          onToggle
        }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(PostURLToggle, {
          isOpen: isOpen,
          onClick: onToggle
        }),
        renderContent: ({
          onClose
        }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_index.default, {
          onClose: onClose
        })
      }), isFrontPage && /*#__PURE__*/(0, _jsxRuntime.jsx)(FrontPageLink, {})]
    })
  });
}
function PostURLToggle({
  isOpen,
  onClick
}) {
  const {
    slug
  } = (0, _data.useSelect)(select => {
    return {
      slug: select(_store.store).getEditedPostSlug()
    };
  }, []);
  const decodedSlug = (0, _url.safeDecodeURIComponent)(slug);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
    size: "compact",
    className: "editor-post-url__panel-toggle",
    variant: "tertiary",
    "aria-expanded": isOpen,
    "aria-label":
    // translators: %s: Current post link.
    (0, _i18n.sprintf)((0, _i18n.__)('Change link: %s'), decodedSlug),
    onClick: onClick,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
      children: decodedSlug
    })
  });
}
function FrontPageLink() {
  const {
    postLink
  } = (0, _data.useSelect)(select => {
    const {
      getCurrentPost
    } = select(_store.store);
    return {
      postLink: getCurrentPost()?.link
    };
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ExternalLink, {
    className: "editor-post-url__front-page-link",
    href: postLink,
    target: "_blank",
    children: postLink
  });
}
//# sourceMappingURL=panel.js.map