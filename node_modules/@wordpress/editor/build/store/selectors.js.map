{"version":3,"names":["_blocks","require","_date","_url","_data","_deprecated","_interopRequireDefault","_element","_blockEditor","_coreData","_preferences","_constants","_reducer","_getTemplatePartIcon","_lockUnlock","_getTemplateInfo","EMPTY_OBJECT","hasEditorUndo","exports","createRegistrySelector","select","coreStore","hasUndo","hasEditorRedo","hasRedo","isEditedPostNew","state","getCurrentPost","status","hasChangedContent","edits","getPostEdits","isEditedPostDirty","postType","getCurrentPostType","postId","getCurrentPostId","hasEditsForEntityRecord","hasNonPostEntityChanges","dirtyEntityRecords","__experimentalGetDirtyEntityRecords","type","id","some","entityRecord","kind","name","key","isCleanNewPost","post","getRawEntityRecord","getCurrentTemplateId","templateId","getCurrentPostRevisionsCount","_getCurrentPost$_link","_links","count","getCurrentPostLastRevisionId","_getCurrentPost$_link2","getEntityRecordEdits","getCurrentPostAttribute","attributeName","hasOwnProperty","getPostRawValue","getNestedEditedPostProperty","createSelector","getEditedPostAttribute","getEditedPostContent","EDIT_MERGE_PROPERTIES","has","getAutosaveAttribute","AUTOSAVE_PROPERTIES","includes","currentUserId","getCurrentUser","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","currentPost","indexOf","isInTheFuture","Date","Number","getDate","date","ONE_MINUTE_IN_MS","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","Platform","OS","record","getEditedEntityRecord","content","blocks","length","blockName","getDefaultBlockName","getFreeformContentHandlerName","isEditedPostAutosaveable","isPostAutosavingLocked","hasFetchedAutosave","hasFetchedAutosaves","field","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","isDeletingPost","deleting","pending","saving","isSavingNonPostEntityChanges","entitiesBeingSaved","__experimentalGetEntitiesBeingSaved","didPostSaveRequestSucceed","getLastEntitySaveError","didPostSaveRequestFail","isAutosavingPost","Boolean","options","isAutosave","isPreviewingPost","isPreview","getEditedPostPreviewLink","previewLink","addQueryArgs","preview","featuredImageId","_thumbnail_id","getSuggestedPostFormat","blockEditorStore","getBlocks","provider","attributes","providerNameSlug","__unstableSerializeAndClean","isPublishingPost","isPermalinkEditable","permalinkTemplate","PERMALINK_POSTNAME_REGEX","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","getEditedPostSlug","cleanForSlug","split","isPostLocked","postLock","isLocked","isPostSavingLocked","Object","keys","postSavingLock","postAutosavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","preferencesStore","get","getEditorBlocks","parse","isEditorPanelRemoved","panelName","removedPanels","isEditorPanelEnabled","inactivePanels","isEditorPanelOpened","openPanels","getEditorSelectionStart","deprecated","since","alternative","selectionStart","getEditorSelectionEnd","selectionEnd","getEditorSelection","__unstableIsEditorReady","getEditorSettings","editorSettings","getRenderingMode","renderingMode","getDeviceType","isZoomOut","unlock","deviceType","isListViewOpened","listViewPanel","isInserterOpened","blockInserterPanel","getEditorMode","_select$get","getStateBeforeOptimisticTransaction","hint","inSomeHistory","getBlockEditorSelector","args","version","getBlockName","isBlockValid","getBlockAttributes","getBlock","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings","__experimentalGetDefaultTemplateTypes","getCurrentTheme","default_template_types","__experimentalGetDefaultTemplatePartAreas","areas","default_template_part_areas","map","item","icon","getTemplatePartIcon","__experimentalGetDefaultTemplateType","slug","_Object$values$find","templateTypes","values","find","__experimentalGetTemplateInfo","template","currentTheme","templateAreas","getTemplateInfo","getPostTypeLabel","currentPostType","getPostType","labels","singular_name","isPublishSidebarOpened","publishSidebarActive"],"sources":["@wordpress/editor/src/store/selectors.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetDefaultBlockName,\n\t__unstableSerializeAndClean,\n\tparse,\n} from '@wordpress/blocks';\nimport { isInTheFuture, getDate } from '@wordpress/date';\nimport { addQueryArgs, cleanForSlug } from '@wordpress/url';\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { Platform } from '@wordpress/element';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\n/**\n * Internal dependencies\n */\nimport {\n\tEDIT_MERGE_PROPERTIES,\n\tPERMALINK_POSTNAME_REGEX,\n\tONE_MINUTE_IN_MS,\n\tAUTOSAVE_PROPERTIES,\n} from './constants';\nimport { getPostRawValue } from './reducer';\nimport { getTemplatePartIcon } from '../utils/get-template-part-icon';\nimport { unlock } from '../lock-unlock';\nimport { getTemplateInfo } from '../utils/get-template-info';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if any past editor history snapshots exist, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether undo history exists.\n */\nexport const hasEditorUndo = createRegistrySelector( ( select ) => () => {\n\treturn select( coreStore ).hasUndo();\n} );\n\n/**\n * Returns true if any future editor history snapshots exist, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether redo history exists.\n */\nexport const hasEditorRedo = createRegistrySelector( ( select ) => () => {\n\treturn select( coreStore ).hasRedo();\n} );\n\n/**\n * Returns true if the currently edited post is yet to be saved, or false if\n * the post has been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is new.\n */\nexport function isEditedPostNew( state ) {\n\treturn getCurrentPost( state ).status === 'auto-draft';\n}\n\n/**\n * Returns true if content includes unsaved changes, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether content includes unsaved changes.\n */\nexport function hasChangedContent( state ) {\n\tconst edits = getPostEdits( state );\n\treturn 'content' in edits;\n}\n\n/**\n * Returns true if there are unsaved values for the current edit session, or\n * false if the editing state matches the saved or new post.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether unsaved values exist.\n */\nexport const isEditedPostDirty = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// Edits should contain only fields which differ from the saved post (reset\n\t\t// at initial load and save complete). Thus, a non-empty edits state can be\n\t\t// inferred to contain unsaved values.\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn select( coreStore ).hasEditsForEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if there are unsaved edits for entities other than\n * the editor's post, and false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there are edits or not.\n */\nexport const hasNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst dirtyEntityRecords =\n\t\t\tselect( coreStore ).__experimentalGetDirtyEntityRecords();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn dirtyEntityRecords.some(\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if there are no unsaved values for the current edit session and\n * if the currently edited post is new (has never been saved before).\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether new post and unsaved values exist.\n */\nexport function isCleanNewPost( state ) {\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\n}\n\n/**\n * Returns the post currently being edited in its last known saved state, not\n * including unsaved edits. Returns an object containing relevant default post\n * values if the post has not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Post object.\n */\nexport const getCurrentPost = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\n\t\tconst post = select( coreStore ).getRawEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( post ) {\n\t\t\treturn post;\n\t\t}\n\n\t\t// This exists for compatibility with the previous selector behavior\n\t\t// which would guarantee an object return based on the editor reducer's\n\t\t// default empty object state.\n\t\treturn EMPTY_OBJECT;\n\t}\n);\n\n/**\n * Returns the post type of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @example\n *\n *```js\n * const currentPostType = wp.data.select( 'core/editor' ).getCurrentPostType();\n *```\n * @return {string} Post type.\n */\nexport function getCurrentPostType( state ) {\n\treturn state.postType;\n}\n\n/**\n * Returns the ID of the post currently being edited, or null if the post has\n * not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of current post.\n */\nexport function getCurrentPostId( state ) {\n\treturn state.postId;\n}\n\n/**\n * Returns the template ID currently being rendered/edited\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Template ID.\n */\nexport function getCurrentTemplateId( state ) {\n\treturn state.templateId;\n}\n\n/**\n * Returns the number of revisions of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of revisions.\n */\nexport function getCurrentPostRevisionsCount( state ) {\n\treturn (\n\t\tgetCurrentPost( state )._links?.[ 'version-history' ]?.[ 0 ]?.count ?? 0\n\t);\n}\n\n/**\n * Returns the last revision ID of the post currently being edited,\n * or null if the post has no revisions.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of the last revision.\n */\nexport function getCurrentPostLastRevisionId( state ) {\n\treturn (\n\t\tgetCurrentPost( state )._links?.[ 'predecessor-version' ]?.[ 0 ]?.id ??\n\t\tnull\n\t);\n}\n\n/**\n * Returns any post values which have been changed in the editor but not yet\n * been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object of key value pairs comprising unsaved edits.\n */\nexport const getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn (\n\t\tselect( coreStore ).getEntityRecordEdits(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t) || EMPTY_OBJECT\n\t);\n} );\n\n/**\n * Returns an attribute value of the saved post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getCurrentPostAttribute( state, attributeName ) {\n\tswitch ( attributeName ) {\n\t\tcase 'type':\n\t\t\treturn getCurrentPostType( state );\n\n\t\tcase 'id':\n\t\t\treturn getCurrentPostId( state );\n\n\t\tdefault:\n\t\t\tconst post = getCurrentPost( state );\n\t\t\tif ( ! post.hasOwnProperty( attributeName ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn getPostRawValue( post[ attributeName ] );\n\t}\n}\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but merging with the attribute value for the last known\n * saved state of the post (this is needed for some nested attributes like meta).\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nconst getNestedEditedPostProperty = createSelector(\n\t( state, attributeName ) => {\n\t\tconst edits = getPostEdits( state );\n\t\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\t\treturn getCurrentPostAttribute( state, attributeName );\n\t\t}\n\n\t\treturn {\n\t\t\t...getCurrentPostAttribute( state, attributeName ),\n\t\t\t...edits[ attributeName ],\n\t\t};\n\t},\n\t( state, attributeName ) => [\n\t\tgetCurrentPostAttribute( state, attributeName ),\n\t\tgetPostEdits( state )[ attributeName ],\n\t]\n);\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but falling back to the attribute for the last known\n * saved state of the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @example\n *\n *```js\n * \t// Get specific media size based on the featured media ID\n * \t// Note: change sizes?.large for any registered size\n * \tconst getFeaturedMediaUrl = useSelect( ( select ) => {\n * \t\tconst getFeaturedMediaId =\n * \t\t\tselect( 'core/editor' ).getEditedPostAttribute( 'featured_media' );\n * \t\tconst getMedia = select( 'core' ).getMedia( getFeaturedMediaId );\n *\n * \t\treturn (\n * \t\t\tgetMedia?.media_details?.sizes?.large?.source_url || getMedia?.source_url || ''\n * \t\t);\n * }, [] );\n *```\n *\n * @return {*} Post attribute value.\n */\nexport function getEditedPostAttribute( state, attributeName ) {\n\t// Special cases.\n\tswitch ( attributeName ) {\n\t\tcase 'content':\n\t\t\treturn getEditedPostContent( state );\n\t}\n\n\t// Fall back to saved post value if not edited.\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\t// Merge properties are objects which contain only the patch edit in state,\n\t// and thus must be merged with the current post attribute.\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\n\t\treturn getNestedEditedPostProperty( state, attributeName );\n\t}\n\n\treturn edits[ attributeName ];\n}\n\n/**\n * Returns an attribute value of the current autosave revision for a post, or\n * null if there is no autosave for the post.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n * \t\t\t   from the '@wordpress/core-data' package and access properties on the returned\n * \t\t\t   autosave object using getPostRawValue.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Autosave attribute name.\n *\n * @return {*} Autosave attribute value.\n */\nexport const getAutosaveAttribute = createRegistrySelector(\n\t( select ) => ( state, attributeName ) => {\n\t\tif (\n\t\t\t! AUTOSAVE_PROPERTIES.includes( attributeName ) &&\n\t\t\tattributeName !== 'preview_link'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\n\t\t// Currently template autosaving is not supported.\n\t\tif ( postType === 'wp_template' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst currentUserId = select( coreStore ).getCurrentUser()?.id;\n\t\tconst autosave = select( coreStore ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\tif ( autosave ) {\n\t\t\treturn getPostRawValue( autosave[ attributeName ] );\n\t\t}\n\t}\n);\n\n/**\n * Returns the current visibility of the post being edited, preferring the\n * unsaved value if different than the saved post. The return value is one of\n * \"private\", \"password\", or \"public\".\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post visibility.\n */\nexport function getEditedPostVisibility( state ) {\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'private' ) {\n\t\treturn 'private';\n\t}\n\n\tconst password = getEditedPostAttribute( state, 'password' );\n\tif ( password ) {\n\t\treturn 'password';\n\t}\n\n\treturn 'public';\n}\n\n/**\n * Returns true if post is pending review.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is pending review.\n */\nexport function isCurrentPostPending( state ) {\n\treturn getCurrentPost( state ).status === 'pending';\n}\n\n/**\n * Return true if the current post has already been published.\n *\n * @param {Object} state         Global application state.\n * @param {Object} [currentPost] Explicit current post for bypassing registry selector.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isCurrentPostPublished( state, currentPost ) {\n\tconst post = currentPost || getCurrentPost( state );\n\n\treturn (\n\t\t[ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\n\t\t( post.status === 'future' &&\n\t\t\t! isInTheFuture(\n\t\t\t\tnew Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS )\n\t\t\t) )\n\t);\n}\n\n/**\n * Returns true if post is already scheduled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is scheduled to be posted.\n */\nexport function isCurrentPostScheduled( state ) {\n\treturn (\n\t\tgetCurrentPost( state ).status === 'future' &&\n\t\t! isCurrentPostPublished( state )\n\t);\n}\n\n/**\n * Return true if the post being edited can be published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can been published.\n */\nexport function isEditedPostPublishable( state ) {\n\tconst post = getCurrentPost( state );\n\n\t// TODO: Post being publishable should be superset of condition of post\n\t// being saveable. Currently this restriction is imposed at UI.\n\t//\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`).\n\n\treturn (\n\t\tisEditedPostDirty( state ) ||\n\t\t[ 'publish', 'private', 'future' ].indexOf( post.status ) === -1\n\t);\n}\n\n/**\n * Returns true if the post can be saved, or false otherwise. A post must\n * contain a title, an excerpt, or non-empty content to be valid for save.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can be saved.\n */\nexport function isEditedPostSaveable( state ) {\n\tif ( isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\n\t// this time since posts where meta boxes are present can be saved even if\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\n\t// should be moved here.\n\t//\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184.\n\n\treturn (\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\n\t\t! isEditedPostEmpty( state ) ||\n\t\tPlatform.OS === 'native'\n\t);\n}\n\n/**\n * Returns true if the edited post has content. A post has content if it has at\n * least one saveable block or otherwise has a non-empty content property\n * assigned.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post has content.\n */\nexport const isEditedPostEmpty = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// While the condition of truthy content string is sufficient to determine\n\t\t// emptiness, testing saveable blocks length is a trivial operation. Since\n\t\t// this function can be called frequently, optimize for the fast case as a\n\t\t// condition of the mere existence of blocks. Note that the value of edited\n\t\t// content takes precedent over block content, and must fall through to the\n\t\t// default logic.\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst record = select( coreStore ).getEditedEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( typeof record.content !== 'function' ) {\n\t\t\treturn ! record.content;\n\t\t}\n\n\t\tconst blocks = getEditedPostAttribute( state, 'blocks' );\n\n\t\tif ( blocks.length === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\n\t\t// joined with newlines such that even if every individual block\n\t\t// produces an empty save result, the serialized content is non-empty.\n\t\tif ( blocks.length > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// There are two conditions under which the optimization cannot be\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\n\t\t//\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\n\t\t//    single unmodified default block.\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\n\t\t//    block in its serialization. The freeform block specifically may\n\t\t//    produce an empty string in its saved output.\n\t\t//\n\t\t// For all other content, the single block is assumed to make a post\n\t\t// non-empty, if only by virtue of its own comment delimiters.\n\t\tconst blockName = blocks[ 0 ].name;\n\t\tif (\n\t\t\tblockName !== getDefaultBlockName() &&\n\t\t\tblockName !== getFreeformContentHandlerName()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ! getEditedPostContent( state );\n\t}\n);\n\n/**\n * Returns true if the post can be autosaved, or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {Object} autosave A raw autosave object from the REST API.\n *\n * @return {boolean} Whether the post can be autosaved.\n */\nexport const isEditedPostAutosaveable = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\n\t\tif ( ! isEditedPostSaveable( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A post is not autosavable when there is a post autosave lock.\n\t\tif ( isPostAutosavingLocked( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\n\t\t// Currently template autosaving is not supported.\n\t\tif ( postType === 'wp_template' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst hasFetchedAutosave = select( coreStore ).hasFetchedAutosaves(\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tconst currentUserId = select( coreStore ).getCurrentUser()?.id;\n\n\t\t// Disable reason - this line causes the side-effect of fetching the autosave\n\t\t// via a resolver, moving below the return would result in the autosave never\n\t\t// being fetched.\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst autosave = select( coreStore ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\t// If any existing autosaves have not yet been fetched, this function is\n\t\t// unable to determine if the post is autosaveable, so return false.\n\t\tif ( ! hasFetchedAutosave ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we don't already have an autosave, the post is autosaveable.\n\t\tif ( ! autosave ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// To avoid an expensive content serialization, use the content dirtiness\n\t\t// flag in place of content field comparison against the known autosave.\n\t\t// This is not strictly accurate, and relies on a tolerance toward autosave\n\t\t// request failures for unnecessary saves.\n\t\tif ( hasChangedContent( state ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If title, excerpt, or meta have changed, the post is autosaveable.\n\t\treturn [ 'title', 'excerpt', 'meta' ].some(\n\t\t\t( field ) =>\n\t\t\t\tgetPostRawValue( autosave[ field ] ) !==\n\t\t\t\tgetEditedPostAttribute( state, field )\n\t\t);\n\t}\n);\n\n/**\n * Return true if the post being edited is being scheduled. Preferring the\n * unsaved status values.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isEditedPostBeingScheduled( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\t// Offset the date by one minute (network latency).\n\tconst checkedDate = new Date(\n\t\tNumber( getDate( date ) ) - ONE_MINUTE_IN_MS\n\t);\n\n\treturn isInTheFuture( checkedDate );\n}\n\n/**\n * Returns whether the current post should be considered to have a \"floating\"\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\n *\n * Unlike in the PHP backend, the REST API returns a full date string for posts\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\n * infer that a post is set to publish \"Immediately\" we check whether the date\n * and modified date are the same.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the edited post has a floating date value.\n */\nexport function isEditedPostDateFloating( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\tconst modified = getEditedPostAttribute( state, 'modified' );\n\n\t// This should be the status of the persisted post\n\t// It shouldn't use the \"edited\" status otherwise it breaks the\n\t// inferred post data floating status\n\t// See https://github.com/WordPress/gutenberg/issues/28083.\n\tconst status = getCurrentPost( state ).status;\n\tif (\n\t\tstatus === 'draft' ||\n\t\tstatus === 'auto-draft' ||\n\t\tstatus === 'pending'\n\t) {\n\t\treturn date === modified || date === null;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if the post is currently being deleted, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether post is being deleted.\n */\nexport function isDeletingPost( state ) {\n\treturn !! state.deleting.pending;\n}\n\n/**\n * Returns true if the post is currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being saved.\n */\nexport function isSavingPost( state ) {\n\treturn !! state.saving.pending;\n}\n\n/**\n * Returns true if non-post entities are currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether non-post entities are being saved.\n */\nexport const isSavingNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst entitiesBeingSaved =\n\t\t\tselect( coreStore ).__experimentalGetEntitiesBeingSaved();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn entitiesBeingSaved.some(\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted successfully, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post was saved successfully.\n */\nexport const didPostSaveRequestSucceed = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn ! select( coreStore ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted but failed, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post save failed.\n */\nexport const didPostSaveRequestFail = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn !! select( coreStore ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the post is autosaving, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is autosaving.\n */\nexport function isAutosavingPost( state ) {\n\treturn isSavingPost( state ) && Boolean( state.saving.options?.isAutosave );\n}\n\n/**\n * Returns true if the post is being previewed, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is being previewed.\n */\nexport function isPreviewingPost( state ) {\n\treturn isSavingPost( state ) && Boolean( state.saving.options?.isPreview );\n}\n\n/**\n * Returns the post preview link\n *\n * @param {Object} state Global application state.\n *\n * @return {string | undefined} Preview Link.\n */\nexport function getEditedPostPreviewLink( state ) {\n\tif ( state.saving.pending || isSavingPost( state ) ) {\n\t\treturn;\n\t}\n\n\tlet previewLink = getAutosaveAttribute( state, 'preview_link' );\n\t// Fix for issue: https://github.com/WordPress/gutenberg/issues/33616\n\t// If the post is draft, ignore the preview link from the autosave record,\n\t// because the preview could be a stale autosave if the post was switched from\n\t// published to draft.\n\t// See: https://github.com/WordPress/gutenberg/pull/37952.\n\tif ( ! previewLink || 'draft' === getCurrentPost( state ).status ) {\n\t\tpreviewLink = getEditedPostAttribute( state, 'link' );\n\t\tif ( previewLink ) {\n\t\t\tpreviewLink = addQueryArgs( previewLink, { preview: true } );\n\t\t}\n\t}\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\n\n\tif ( previewLink && featuredImageId ) {\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\n\t}\n\n\treturn previewLink;\n}\n\n/**\n * Returns a suggested post format for the current post, inferred only if there\n * is a single block within the post and it is of a type known to match a\n * default post format. Returns null if the format cannot be determined.\n *\n * @return {?string} Suggested post format.\n */\nexport const getSuggestedPostFormat = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst blocks = select( blockEditorStore ).getBlocks();\n\n\t\tif ( blocks.length > 2 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet name;\n\t\t// If there is only one block in the content of the post grab its name\n\t\t// so we can derive a suitable post format from it.\n\t\tif ( blocks.length === 1 ) {\n\t\t\tname = blocks[ 0 ].name;\n\t\t\t// Check for core/embed `video` and `audio` eligible suggestions.\n\t\t\tif ( name === 'core/embed' ) {\n\t\t\t\tconst provider = blocks[ 0 ].attributes?.providerNameSlug;\n\t\t\t\tif ( [ 'youtube', 'vimeo' ].includes( provider ) ) {\n\t\t\t\t\tname = 'core/video';\n\t\t\t\t} else if ( [ 'spotify', 'soundcloud' ].includes( provider ) ) {\n\t\t\t\t\tname = 'core/audio';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If there are two blocks in the content and the last one is a text blocks\n\t\t// grab the name of the first one to also suggest a post format from it.\n\t\tif ( blocks.length === 2 && blocks[ 1 ].name === 'core/paragraph' ) {\n\t\t\tname = blocks[ 0 ].name;\n\t\t}\n\n\t\t// We only convert to default post formats in core.\n\t\tswitch ( name ) {\n\t\t\tcase 'core/image':\n\t\t\t\treturn 'image';\n\t\t\tcase 'core/quote':\n\t\t\tcase 'core/pullquote':\n\t\t\t\treturn 'quote';\n\t\t\tcase 'core/gallery':\n\t\t\t\treturn 'gallery';\n\t\t\tcase 'core/video':\n\t\t\t\treturn 'video';\n\t\t\tcase 'core/audio':\n\t\t\t\treturn 'audio';\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n);\n\n/**\n * Returns the content of the post being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post content.\n */\nexport const getEditedPostContent = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst record = select( coreStore ).getEditedEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( record ) {\n\t\t\tif ( typeof record.content === 'function' ) {\n\t\t\t\treturn record.content( record );\n\t\t\t} else if ( record.blocks ) {\n\t\t\t\treturn __unstableSerializeAndClean( record.blocks );\n\t\t\t} else if ( record.content ) {\n\t\t\t\treturn record.content;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n);\n\n/**\n * Returns true if the post is being published, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being published.\n */\nexport function isPublishingPost( state ) {\n\treturn (\n\t\tisSavingPost( state ) &&\n\t\t! isCurrentPostPublished( state ) &&\n\t\tgetEditedPostAttribute( state, 'status' ) === 'publish'\n\t);\n}\n\n/**\n * Returns whether the permalink is editable or not.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether or not the permalink is editable.\n */\nexport function isPermalinkEditable( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\n}\n\n/**\n * Returns the permalink for the post.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} The permalink, or null if the post is not viewable.\n */\nexport function getPermalink( state ) {\n\tconst permalinkParts = getPermalinkParts( state );\n\tif ( ! permalinkParts ) {\n\t\treturn null;\n\t}\n\n\tconst { prefix, postName, suffix } = permalinkParts;\n\n\tif ( isPermalinkEditable( state ) ) {\n\t\treturn prefix + postName + suffix;\n\t}\n\n\treturn prefix;\n}\n\n/**\n * Returns the slug for the post being edited, preferring a manually edited\n * value if one exists, then a sanitized version of the current post title, and\n * finally the post ID.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} The current slug to be displayed in the editor\n */\nexport function getEditedPostSlug( state ) {\n\treturn (\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tcleanForSlug( getEditedPostAttribute( state, 'title' ) ) ||\n\t\tgetCurrentPostId( state )\n\t);\n}\n\n/**\n * Returns the permalink for a post, split into its three parts: the prefix,\n * the postName, and the suffix.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} An object containing the prefix, postName, and suffix for\n *                  the permalink, or null if the post is not viewable.\n */\nexport function getPermalinkParts( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\tif ( ! permalinkTemplate ) {\n\t\treturn null;\n\t}\n\n\tconst postName =\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tgetEditedPostAttribute( state, 'generated_slug' );\n\n\tconst [ prefix, suffix ] = permalinkTemplate.split(\n\t\tPERMALINK_POSTNAME_REGEX\n\t);\n\n\treturn {\n\t\tprefix,\n\t\tpostName,\n\t\tsuffix,\n\t};\n}\n\n/**\n * Returns whether the post is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostLocked( state ) {\n\treturn state.postLock.isLocked;\n}\n\n/**\n * Returns whether post saving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostSavingLocked( state ) {\n\treturn Object.keys( state.postSavingLock ).length > 0;\n}\n\n/**\n * Returns whether post autosaving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostAutosavingLocked( state ) {\n\treturn Object.keys( state.postAutosavingLock ).length > 0;\n}\n\n/**\n * Returns whether the edition of the post has been taken over.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is post lock takeover.\n */\nexport function isPostLockTakeover( state ) {\n\treturn state.postLock.isTakeover;\n}\n\n/**\n * Returns details about the post lock user.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} A user object.\n */\nexport function getPostLockUser( state ) {\n\treturn state.postLock.user;\n}\n\n/**\n * Returns the active post lock.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The lock object.\n */\nexport function getActivePostLock( state ) {\n\treturn state.postLock.activePostLock;\n}\n\n/**\n * Returns whether or not the user has the unfiltered_html capability.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\n */\nexport function canUserUseUnfilteredHTML( state ) {\n\treturn Boolean(\n\t\tgetCurrentPost( state )._links?.hasOwnProperty(\n\t\t\t'wp:action-unfiltered-html'\n\t\t)\n\t);\n}\n\n/**\n * Returns whether the pre-publish panel should be shown\n * or skipped when the user clicks the \"publish\" button.\n *\n * @return {boolean} Whether the pre-publish panel should be shown or not.\n */\nexport const isPublishSidebarEnabled = createRegistrySelector(\n\t( select ) => () =>\n\t\t!! select( preferencesStore ).get( 'core', 'isPublishSidebarEnabled' )\n);\n\n/**\n * Return the current block list.\n *\n * @param {Object} state\n * @return {Array} Block list.\n */\nexport const getEditorBlocks = createSelector(\n\t( state ) => {\n\t\treturn (\n\t\t\tgetEditedPostAttribute( state, 'blocks' ) ||\n\t\t\tparse( getEditedPostContent( state ) )\n\t\t);\n\t},\n\t( state ) => [\n\t\tgetEditedPostAttribute( state, 'blocks' ),\n\t\tgetEditedPostContent( state ),\n\t]\n);\n\n/**\n * Returns true if the given panel was programmatically removed, or false otherwise.\n * All panels are not removed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is removed.\n */\nexport function isEditorPanelRemoved( state, panelName ) {\n\treturn state.removedPanels.includes( panelName );\n}\n\n/**\n * Returns true if the given panel is enabled, or false otherwise. Panels are\n * enabled by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is enabled.\n */\nexport const isEditorPanelEnabled = createRegistrySelector(\n\t( select ) => ( state, panelName ) => {\n\t\t// For backward compatibility, we check edit-post\n\t\t// even though now this is in \"editor\" package.\n\t\tconst inactivePanels = select( preferencesStore ).get(\n\t\t\t'core',\n\t\t\t'inactivePanels'\n\t\t);\n\t\treturn (\n\t\t\t! isEditorPanelRemoved( state, panelName ) &&\n\t\t\t! inactivePanels?.includes( panelName )\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the given panel is open, or false otherwise. Panels are\n * closed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is open.\n */\nexport const isEditorPanelOpened = createRegistrySelector(\n\t( select ) => ( state, panelName ) => {\n\t\t// For backward compatibility, we check edit-post\n\t\t// even though now this is in \"editor\" package.\n\t\tconst openPanels = select( preferencesStore ).get(\n\t\t\t'core',\n\t\t\t'openPanels'\n\t\t);\n\t\treturn !! openPanels?.includes( panelName );\n\t}\n);\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n/**\n * Returns the current selection start.\n *\n * @deprecated since Gutenberg 10.0.0.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection start.\n */\nexport function getEditorSelectionStart( state ) {\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\n\t\tsince: '5.8',\n\t\talternative: \"select('core/editor').getEditorSelection\",\n\t} );\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionStart;\n}\n\n/**\n * Returns the current selection end.\n *\n * @deprecated since Gutenberg 10.0.0.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n */\nexport function getEditorSelectionEnd( state ) {\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\n\t\tsince: '5.8',\n\t\talternative: \"select('core/editor').getEditorSelection\",\n\t} );\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionEnd;\n}\n\n/**\n * Returns the current selection.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n */\nexport function getEditorSelection( state ) {\n\treturn getEditedPostAttribute( state, 'selection' );\n}\n\n/**\n * Is the editor ready\n *\n * @param {Object} state\n * @return {boolean} is Ready.\n */\nexport function __unstableIsEditorReady( state ) {\n\treturn !! state.postId;\n}\n\n/**\n * Returns the post editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getEditorSettings( state ) {\n\treturn state.editorSettings;\n}\n\n/**\n * Returns the post editor's rendering mode.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Rendering mode.\n */\nexport function getRenderingMode( state ) {\n\treturn state.renderingMode;\n}\n\n/**\n * Returns the current editing canvas device type.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Device type.\n */\nexport const getDeviceType = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst isZoomOut = unlock( select( blockEditorStore ) ).isZoomOut();\n\t\tif ( isZoomOut ) {\n\t\t\treturn 'Desktop';\n\t\t}\n\t\treturn state.deviceType;\n\t}\n);\n\n/**\n * Returns true if the list view is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the list view is opened.\n */\nexport function isListViewOpened( state ) {\n\treturn state.listViewPanel;\n}\n\n/**\n * Returns true if the inserter is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the inserter is opened.\n */\nexport function isInserterOpened( state ) {\n\treturn !! state.blockInserterPanel;\n}\n\n/**\n * Returns the current editing mode.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Editing mode.\n */\nexport const getEditorMode = createRegistrySelector(\n\t( select ) => () =>\n\t\tselect( preferencesStore ).get( 'core', 'editorMode' ) ?? 'visual'\n);\n\n/*\n * Backward compatibility\n */\n\n/**\n * Returns state object prior to a specified optimist transaction ID, or `null`\n * if the transaction corresponding to the given ID cannot be found.\n *\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function getStateBeforeOptimisticTransaction() {\n\tdeprecated( \"select('core/editor').getStateBeforeOptimisticTransaction\", {\n\t\tsince: '5.7',\n\t\thint: 'No state history is kept on this store anymore',\n\t} );\n\n\treturn null;\n}\n/**\n * Returns true if an optimistic transaction is pending commit, for which the\n * before state satisfies the given predicate function.\n *\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function inSomeHistory() {\n\tdeprecated( \"select('core/editor').inSomeHistory\", {\n\t\tsince: '5.7',\n\t\thint: 'No state history is kept on this store anymore',\n\t} );\n\treturn false;\n}\n\nfunction getBlockEditorSelector( name ) {\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\n\t\tdeprecated( \"`wp.data.select( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative: \"`wp.data.select( 'core/block-editor' ).\" + name + '`',\n\t\t\tversion: '6.2',\n\t\t} );\n\n\t\treturn select( blockEditorStore )[ name ]( ...args );\n\t} );\n}\n\n/**\n * @see getBlockName in core/block-editor store.\n */\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\n\n/**\n * @see isBlockValid in core/block-editor store.\n */\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\n\n/**\n * @see getBlockAttributes in core/block-editor store.\n */\nexport const getBlockAttributes =\n\tgetBlockEditorSelector( 'getBlockAttributes' );\n\n/**\n * @see getBlock in core/block-editor store.\n */\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\n\n/**\n * @see getBlocks in core/block-editor store.\n */\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\n\n/**\n * @see getClientIdsOfDescendants in core/block-editor store.\n */\nexport const getClientIdsOfDescendants = getBlockEditorSelector(\n\t'getClientIdsOfDescendants'\n);\n\n/**\n * @see getClientIdsWithDescendants in core/block-editor store.\n */\nexport const getClientIdsWithDescendants = getBlockEditorSelector(\n\t'getClientIdsWithDescendants'\n);\n\n/**\n * @see getGlobalBlockCount in core/block-editor store.\n */\nexport const getGlobalBlockCount = getBlockEditorSelector(\n\t'getGlobalBlockCount'\n);\n\n/**\n * @see getBlocksByClientId in core/block-editor store.\n */\nexport const getBlocksByClientId = getBlockEditorSelector(\n\t'getBlocksByClientId'\n);\n\n/**\n * @see getBlockCount in core/block-editor store.\n */\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\n\n/**\n * @see getBlockSelectionStart in core/block-editor store.\n */\nexport const getBlockSelectionStart = getBlockEditorSelector(\n\t'getBlockSelectionStart'\n);\n\n/**\n * @see getBlockSelectionEnd in core/block-editor store.\n */\nexport const getBlockSelectionEnd = getBlockEditorSelector(\n\t'getBlockSelectionEnd'\n);\n\n/**\n * @see getSelectedBlockCount in core/block-editor store.\n */\nexport const getSelectedBlockCount = getBlockEditorSelector(\n\t'getSelectedBlockCount'\n);\n\n/**\n * @see hasSelectedBlock in core/block-editor store.\n */\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\n\n/**\n * @see getSelectedBlockClientId in core/block-editor store.\n */\nexport const getSelectedBlockClientId = getBlockEditorSelector(\n\t'getSelectedBlockClientId'\n);\n\n/**\n * @see getSelectedBlock in core/block-editor store.\n */\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\n\n/**\n * @see getBlockRootClientId in core/block-editor store.\n */\nexport const getBlockRootClientId = getBlockEditorSelector(\n\t'getBlockRootClientId'\n);\n\n/**\n * @see getBlockHierarchyRootClientId in core/block-editor store.\n */\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector(\n\t'getBlockHierarchyRootClientId'\n);\n\n/**\n * @see getAdjacentBlockClientId in core/block-editor store.\n */\nexport const getAdjacentBlockClientId = getBlockEditorSelector(\n\t'getAdjacentBlockClientId'\n);\n\n/**\n * @see getPreviousBlockClientId in core/block-editor store.\n */\nexport const getPreviousBlockClientId = getBlockEditorSelector(\n\t'getPreviousBlockClientId'\n);\n\n/**\n * @see getNextBlockClientId in core/block-editor store.\n */\nexport const getNextBlockClientId = getBlockEditorSelector(\n\t'getNextBlockClientId'\n);\n\n/**\n * @see getSelectedBlocksInitialCaretPosition in core/block-editor store.\n */\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector(\n\t'getSelectedBlocksInitialCaretPosition'\n);\n\n/**\n * @see getMultiSelectedBlockClientIds in core/block-editor store.\n */\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector(\n\t'getMultiSelectedBlockClientIds'\n);\n\n/**\n * @see getMultiSelectedBlocks in core/block-editor store.\n */\nexport const getMultiSelectedBlocks = getBlockEditorSelector(\n\t'getMultiSelectedBlocks'\n);\n\n/**\n * @see getFirstMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getFirstMultiSelectedBlockClientId'\n);\n\n/**\n * @see getLastMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getLastMultiSelectedBlockClientId'\n);\n\n/**\n * @see isFirstMultiSelectedBlock in core/block-editor store.\n */\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector(\n\t'isFirstMultiSelectedBlock'\n);\n\n/**\n * @see isBlockMultiSelected in core/block-editor store.\n */\nexport const isBlockMultiSelected = getBlockEditorSelector(\n\t'isBlockMultiSelected'\n);\n\n/**\n * @see isAncestorMultiSelected in core/block-editor store.\n */\nexport const isAncestorMultiSelected = getBlockEditorSelector(\n\t'isAncestorMultiSelected'\n);\n\n/**\n * @see getMultiSelectedBlocksStartClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksStartClientId'\n);\n\n/**\n * @see getMultiSelectedBlocksEndClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksEndClientId'\n);\n\n/**\n * @see getBlockOrder in core/block-editor store.\n */\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\n\n/**\n * @see getBlockIndex in core/block-editor store.\n */\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\n\n/**\n * @see isBlockSelected in core/block-editor store.\n */\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\n\n/**\n * @see hasSelectedInnerBlock in core/block-editor store.\n */\nexport const hasSelectedInnerBlock = getBlockEditorSelector(\n\t'hasSelectedInnerBlock'\n);\n\n/**\n * @see isBlockWithinSelection in core/block-editor store.\n */\nexport const isBlockWithinSelection = getBlockEditorSelector(\n\t'isBlockWithinSelection'\n);\n\n/**\n * @see hasMultiSelection in core/block-editor store.\n */\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\n\n/**\n * @see isMultiSelecting in core/block-editor store.\n */\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\n\n/**\n * @see isSelectionEnabled in core/block-editor store.\n */\nexport const isSelectionEnabled =\n\tgetBlockEditorSelector( 'isSelectionEnabled' );\n\n/**\n * @see getBlockMode in core/block-editor store.\n */\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\n\n/**\n * @see isTyping in core/block-editor store.\n */\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\n\n/**\n * @see isCaretWithinFormattedText in core/block-editor store.\n */\nexport const isCaretWithinFormattedText = getBlockEditorSelector(\n\t'isCaretWithinFormattedText'\n);\n\n/**\n * @see getBlockInsertionPoint in core/block-editor store.\n */\nexport const getBlockInsertionPoint = getBlockEditorSelector(\n\t'getBlockInsertionPoint'\n);\n\n/**\n * @see isBlockInsertionPointVisible in core/block-editor store.\n */\nexport const isBlockInsertionPointVisible = getBlockEditorSelector(\n\t'isBlockInsertionPointVisible'\n);\n\n/**\n * @see isValidTemplate in core/block-editor store.\n */\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\n\n/**\n * @see getTemplate in core/block-editor store.\n */\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\n\n/**\n * @see getTemplateLock in core/block-editor store.\n */\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\n\n/**\n * @see canInsertBlockType in core/block-editor store.\n */\nexport const canInsertBlockType =\n\tgetBlockEditorSelector( 'canInsertBlockType' );\n\n/**\n * @see getInserterItems in core/block-editor store.\n */\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\n\n/**\n * @see hasInserterItems in core/block-editor store.\n */\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\n\n/**\n * @see getBlockListSettings in core/block-editor store.\n */\nexport const getBlockListSettings = getBlockEditorSelector(\n\t'getBlockListSettings'\n);\n\nexport const __experimentalGetDefaultTemplateTypes = createRegistrySelector(\n\t( select ) => () => {\n\t\tdeprecated(\n\t\t\t\"select('core/editor').__experimentalGetDefaultTemplateTypes\",\n\t\t\t{\n\t\t\t\tsince: '6.8',\n\t\t\t\talternative:\n\t\t\t\t\t\"select('core/core-data').getCurrentTheme()?.default_template_types\",\n\t\t\t}\n\t\t);\n\t\treturn select( coreStore ).getCurrentTheme()?.default_template_types;\n\t}\n);\n\n/**\n * Returns the default template part areas.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} The template part areas.\n */\nexport const __experimentalGetDefaultTemplatePartAreas = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector( () => {\n\t\t\tdeprecated(\n\t\t\t\t\"select('core/editor').__experimentalGetDefaultTemplatePartAreas\",\n\t\t\t\t{\n\t\t\t\t\tsince: '6.8',\n\t\t\t\t\talternative:\n\t\t\t\t\t\t\"select('core/core-data').getCurrentTheme()?.default_template_part_areas\",\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst areas =\n\t\t\t\tselect( coreStore ).getCurrentTheme()\n\t\t\t\t\t?.default_template_part_areas || [];\n\n\t\t\treturn areas.map( ( item ) => {\n\t\t\t\treturn { ...item, icon: getTemplatePartIcon( item.icon ) };\n\t\t\t} );\n\t\t} )\n);\n\n/**\n * Returns a default template type searched by slug.\n *\n * @param {Object} state Global application state.\n * @param {string} slug  The template type slug.\n *\n * @return {Object} The template type.\n */\nexport const __experimentalGetDefaultTemplateType = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector( ( state, slug ) => {\n\t\t\tdeprecated(\n\t\t\t\t\"select('core/editor').__experimentalGetDefaultTemplateType\",\n\t\t\t\t{\n\t\t\t\t\tsince: '6.8',\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst templateTypes =\n\t\t\t\tselect( coreStore ).getCurrentTheme()?.default_template_types;\n\n\t\t\tif ( ! templateTypes ) {\n\t\t\t\treturn EMPTY_OBJECT;\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\tObject.values( templateTypes ).find(\n\t\t\t\t\t( type ) => type.slug === slug\n\t\t\t\t) ?? EMPTY_OBJECT\n\t\t\t);\n\t\t} )\n);\n\n/**\n * Given a template entity, return information about it which is ready to be\n * rendered, such as the title, description, and icon.\n *\n * @param {Object} state    Global application state.\n * @param {Object} template The template for which we need information.\n * @return {Object} Information about the template, including title, description, and icon.\n */\nexport const __experimentalGetTemplateInfo = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector( ( state, template ) => {\n\t\t\tdeprecated( \"select('core/editor').__experimentalGetTemplateInfo\", {\n\t\t\t\tsince: '6.8',\n\t\t\t} );\n\n\t\t\tif ( ! template ) {\n\t\t\t\treturn EMPTY_OBJECT;\n\t\t\t}\n\n\t\t\tconst currentTheme = select( coreStore ).getCurrentTheme();\n\n\t\t\tconst templateTypes = currentTheme?.default_template_types || [];\n\t\t\tconst templateAreas =\n\t\t\t\tcurrentTheme?.default_template_part_areas || [];\n\n\t\t\treturn getTemplateInfo( {\n\t\t\t\ttemplate,\n\t\t\t\ttemplateAreas,\n\t\t\t\ttemplateTypes,\n\t\t\t} );\n\t\t} )\n);\n\n/**\n * Returns a post type label depending on the current post.\n *\n * @param {Object} state Global application state.\n *\n * @return {string|undefined} The post type label if available, otherwise undefined.\n */\nexport const getPostTypeLabel = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst currentPostType = getCurrentPostType( state );\n\t\tconst postType = select( coreStore ).getPostType( currentPostType );\n\t\t// Disable reason: Post type labels object is shaped like this.\n\t\t// eslint-disable-next-line camelcase\n\t\treturn postType?.labels?.singular_name;\n\t}\n);\n\n/**\n * Returns true if the publish sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the publish sidebar is open.\n */\nexport function isPublishSidebarOpened( state ) {\n\treturn state.publishSidebarActive;\n}\n"],"mappings":"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","ignoreList":[]}