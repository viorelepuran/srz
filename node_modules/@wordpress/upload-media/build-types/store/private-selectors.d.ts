/**
 * Internal dependencies
 */
import { type BatchId, type QueueItem, type QueueItemId, type State } from './types';
/**
 * Returns all items currently being uploaded.
 *
 * @param state Upload state.
 *
 * @return Queue items.
 */
export declare function getAllItems(state: State): QueueItem[];
/**
 * Returns a specific item given its unique ID.
 *
 * @param state Upload state.
 * @param id    Item ID.
 *
 * @return Queue item.
 */
export declare function getItem(state: State, id: QueueItemId): QueueItem | undefined;
/**
 * Determines whether a batch has been successfully uploaded, given its unique ID.
 *
 * @param state   Upload state.
 * @param batchId Batch ID.
 *
 * @return Whether a batch has been uploaded.
 */
export declare function isBatchUploaded(state: State, batchId: BatchId): boolean;
/**
 * Determines whether an upload is currently in progress given a post or attachment ID.
 *
 * @param state              Upload state.
 * @param postOrAttachmentId Post ID or attachment ID.
 *
 * @return Whether upload is currently in progress for the given post or attachment.
 */
export declare function isUploadingToPost(state: State, postOrAttachmentId: number): boolean;
/**
 * Returns the next paused upload for a given post or attachment ID.
 *
 * @param state              Upload state.
 * @param postOrAttachmentId Post ID or attachment ID.
 *
 * @return Paused item.
 */
export declare function getPausedUploadForPost(state: State, postOrAttachmentId: number): QueueItem | undefined;
/**
 * Determines whether uploading is currently paused.
 *
 * @param state Upload state.
 *
 * @return Whether uploading is currently paused.
 */
export declare function isPaused(state: State): boolean;
/**
 * Returns all cached blob URLs for a given item ID.
 *
 * @param state Upload state.
 * @param id    Item ID
 *
 * @return List of blob URLs.
 */
export declare function getBlobUrls(state: State, id: QueueItemId): string[];
//# sourceMappingURL=private-selectors.d.ts.map