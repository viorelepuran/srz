{"version":3,"names":["v4","uuidv4","createBlobURL","isBlobURL","revokeBlobURL","cloneFile","convertBlobToFile","StubFile","ItemStatus","OperationType","Type","addItem","file","fileOrBlob","batchId","onChange","onSuccess","onBatchSuccess","onError","additionalData","sourceUrl","sourceAttachmentId","abortController","operations","dispatch","itemId","blobUrl","type","CacheBlobUrl","id","Add","item","status","Processing","sourceFile","attachment","url","convert_format","AbortController","Array","isArray","Prepare","processItem","select","isPaused","getItem","operation","revokeBlobUrls","isBatchUploaded","OperationStart","prepareItem","Upload","uploadItem","pauseQueue","PauseQueue","resumeQueue","ResumeQueue","getAllItems","removeItem","Remove","finishOperation","updates","OperationFinish","AddOperations","getSettings","mediaUpload","filesList","signal","onFileChange","error","cancelItem","blobUrls","getBlobUrls","RevokeBlobUrls","updateSettings","settings","UpdateSettings"],"sources":["@wordpress/upload-media/src/store/private-actions.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport { createBlobURL, isBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport type { createRegistry } from '@wordpress/data';\n\ntype WPDataRegistry = ReturnType< typeof createRegistry >;\n\n/**\n * Internal dependencies\n */\nimport { cloneFile, convertBlobToFile } from '../utils';\nimport { StubFile } from '../stub-file';\nimport type {\n\tAddAction,\n\tAdditionalData,\n\tAddOperationsAction,\n\tBatchId,\n\tCacheBlobUrlAction,\n\tOnBatchSuccessHandler,\n\tOnChangeHandler,\n\tOnErrorHandler,\n\tOnSuccessHandler,\n\tOperation,\n\tOperationFinishAction,\n\tOperationStartAction,\n\tPauseQueueAction,\n\tQueueItem,\n\tQueueItemId,\n\tResumeQueueAction,\n\tRevokeBlobUrlsAction,\n\tSettings,\n\tState,\n\tUpdateSettingsAction,\n} from './types';\nimport { ItemStatus, OperationType, Type } from './types';\nimport type { cancelItem } from './actions';\n\ntype ActionCreators = {\n\tcancelItem: typeof cancelItem;\n\taddItem: typeof addItem;\n\tremoveItem: typeof removeItem;\n\tprepareItem: typeof prepareItem;\n\tprocessItem: typeof processItem;\n\tfinishOperation: typeof finishOperation;\n\tuploadItem: typeof uploadItem;\n\trevokeBlobUrls: typeof revokeBlobUrls;\n\t< T = Record< string, unknown > >( args: T ): void;\n};\n\ntype AllSelectors = typeof import('./selectors') &\n\ttypeof import('./private-selectors');\ntype CurriedState< F > = F extends ( state: State, ...args: infer P ) => infer R\n\t? ( ...args: P ) => R\n\t: F;\ntype Selectors = {\n\t[ key in keyof AllSelectors ]: CurriedState< AllSelectors[ key ] >;\n};\n\ntype ThunkArgs = {\n\tselect: Selectors;\n\tdispatch: ActionCreators;\n\tregistry: WPDataRegistry;\n};\n\ninterface AddItemArgs {\n\t// It should always be a File, but some consumers might still pass Blobs only.\n\tfile: File | Blob;\n\tbatchId?: BatchId;\n\tonChange?: OnChangeHandler;\n\tonSuccess?: OnSuccessHandler;\n\tonError?: OnErrorHandler;\n\tonBatchSuccess?: OnBatchSuccessHandler;\n\tadditionalData?: AdditionalData;\n\tsourceUrl?: string;\n\tsourceAttachmentId?: number;\n\tabortController?: AbortController;\n\toperations?: Operation[];\n}\n\n/**\n * Adds a new item to the upload queue.\n *\n * @param $0\n * @param $0.file                 File\n * @param [$0.batchId]            Batch ID.\n * @param [$0.onChange]           Function called each time a file or a temporary representation of the file is available.\n * @param [$0.onSuccess]          Function called after the file is uploaded.\n * @param [$0.onBatchSuccess]     Function called after a batch of files is uploaded.\n * @param [$0.onError]            Function called when an error happens.\n * @param [$0.additionalData]     Additional data to include in the request.\n * @param [$0.sourceUrl]          Source URL. Used when importing a file from a URL or optimizing an existing file.\n * @param [$0.sourceAttachmentId] Source attachment ID. Used when optimizing an existing file for example.\n * @param [$0.abortController]    Abort controller for upload cancellation.\n * @param [$0.operations]         List of operations to perform. Defaults to automatically determined list, based on the file.\n */\nexport function addItem( {\n\tfile: fileOrBlob,\n\tbatchId,\n\tonChange,\n\tonSuccess,\n\tonBatchSuccess,\n\tonError,\n\tadditionalData = {} as AdditionalData,\n\tsourceUrl,\n\tsourceAttachmentId,\n\tabortController,\n\toperations,\n}: AddItemArgs ) {\n\treturn async ( { dispatch }: ThunkArgs ) => {\n\t\tconst itemId = uuidv4();\n\n\t\t// Hardening in case a Blob is passed instead of a File.\n\t\t// See https://github.com/WordPress/gutenberg/pull/65693 for an example.\n\t\tconst file = convertBlobToFile( fileOrBlob );\n\n\t\tlet blobUrl;\n\n\t\t// StubFile could be coming from addItemFromUrl().\n\t\tif ( ! ( file instanceof StubFile ) ) {\n\t\t\tblobUrl = createBlobURL( file );\n\t\t\tdispatch< CacheBlobUrlAction >( {\n\t\t\t\ttype: Type.CacheBlobUrl,\n\t\t\t\tid: itemId,\n\t\t\t\tblobUrl,\n\t\t\t} );\n\t\t}\n\n\t\tdispatch< AddAction >( {\n\t\t\ttype: Type.Add,\n\t\t\titem: {\n\t\t\t\tid: itemId,\n\t\t\t\tbatchId,\n\t\t\t\tstatus: ItemStatus.Processing,\n\t\t\t\tsourceFile: cloneFile( file ),\n\t\t\t\tfile,\n\t\t\t\tattachment: {\n\t\t\t\t\turl: blobUrl,\n\t\t\t\t},\n\t\t\t\tadditionalData: {\n\t\t\t\t\tconvert_format: false,\n\t\t\t\t\t...additionalData,\n\t\t\t\t},\n\t\t\t\tonChange,\n\t\t\t\tonSuccess,\n\t\t\t\tonBatchSuccess,\n\t\t\t\tonError,\n\t\t\t\tsourceUrl,\n\t\t\t\tsourceAttachmentId,\n\t\t\t\tabortController: abortController || new AbortController(),\n\t\t\t\toperations: Array.isArray( operations )\n\t\t\t\t\t? operations\n\t\t\t\t\t: [ OperationType.Prepare ],\n\t\t\t},\n\t\t} );\n\n\t\tdispatch.processItem( itemId );\n\t};\n}\n\n/**\n * Processes a single item in the queue.\n *\n * Runs the next operation in line and invokes any callbacks.\n *\n * @param id Item ID.\n */\nexport function processItem( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tif ( select.isPaused() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst item = select.getItem( id ) as QueueItem;\n\n\t\tconst { attachment, onChange, onSuccess, onBatchSuccess, batchId } =\n\t\t\titem;\n\n\t\tconst operation = Array.isArray( item.operations?.[ 0 ] )\n\t\t\t? item.operations[ 0 ][ 0 ]\n\t\t\t: item.operations?.[ 0 ];\n\n\t\tif ( attachment ) {\n\t\t\tonChange?.( [ attachment ] );\n\t\t}\n\n\t\t/*\n\t\t If there are no more operations, the item can be removed from the queue,\n\t\t but only if there are no thumbnails still being side-loaded,\n\t\t or if itself is a side-loaded item.\n\t\t*/\n\n\t\tif ( ! operation ) {\n\t\t\tif ( attachment ) {\n\t\t\t\tonSuccess?.( [ attachment ] );\n\t\t\t}\n\n\t\t\t// dispatch.removeItem( id );\n\t\t\tdispatch.revokeBlobUrls( id );\n\n\t\t\tif ( batchId && select.isBatchUploaded( batchId ) ) {\n\t\t\t\tonBatchSuccess?.();\n\t\t\t}\n\n\t\t\t/*\n\t\t\t At this point we are dealing with a parent whose children haven't fully uploaded yet.\n\t\t\t Do nothing and let the removal happen once the last side-loaded item finishes.\n\t\t\t */\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! operation ) {\n\t\t\t// This shouldn't really happen.\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch< OperationStartAction >( {\n\t\t\ttype: Type.OperationStart,\n\t\t\tid,\n\t\t\toperation,\n\t\t} );\n\n\t\tswitch ( operation ) {\n\t\t\tcase OperationType.Prepare:\n\t\t\t\tdispatch.prepareItem( item.id );\n\t\t\t\tbreak;\n\n\t\t\tcase OperationType.Upload:\n\t\t\t\tdispatch.uploadItem( id );\n\t\t\t\tbreak;\n\t\t}\n\t};\n}\n\n/**\n * Returns an action object that pauses all processing in the queue.\n *\n * Useful for testing purposes.\n *\n * @return Action object.\n */\nexport function pauseQueue(): PauseQueueAction {\n\treturn {\n\t\ttype: Type.PauseQueue,\n\t};\n}\n\n/**\n * Resumes all processing in the queue.\n *\n * Dispatches an action object for resuming the queue itself,\n * and triggers processing for each remaining item in the queue individually.\n */\nexport function resumeQueue() {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tdispatch< ResumeQueueAction >( {\n\t\t\ttype: Type.ResumeQueue,\n\t\t} );\n\n\t\tfor ( const item of select.getAllItems() ) {\n\t\t\tdispatch.processItem( item.id );\n\t\t}\n\t};\n}\n\n/**\n * Removes a specific item from the queue.\n *\n * @param id Item ID.\n */\nexport function removeItem( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst item = select.getItem( id );\n\t\tif ( ! item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: Type.Remove,\n\t\t\tid,\n\t\t} );\n\t};\n}\n\n/**\n * Finishes an operation for a given item ID and immediately triggers processing the next one.\n *\n * @param id      Item ID.\n * @param updates Updated item data.\n */\nexport function finishOperation(\n\tid: QueueItemId,\n\tupdates: Partial< QueueItem >\n) {\n\treturn async ( { dispatch }: ThunkArgs ) => {\n\t\tdispatch< OperationFinishAction >( {\n\t\t\ttype: Type.OperationFinish,\n\t\t\tid,\n\t\t\titem: updates,\n\t\t} );\n\n\t\tdispatch.processItem( id );\n\t};\n}\n\n/**\n * Prepares an item for initial processing.\n *\n * Determines the list of operations to perform for a given image,\n * depending on its media type.\n *\n * For example, HEIF images first need to be converted, resized,\n * compressed, and then uploaded.\n *\n * Or videos need to be compressed, and then need poster generation\n * before upload.\n *\n * @param id Item ID.\n */\nexport function prepareItem( id: QueueItemId ) {\n\treturn async ( { dispatch }: ThunkArgs ) => {\n\t\tconst operations: Operation[] = [ OperationType.Upload ];\n\n\t\tdispatch< AddOperationsAction >( {\n\t\t\ttype: Type.AddOperations,\n\t\t\tid,\n\t\t\toperations,\n\t\t} );\n\n\t\tdispatch.finishOperation( id, {} );\n\t};\n}\n\n/**\n * Uploads an item to the server.\n *\n * @param id Item ID.\n */\nexport function uploadItem( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst item = select.getItem( id ) as QueueItem;\n\n\t\tselect.getSettings().mediaUpload( {\n\t\t\tfilesList: [ item.file ],\n\t\t\tadditionalData: item.additionalData,\n\t\t\tsignal: item.abortController?.signal,\n\t\t\tonFileChange: ( [ attachment ] ) => {\n\t\t\t\tif ( ! isBlobURL( attachment.url ) ) {\n\t\t\t\t\tdispatch.finishOperation( id, {\n\t\t\t\t\t\tattachment,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t},\n\t\t\tonSuccess: ( [ attachment ] ) => {\n\t\t\t\tdispatch.finishOperation( id, {\n\t\t\t\t\tattachment,\n\t\t\t\t} );\n\t\t\t},\n\t\t\tonError: ( error ) => {\n\t\t\t\tdispatch.cancelItem( id, error );\n\t\t\t},\n\t\t} );\n\t};\n}\n\n/**\n * Revokes all blob URLs for a given item, freeing up memory.\n *\n * @param id Item ID.\n */\nexport function revokeBlobUrls( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst blobUrls = select.getBlobUrls( id );\n\n\t\tfor ( const blobUrl of blobUrls ) {\n\t\t\trevokeBlobURL( blobUrl );\n\t\t}\n\n\t\tdispatch< RevokeBlobUrlsAction >( {\n\t\t\ttype: Type.RevokeBlobUrls,\n\t\t\tid,\n\t\t} );\n\t};\n}\n\n/**\n * Returns an action object that pauses all processing in the queue.\n *\n * Useful for testing purposes.\n *\n * @param settings\n * @return Action object.\n */\nexport function updateSettings(\n\tsettings: Partial< Settings >\n): UpdateSettingsAction {\n\treturn {\n\t\ttype: Type.UpdateSettings,\n\t\tsettings,\n\t};\n}\n"],"mappings":"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","ignoreList":[]}