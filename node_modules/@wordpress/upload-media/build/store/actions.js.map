{"version":3,"names":["_uuid","require","_types","_validateMimeType","_validateMimeTypeForUser","_validateFileSize","addItems","files","onChange","onSuccess","onError","onBatchSuccess","additionalData","allowedTypes","select","dispatch","batchId","uuidv4","file","validateMimeType","validateMimeTypeForUser","getSettings","allowedMimeTypes","error","validateFileSize","maxUploadFileSize","addItem","cancelItem","id","silent","item","getItem","abortController","abort","Error","console","type","Type","Cancel","removeItem","revokeBlobUrls","isBatchUploaded"],"sources":["@wordpress/upload-media/src/store/actions.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport type { createRegistry } from '@wordpress/data';\n\ntype WPDataRegistry = ReturnType< typeof createRegistry >;\n\n/**\n * Internal dependencies\n */\nimport type {\n\tAdditionalData,\n\tCancelAction,\n\tOnBatchSuccessHandler,\n\tOnChangeHandler,\n\tOnErrorHandler,\n\tOnSuccessHandler,\n\tQueueItemId,\n\tState,\n} from './types';\nimport { Type } from './types';\nimport type {\n\taddItem,\n\tprocessItem,\n\tremoveItem,\n\trevokeBlobUrls,\n} from './private-actions';\nimport { validateMimeType } from '../validate-mime-type';\nimport { validateMimeTypeForUser } from '../validate-mime-type-for-user';\nimport { validateFileSize } from '../validate-file-size';\n\ntype ActionCreators = {\n\taddItem: typeof addItem;\n\taddItems: typeof addItems;\n\tremoveItem: typeof removeItem;\n\tprocessItem: typeof processItem;\n\tcancelItem: typeof cancelItem;\n\trevokeBlobUrls: typeof revokeBlobUrls;\n\t< T = Record< string, unknown > >( args: T ): void;\n};\n\ntype AllSelectors = typeof import('./selectors') &\n\ttypeof import('./private-selectors');\ntype CurriedState< F > = F extends ( state: State, ...args: infer P ) => infer R\n\t? ( ...args: P ) => R\n\t: F;\ntype Selectors = {\n\t[ key in keyof AllSelectors ]: CurriedState< AllSelectors[ key ] >;\n};\n\ntype ThunkArgs = {\n\tselect: Selectors;\n\tdispatch: ActionCreators;\n\tregistry: WPDataRegistry;\n};\n\ninterface AddItemsArgs {\n\tfiles: File[];\n\tonChange?: OnChangeHandler;\n\tonSuccess?: OnSuccessHandler;\n\tonBatchSuccess?: OnBatchSuccessHandler;\n\tonError?: OnErrorHandler;\n\tadditionalData?: AdditionalData;\n\tallowedTypes?: string[];\n}\n\n/**\n * Adds a new item to the upload queue.\n *\n * @param $0\n * @param $0.files            Files\n * @param [$0.onChange]       Function called each time a file or a temporary representation of the file is available.\n * @param [$0.onSuccess]      Function called after the file is uploaded.\n * @param [$0.onBatchSuccess] Function called after a batch of files is uploaded.\n * @param [$0.onError]        Function called when an error happens.\n * @param [$0.additionalData] Additional data to include in the request.\n * @param [$0.allowedTypes]   Array with the types of media that can be uploaded, if unset all types are allowed.\n */\nexport function addItems( {\n\tfiles,\n\tonChange,\n\tonSuccess,\n\tonError,\n\tonBatchSuccess,\n\tadditionalData,\n\tallowedTypes,\n}: AddItemsArgs ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst batchId = uuidv4();\n\t\tfor ( const file of files ) {\n\t\t\t/*\n\t\t\t Check if the caller (e.g. a block) supports this mime type.\n\t\t\t Special case for file types such as HEIC which will be converted before upload anyway.\n\t\t\t Another check will be done before upload.\n\t\t\t*/\n\t\t\ttry {\n\t\t\t\tvalidateMimeType( file, allowedTypes );\n\t\t\t\tvalidateMimeTypeForUser(\n\t\t\t\t\tfile,\n\t\t\t\t\tselect.getSettings().allowedMimeTypes\n\t\t\t\t);\n\t\t\t} catch ( error: unknown ) {\n\t\t\t\tonError?.( error as Error );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tvalidateFileSize(\n\t\t\t\t\tfile,\n\t\t\t\t\tselect.getSettings().maxUploadFileSize\n\t\t\t\t);\n\t\t\t} catch ( error: unknown ) {\n\t\t\t\tonError?.( error as Error );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdispatch.addItem( {\n\t\t\t\tfile,\n\t\t\t\tbatchId,\n\t\t\t\tonChange,\n\t\t\t\tonSuccess,\n\t\t\t\tonBatchSuccess,\n\t\t\t\tonError,\n\t\t\t\tadditionalData,\n\t\t\t} );\n\t\t}\n\t};\n}\n\n/**\n * Cancels an item in the queue based on an error.\n *\n * @param id     Item ID.\n * @param error  Error instance.\n * @param silent Whether to cancel the item silently,\n *               without invoking its `onError` callback.\n */\nexport function cancelItem( id: QueueItemId, error: Error, silent = false ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst item = select.getItem( id );\n\n\t\tif ( ! item ) {\n\t\t\t/*\n\t\t\t * Do nothing if item has already been removed.\n\t\t\t * This can happen if an upload is cancelled manually\n\t\t\t * while transcoding with vips is still in progress.\n\t\t\t * Then, cancelItem() is once invoked manually and once\n\t\t\t * by the error handler in optimizeImageItem().\n\t\t\t */\n\t\t\treturn;\n\t\t}\n\n\t\titem.abortController?.abort();\n\n\t\tif ( ! silent ) {\n\t\t\tconst { onError } = item;\n\t\t\tonError?.( error ?? new Error( 'Upload cancelled' ) );\n\t\t\tif ( ! onError && error ) {\n\t\t\t\t// TODO: Find better way to surface errors with sideloads etc.\n\t\t\t\t// eslint-disable-next-line no-console -- Deliberately log errors here.\n\t\t\t\tconsole.error( 'Upload cancelled', error );\n\t\t\t}\n\t\t}\n\n\t\tdispatch< CancelAction >( {\n\t\t\ttype: Type.Cancel,\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t\tdispatch.removeItem( id );\n\t\tdispatch.revokeBlobUrls( id );\n\n\t\t// All items of this batch were cancelled or finished.\n\t\tif ( item.batchId && select.isBatchUploaded( item.batchId ) ) {\n\t\t\titem.onBatchSuccess?.();\n\t\t}\n\t};\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AAsBA,IAAAC,MAAA,GAAAD,OAAA;AAOA,IAAAE,iBAAA,GAAAF,OAAA;AACA,IAAAG,wBAAA,GAAAH,OAAA;AACA,IAAAI,iBAAA,GAAAJ,OAAA;AAlCA;AACA;AACA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,QAAQA,CAAE;EACzBC,KAAK;EACLC,QAAQ;EACRC,SAAS;EACTC,OAAO;EACPC,cAAc;EACdC,cAAc;EACdC;AACa,CAAC,EAAG;EACjB,OAAO,OAAQ;IAAEC,MAAM;IAAEC;EAAoB,CAAC,KAAM;IACnD,MAAMC,OAAO,GAAG,IAAAC,QAAM,EAAC,CAAC;IACxB,KAAM,MAAMC,IAAI,IAAIX,KAAK,EAAG;MAC3B;AACH;AACA;AACA;AACA;MACG,IAAI;QACH,IAAAY,kCAAgB,EAAED,IAAI,EAAEL,YAAa,CAAC;QACtC,IAAAO,gDAAuB,EACtBF,IAAI,EACJJ,MAAM,CAACO,WAAW,CAAC,CAAC,CAACC,gBACtB,CAAC;MACF,CAAC,CAAC,OAAQC,KAAc,EAAG;QAC1Bb,OAAO,GAAIa,KAAe,CAAC;QAC3B;MACD;MAEA,IAAI;QACH,IAAAC,kCAAgB,EACfN,IAAI,EACJJ,MAAM,CAACO,WAAW,CAAC,CAAC,CAACI,iBACtB,CAAC;MACF,CAAC,CAAC,OAAQF,KAAc,EAAG;QAC1Bb,OAAO,GAAIa,KAAe,CAAC;QAC3B;MACD;MAEAR,QAAQ,CAACW,OAAO,CAAE;QACjBR,IAAI;QACJF,OAAO;QACPR,QAAQ;QACRC,SAAS;QACTE,cAAc;QACdD,OAAO;QACPE;MACD,CAAE,CAAC;IACJ;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASe,UAAUA,CAAEC,EAAe,EAAEL,KAAY,EAAEM,MAAM,GAAG,KAAK,EAAG;EAC3E,OAAO,OAAQ;IAAEf,MAAM;IAAEC;EAAoB,CAAC,KAAM;IACnD,MAAMe,IAAI,GAAGhB,MAAM,CAACiB,OAAO,CAAEH,EAAG,CAAC;IAEjC,IAAK,CAAEE,IAAI,EAAG;MACb;AACH;AACA;AACA;AACA;AACA;AACA;MACG;IACD;IAEAA,IAAI,CAACE,eAAe,EAAEC,KAAK,CAAC,CAAC;IAE7B,IAAK,CAAEJ,MAAM,EAAG;MACf,MAAM;QAAEnB;MAAQ,CAAC,GAAGoB,IAAI;MACxBpB,OAAO,GAAIa,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,IAAIW,KAAK,CAAE,kBAAmB,CAAE,CAAC;MACrD,IAAK,CAAExB,OAAO,IAAIa,KAAK,EAAG;QACzB;QACA;QACAY,OAAO,CAACZ,KAAK,CAAE,kBAAkB,EAAEA,KAAM,CAAC;MAC3C;IACD;IAEAR,QAAQ,CAAkB;MACzBqB,IAAI,EAAEC,WAAI,CAACC,MAAM;MACjBV,EAAE;MACFL;IACD,CAAE,CAAC;IACHR,QAAQ,CAACwB,UAAU,CAAEX,EAAG,CAAC;IACzBb,QAAQ,CAACyB,cAAc,CAAEZ,EAAG,CAAC;;IAE7B;IACA,IAAKE,IAAI,CAACd,OAAO,IAAIF,MAAM,CAAC2B,eAAe,CAAEX,IAAI,CAACd,OAAQ,CAAC,EAAG;MAC7Dc,IAAI,CAACnB,cAAc,GAAG,CAAC;IACxB;EACD,CAAC;AACF","ignoreList":[]}