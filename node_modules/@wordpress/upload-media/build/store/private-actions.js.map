{"version":3,"names":["_uuid","require","_blob","_utils","_stubFile","_types","addItem","file","fileOrBlob","batchId","onChange","onSuccess","onBatchSuccess","onError","additionalData","sourceUrl","sourceAttachmentId","abortController","operations","dispatch","itemId","uuidv4","convertBlobToFile","blobUrl","StubFile","createBlobURL","type","Type","CacheBlobUrl","id","Add","item","status","ItemStatus","Processing","sourceFile","cloneFile","attachment","url","convert_format","AbortController","Array","isArray","OperationType","Prepare","processItem","select","isPaused","getItem","operation","revokeBlobUrls","isBatchUploaded","OperationStart","prepareItem","Upload","uploadItem","pauseQueue","PauseQueue","resumeQueue","ResumeQueue","getAllItems","removeItem","Remove","finishOperation","updates","OperationFinish","AddOperations","getSettings","mediaUpload","filesList","signal","onFileChange","isBlobURL","error","cancelItem","blobUrls","getBlobUrls","revokeBlobURL","RevokeBlobUrls","updateSettings","settings","UpdateSettings"],"sources":["@wordpress/upload-media/src/store/private-actions.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport { createBlobURL, isBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport type { createRegistry } from '@wordpress/data';\n\ntype WPDataRegistry = ReturnType< typeof createRegistry >;\n\n/**\n * Internal dependencies\n */\nimport { cloneFile, convertBlobToFile } from '../utils';\nimport { StubFile } from '../stub-file';\nimport type {\n\tAddAction,\n\tAdditionalData,\n\tAddOperationsAction,\n\tBatchId,\n\tCacheBlobUrlAction,\n\tOnBatchSuccessHandler,\n\tOnChangeHandler,\n\tOnErrorHandler,\n\tOnSuccessHandler,\n\tOperation,\n\tOperationFinishAction,\n\tOperationStartAction,\n\tPauseQueueAction,\n\tQueueItem,\n\tQueueItemId,\n\tResumeQueueAction,\n\tRevokeBlobUrlsAction,\n\tSettings,\n\tState,\n\tUpdateSettingsAction,\n} from './types';\nimport { ItemStatus, OperationType, Type } from './types';\nimport type { cancelItem } from './actions';\n\ntype ActionCreators = {\n\tcancelItem: typeof cancelItem;\n\taddItem: typeof addItem;\n\tremoveItem: typeof removeItem;\n\tprepareItem: typeof prepareItem;\n\tprocessItem: typeof processItem;\n\tfinishOperation: typeof finishOperation;\n\tuploadItem: typeof uploadItem;\n\trevokeBlobUrls: typeof revokeBlobUrls;\n\t< T = Record< string, unknown > >( args: T ): void;\n};\n\ntype AllSelectors = typeof import('./selectors') &\n\ttypeof import('./private-selectors');\ntype CurriedState< F > = F extends ( state: State, ...args: infer P ) => infer R\n\t? ( ...args: P ) => R\n\t: F;\ntype Selectors = {\n\t[ key in keyof AllSelectors ]: CurriedState< AllSelectors[ key ] >;\n};\n\ntype ThunkArgs = {\n\tselect: Selectors;\n\tdispatch: ActionCreators;\n\tregistry: WPDataRegistry;\n};\n\ninterface AddItemArgs {\n\t// It should always be a File, but some consumers might still pass Blobs only.\n\tfile: File | Blob;\n\tbatchId?: BatchId;\n\tonChange?: OnChangeHandler;\n\tonSuccess?: OnSuccessHandler;\n\tonError?: OnErrorHandler;\n\tonBatchSuccess?: OnBatchSuccessHandler;\n\tadditionalData?: AdditionalData;\n\tsourceUrl?: string;\n\tsourceAttachmentId?: number;\n\tabortController?: AbortController;\n\toperations?: Operation[];\n}\n\n/**\n * Adds a new item to the upload queue.\n *\n * @param $0\n * @param $0.file                 File\n * @param [$0.batchId]            Batch ID.\n * @param [$0.onChange]           Function called each time a file or a temporary representation of the file is available.\n * @param [$0.onSuccess]          Function called after the file is uploaded.\n * @param [$0.onBatchSuccess]     Function called after a batch of files is uploaded.\n * @param [$0.onError]            Function called when an error happens.\n * @param [$0.additionalData]     Additional data to include in the request.\n * @param [$0.sourceUrl]          Source URL. Used when importing a file from a URL or optimizing an existing file.\n * @param [$0.sourceAttachmentId] Source attachment ID. Used when optimizing an existing file for example.\n * @param [$0.abortController]    Abort controller for upload cancellation.\n * @param [$0.operations]         List of operations to perform. Defaults to automatically determined list, based on the file.\n */\nexport function addItem( {\n\tfile: fileOrBlob,\n\tbatchId,\n\tonChange,\n\tonSuccess,\n\tonBatchSuccess,\n\tonError,\n\tadditionalData = {} as AdditionalData,\n\tsourceUrl,\n\tsourceAttachmentId,\n\tabortController,\n\toperations,\n}: AddItemArgs ) {\n\treturn async ( { dispatch }: ThunkArgs ) => {\n\t\tconst itemId = uuidv4();\n\n\t\t// Hardening in case a Blob is passed instead of a File.\n\t\t// See https://github.com/WordPress/gutenberg/pull/65693 for an example.\n\t\tconst file = convertBlobToFile( fileOrBlob );\n\n\t\tlet blobUrl;\n\n\t\t// StubFile could be coming from addItemFromUrl().\n\t\tif ( ! ( file instanceof StubFile ) ) {\n\t\t\tblobUrl = createBlobURL( file );\n\t\t\tdispatch< CacheBlobUrlAction >( {\n\t\t\t\ttype: Type.CacheBlobUrl,\n\t\t\t\tid: itemId,\n\t\t\t\tblobUrl,\n\t\t\t} );\n\t\t}\n\n\t\tdispatch< AddAction >( {\n\t\t\ttype: Type.Add,\n\t\t\titem: {\n\t\t\t\tid: itemId,\n\t\t\t\tbatchId,\n\t\t\t\tstatus: ItemStatus.Processing,\n\t\t\t\tsourceFile: cloneFile( file ),\n\t\t\t\tfile,\n\t\t\t\tattachment: {\n\t\t\t\t\turl: blobUrl,\n\t\t\t\t},\n\t\t\t\tadditionalData: {\n\t\t\t\t\tconvert_format: false,\n\t\t\t\t\t...additionalData,\n\t\t\t\t},\n\t\t\t\tonChange,\n\t\t\t\tonSuccess,\n\t\t\t\tonBatchSuccess,\n\t\t\t\tonError,\n\t\t\t\tsourceUrl,\n\t\t\t\tsourceAttachmentId,\n\t\t\t\tabortController: abortController || new AbortController(),\n\t\t\t\toperations: Array.isArray( operations )\n\t\t\t\t\t? operations\n\t\t\t\t\t: [ OperationType.Prepare ],\n\t\t\t},\n\t\t} );\n\n\t\tdispatch.processItem( itemId );\n\t};\n}\n\n/**\n * Processes a single item in the queue.\n *\n * Runs the next operation in line and invokes any callbacks.\n *\n * @param id Item ID.\n */\nexport function processItem( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tif ( select.isPaused() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst item = select.getItem( id ) as QueueItem;\n\n\t\tconst { attachment, onChange, onSuccess, onBatchSuccess, batchId } =\n\t\t\titem;\n\n\t\tconst operation = Array.isArray( item.operations?.[ 0 ] )\n\t\t\t? item.operations[ 0 ][ 0 ]\n\t\t\t: item.operations?.[ 0 ];\n\n\t\tif ( attachment ) {\n\t\t\tonChange?.( [ attachment ] );\n\t\t}\n\n\t\t/*\n\t\t If there are no more operations, the item can be removed from the queue,\n\t\t but only if there are no thumbnails still being side-loaded,\n\t\t or if itself is a side-loaded item.\n\t\t*/\n\n\t\tif ( ! operation ) {\n\t\t\tif ( attachment ) {\n\t\t\t\tonSuccess?.( [ attachment ] );\n\t\t\t}\n\n\t\t\t// dispatch.removeItem( id );\n\t\t\tdispatch.revokeBlobUrls( id );\n\n\t\t\tif ( batchId && select.isBatchUploaded( batchId ) ) {\n\t\t\t\tonBatchSuccess?.();\n\t\t\t}\n\n\t\t\t/*\n\t\t\t At this point we are dealing with a parent whose children haven't fully uploaded yet.\n\t\t\t Do nothing and let the removal happen once the last side-loaded item finishes.\n\t\t\t */\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! operation ) {\n\t\t\t// This shouldn't really happen.\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch< OperationStartAction >( {\n\t\t\ttype: Type.OperationStart,\n\t\t\tid,\n\t\t\toperation,\n\t\t} );\n\n\t\tswitch ( operation ) {\n\t\t\tcase OperationType.Prepare:\n\t\t\t\tdispatch.prepareItem( item.id );\n\t\t\t\tbreak;\n\n\t\t\tcase OperationType.Upload:\n\t\t\t\tdispatch.uploadItem( id );\n\t\t\t\tbreak;\n\t\t}\n\t};\n}\n\n/**\n * Returns an action object that pauses all processing in the queue.\n *\n * Useful for testing purposes.\n *\n * @return Action object.\n */\nexport function pauseQueue(): PauseQueueAction {\n\treturn {\n\t\ttype: Type.PauseQueue,\n\t};\n}\n\n/**\n * Resumes all processing in the queue.\n *\n * Dispatches an action object for resuming the queue itself,\n * and triggers processing for each remaining item in the queue individually.\n */\nexport function resumeQueue() {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tdispatch< ResumeQueueAction >( {\n\t\t\ttype: Type.ResumeQueue,\n\t\t} );\n\n\t\tfor ( const item of select.getAllItems() ) {\n\t\t\tdispatch.processItem( item.id );\n\t\t}\n\t};\n}\n\n/**\n * Removes a specific item from the queue.\n *\n * @param id Item ID.\n */\nexport function removeItem( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst item = select.getItem( id );\n\t\tif ( ! item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: Type.Remove,\n\t\t\tid,\n\t\t} );\n\t};\n}\n\n/**\n * Finishes an operation for a given item ID and immediately triggers processing the next one.\n *\n * @param id      Item ID.\n * @param updates Updated item data.\n */\nexport function finishOperation(\n\tid: QueueItemId,\n\tupdates: Partial< QueueItem >\n) {\n\treturn async ( { dispatch }: ThunkArgs ) => {\n\t\tdispatch< OperationFinishAction >( {\n\t\t\ttype: Type.OperationFinish,\n\t\t\tid,\n\t\t\titem: updates,\n\t\t} );\n\n\t\tdispatch.processItem( id );\n\t};\n}\n\n/**\n * Prepares an item for initial processing.\n *\n * Determines the list of operations to perform for a given image,\n * depending on its media type.\n *\n * For example, HEIF images first need to be converted, resized,\n * compressed, and then uploaded.\n *\n * Or videos need to be compressed, and then need poster generation\n * before upload.\n *\n * @param id Item ID.\n */\nexport function prepareItem( id: QueueItemId ) {\n\treturn async ( { dispatch }: ThunkArgs ) => {\n\t\tconst operations: Operation[] = [ OperationType.Upload ];\n\n\t\tdispatch< AddOperationsAction >( {\n\t\t\ttype: Type.AddOperations,\n\t\t\tid,\n\t\t\toperations,\n\t\t} );\n\n\t\tdispatch.finishOperation( id, {} );\n\t};\n}\n\n/**\n * Uploads an item to the server.\n *\n * @param id Item ID.\n */\nexport function uploadItem( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst item = select.getItem( id ) as QueueItem;\n\n\t\tselect.getSettings().mediaUpload( {\n\t\t\tfilesList: [ item.file ],\n\t\t\tadditionalData: item.additionalData,\n\t\t\tsignal: item.abortController?.signal,\n\t\t\tonFileChange: ( [ attachment ] ) => {\n\t\t\t\tif ( ! isBlobURL( attachment.url ) ) {\n\t\t\t\t\tdispatch.finishOperation( id, {\n\t\t\t\t\t\tattachment,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t},\n\t\t\tonSuccess: ( [ attachment ] ) => {\n\t\t\t\tdispatch.finishOperation( id, {\n\t\t\t\t\tattachment,\n\t\t\t\t} );\n\t\t\t},\n\t\t\tonError: ( error ) => {\n\t\t\t\tdispatch.cancelItem( id, error );\n\t\t\t},\n\t\t} );\n\t};\n}\n\n/**\n * Revokes all blob URLs for a given item, freeing up memory.\n *\n * @param id Item ID.\n */\nexport function revokeBlobUrls( id: QueueItemId ) {\n\treturn async ( { select, dispatch }: ThunkArgs ) => {\n\t\tconst blobUrls = select.getBlobUrls( id );\n\n\t\tfor ( const blobUrl of blobUrls ) {\n\t\t\trevokeBlobURL( blobUrl );\n\t\t}\n\n\t\tdispatch< RevokeBlobUrlsAction >( {\n\t\t\ttype: Type.RevokeBlobUrls,\n\t\t\tid,\n\t\t} );\n\t};\n}\n\n/**\n * Returns an action object that pauses all processing in the queue.\n *\n * Useful for testing purposes.\n *\n * @param settings\n * @return Action object.\n */\nexport function updateSettings(\n\tsettings: Partial< Settings >\n): UpdateSettingsAction {\n\treturn {\n\t\ttype: Type.UpdateSettings,\n\t\tsettings,\n\t};\n}\n"],"mappings":"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","ignoreList":[]}