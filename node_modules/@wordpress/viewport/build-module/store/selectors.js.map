{"version":3,"names":["isViewportMatch","state","query","indexOf"],"sources":["@wordpress/viewport/src/store/selectors.js"],"sourcesContent":["/**\n * Returns true if the viewport matches the given query, or false otherwise.\n *\n * @param {Object} state Viewport state object.\n * @param {string} query Query string. Includes operator and breakpoint name,\n *                       space separated. Operator defaults to >=.\n *\n * @example\n *\n * ```js\n * import { store as viewportStore } from '@wordpress/viewport';\n * import { useSelect } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const isMobile = useSelect(\n *         ( select ) => select( viewportStore ).isViewportMatch( '< small' ),\n *         []\n *     );\n *\n *     return isMobile ? (\n *         <div>{ __( 'Mobile' ) }</div>\n *     ) : (\n *         <div>{ __( 'Not Mobile' ) }</div>\n *     );\n * };\n * ```\n *\n * @return {boolean} Whether viewport matches query.\n */\nexport function isViewportMatch( state, query ) {\n\t// Default to `>=` if no operator is present.\n\tif ( query.indexOf( ' ' ) === -1 ) {\n\t\tquery = '>= ' + query;\n\t}\n\n\treturn !! state[ query ];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAAEC,KAAK,EAAEC,KAAK,EAAG;EAC/C;EACA,IAAKA,KAAK,CAACC,OAAO,CAAE,GAAI,CAAC,KAAK,CAAC,CAAC,EAAG;IAClCD,KAAK,GAAG,KAAK,GAAGA,KAAK;EACtB;EAEA,OAAO,CAAC,CAAED,KAAK,CAAEC,KAAK,CAAE;AACzB","ignoreList":[]}