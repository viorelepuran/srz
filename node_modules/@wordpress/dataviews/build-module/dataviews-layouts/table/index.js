/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { Spinner } from '@wordpress/components';
import { useEffect, useId, useRef, useState } from '@wordpress/element';

/**
 * Internal dependencies
 */
import DataViewsSelectionCheckbox from '../../components/dataviews-selection-checkbox';
import ItemActions from '../../components/dataviews-item-actions';
import { sortValues } from '../../constants';
import { useSomeItemHasAPossibleBulkAction, useHasAPossibleBulkAction, BulkSelectionCheckbox } from '../../components/dataviews-bulk-actions';
import ColumnHeaderMenu from './column-header-menu';
import ColumnPrimary from './column-primary';
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
function TableColumnField({
  item,
  fields,
  column
}) {
  const field = fields.find(f => f.id === column);
  if (!field) {
    return null;
  }
  return /*#__PURE__*/_jsx("div", {
    className: "dataviews-view-table__cell-content-wrapper",
    children: /*#__PURE__*/_jsx(field.render, {
      item
    })
  });
}
function TableRow({
  hasBulkActions,
  item,
  level,
  actions,
  fields,
  id,
  view,
  titleField,
  mediaField,
  descriptionField,
  selection,
  getItemId,
  isItemClickable,
  onClickItem,
  onChangeSelection
}) {
  var _view$fields;
  const hasPossibleBulkAction = useHasAPossibleBulkAction(actions, item);
  const isSelected = hasPossibleBulkAction && selection.includes(id);
  const [isHovered, setIsHovered] = useState(false);
  const {
    showTitle = true,
    showMedia = true,
    showDescription = true
  } = view;
  const handleMouseEnter = () => {
    setIsHovered(true);
  };
  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  // Will be set to true if `onTouchStart` fires. This happens before
  // `onClick` and can be used to exclude touchscreen devices from certain
  // behaviours.
  const isTouchDeviceRef = useRef(false);
  const columns = (_view$fields = view.fields) !== null && _view$fields !== void 0 ? _view$fields : [];
  const hasPrimaryColumn = titleField && showTitle || mediaField && showMedia || descriptionField && showDescription;
  return /*#__PURE__*/_jsxs("tr", {
    className: clsx('dataviews-view-table__row', {
      'is-selected': hasPossibleBulkAction && isSelected,
      'is-hovered': isHovered,
      'has-bulk-actions': hasPossibleBulkAction
    }),
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onTouchStart: () => {
      isTouchDeviceRef.current = true;
    },
    onClick: () => {
      if (!hasPossibleBulkAction) {
        return;
      }
      if (!isTouchDeviceRef.current && document.getSelection()?.type !== 'Range') {
        onChangeSelection(selection.includes(id) ? selection.filter(itemId => id !== itemId) : [id]);
      }
    },
    children: [hasBulkActions && /*#__PURE__*/_jsx("td", {
      className: "dataviews-view-table__checkbox-column",
      children: /*#__PURE__*/_jsx("div", {
        className: "dataviews-view-table__cell-content-wrapper",
        children: /*#__PURE__*/_jsx(DataViewsSelectionCheckbox, {
          item: item,
          selection: selection,
          onChangeSelection: onChangeSelection,
          getItemId: getItemId,
          titleField: titleField,
          disabled: !hasPossibleBulkAction
        })
      })
    }), hasPrimaryColumn && /*#__PURE__*/_jsx("td", {
      children: /*#__PURE__*/_jsx(ColumnPrimary, {
        item: item,
        level: level,
        titleField: showTitle ? titleField : undefined,
        mediaField: showMedia ? mediaField : undefined,
        descriptionField: showDescription ? descriptionField : undefined,
        isItemClickable: isItemClickable,
        onClickItem: onClickItem
      })
    }), columns.map(column => {
      var _view$layout$styles$c;
      // Explicit picks the supported styles.
      const {
        width,
        maxWidth,
        minWidth
      } = (_view$layout$styles$c = view.layout?.styles?.[column]) !== null && _view$layout$styles$c !== void 0 ? _view$layout$styles$c : {};
      return /*#__PURE__*/_jsx("td", {
        style: {
          width,
          maxWidth,
          minWidth
        },
        children: /*#__PURE__*/_jsx(TableColumnField, {
          fields: fields,
          item: item,
          column: column
        })
      }, column);
    }), !!actions?.length &&
    /*#__PURE__*/
    // Disable reason: we are not making the element interactive,
    // but preventing any click events from bubbling up to the
    // table row. This allows us to add a click handler to the row
    // itself (to toggle row selection) without erroneously
    // intercepting click events from ItemActions.
    /* eslint-disable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */
    _jsx("td", {
      className: "dataviews-view-table__actions-column",
      onClick: e => e.stopPropagation(),
      children: /*#__PURE__*/_jsx(ItemActions, {
        item: item,
        actions: actions
      })
    })
    /* eslint-enable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */]
  });
}
function ViewTable({
  actions,
  data,
  fields,
  getItemId,
  getItemLevel,
  isLoading = false,
  onChangeView,
  onChangeSelection,
  selection,
  setOpenedFilter,
  onClickItem,
  isItemClickable,
  view
}) {
  var _view$fields2;
  const headerMenuRefs = useRef(new Map());
  const headerMenuToFocusRef = useRef();
  const [nextHeaderMenuToFocus, setNextHeaderMenuToFocus] = useState();
  const hasBulkActions = useSomeItemHasAPossibleBulkAction(actions, data);
  useEffect(() => {
    if (headerMenuToFocusRef.current) {
      headerMenuToFocusRef.current.focus();
      headerMenuToFocusRef.current = undefined;
    }
  });
  const tableNoticeId = useId();
  if (nextHeaderMenuToFocus) {
    // If we need to force focus, we short-circuit rendering here
    // to prevent any additional work while we handle that.
    // Clearing out the focus directive is necessary to make sure
    // future renders don't cause unexpected focus jumps.
    headerMenuToFocusRef.current = nextHeaderMenuToFocus;
    setNextHeaderMenuToFocus(undefined);
    return;
  }
  const onHide = field => {
    const hidden = headerMenuRefs.current.get(field.id);
    const fallback = hidden ? headerMenuRefs.current.get(hidden.fallback) : undefined;
    setNextHeaderMenuToFocus(fallback?.node);
  };
  const hasData = !!data?.length;
  const titleField = fields.find(field => field.id === view.titleField);
  const mediaField = fields.find(field => field.id === view.mediaField);
  const descriptionField = fields.find(field => field.id === view.descriptionField);
  const {
    showTitle = true,
    showMedia = true,
    showDescription = true
  } = view;
  const hasPrimaryColumn = titleField && showTitle || mediaField && showMedia || descriptionField && showDescription;
  const columns = (_view$fields2 = view.fields) !== null && _view$fields2 !== void 0 ? _view$fields2 : [];
  const headerMenuRef = (column, index) => node => {
    if (node) {
      headerMenuRefs.current.set(column, {
        node,
        fallback: columns[index > 0 ? index - 1 : 1]
      });
    } else {
      headerMenuRefs.current.delete(column);
    }
  };
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsxs("table", {
      className: clsx('dataviews-view-table', {
        [`has-${view.layout?.density}-density`]: view.layout?.density && ['compact', 'comfortable'].includes(view.layout.density)
      }),
      "aria-busy": isLoading,
      "aria-describedby": tableNoticeId,
      children: [/*#__PURE__*/_jsx("thead", {
        children: /*#__PURE__*/_jsxs("tr", {
          className: "dataviews-view-table__row",
          children: [hasBulkActions && /*#__PURE__*/_jsx("th", {
            className: "dataviews-view-table__checkbox-column",
            scope: "col",
            children: /*#__PURE__*/_jsx(BulkSelectionCheckbox, {
              selection: selection,
              onChangeSelection: onChangeSelection,
              data: data,
              actions: actions,
              getItemId: getItemId
            })
          }), hasPrimaryColumn && /*#__PURE__*/_jsx("th", {
            scope: "col",
            children: titleField && /*#__PURE__*/_jsx(ColumnHeaderMenu, {
              ref: headerMenuRef(titleField.id, 0),
              fieldId: titleField.id,
              view: view,
              fields: fields,
              onChangeView: onChangeView,
              onHide: onHide,
              setOpenedFilter: setOpenedFilter,
              canMove: false
            })
          }), columns.map((column, index) => {
            var _view$layout$styles$c2;
            // Explicit picks the supported styles.
            const {
              width,
              maxWidth,
              minWidth
            } = (_view$layout$styles$c2 = view.layout?.styles?.[column]) !== null && _view$layout$styles$c2 !== void 0 ? _view$layout$styles$c2 : {};
            return /*#__PURE__*/_jsx("th", {
              style: {
                width,
                maxWidth,
                minWidth
              },
              "aria-sort": view.sort?.direction && view.sort?.field === column ? sortValues[view.sort.direction] : undefined,
              scope: "col",
              children: /*#__PURE__*/_jsx(ColumnHeaderMenu, {
                ref: headerMenuRef(column, index),
                fieldId: column,
                view: view,
                fields: fields,
                onChangeView: onChangeView,
                onHide: onHide,
                setOpenedFilter: setOpenedFilter
              })
            }, column);
          }), !!actions?.length && /*#__PURE__*/_jsx("th", {
            className: "dataviews-view-table__actions-column",
            children: /*#__PURE__*/_jsx("span", {
              className: "dataviews-view-table-header",
              children: __('Actions')
            })
          })]
        })
      }), /*#__PURE__*/_jsx("tbody", {
        children: hasData && data.map((item, index) => /*#__PURE__*/_jsx(TableRow, {
          item: item,
          level: view.showLevels && typeof getItemLevel === 'function' ? getItemLevel(item) : undefined,
          hasBulkActions: hasBulkActions,
          actions: actions,
          fields: fields,
          id: getItemId(item) || index.toString(),
          view: view,
          titleField: titleField,
          mediaField: mediaField,
          descriptionField: descriptionField,
          selection: selection,
          getItemId: getItemId,
          onChangeSelection: onChangeSelection,
          onClickItem: onClickItem,
          isItemClickable: isItemClickable
        }, getItemId(item)))
      })]
    }), /*#__PURE__*/_jsx("div", {
      className: clsx({
        'dataviews-loading': isLoading,
        'dataviews-no-results': !hasData && !isLoading
      }),
      id: tableNoticeId,
      children: !hasData && /*#__PURE__*/_jsx("p", {
        children: isLoading ? /*#__PURE__*/_jsx(Spinner, {}) : __('No results')
      })
    })]
  });
}
export default ViewTable;
//# sourceMappingURL=index.js.map