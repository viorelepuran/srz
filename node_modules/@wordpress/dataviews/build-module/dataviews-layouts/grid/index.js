/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { __experimentalGrid as Grid, __experimentalHStack as HStack, __experimentalVStack as VStack, Spinner, Flex, FlexItem, privateApis as componentsPrivateApis } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useInstanceId } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import { unlock } from '../../lock-unlock';
import ItemActions from '../../components/dataviews-item-actions';
import DataViewsSelectionCheckbox from '../../components/dataviews-selection-checkbox';
import { useHasAPossibleBulkAction, useSomeItemHasAPossibleBulkAction } from '../../components/dataviews-bulk-actions';
import getClickableItemProps from '../utils/get-clickable-item-props';
import { useUpdatedPreviewSizeOnViewportChange } from './preview-size-picker';
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
const {
  Badge
} = unlock(componentsPrivateApis);
function GridItem({
  view,
  selection,
  onChangeSelection,
  onClickItem,
  isItemClickable,
  getItemId,
  item,
  actions,
  mediaField,
  titleField,
  descriptionField,
  regularFields,
  badgeFields,
  hasBulkActions
}) {
  const {
    showTitle = true,
    showMedia = true,
    showDescription = true
  } = view;
  const hasBulkAction = useHasAPossibleBulkAction(actions, item);
  const id = getItemId(item);
  const instanceId = useInstanceId(GridItem);
  const isSelected = selection.includes(id);
  const renderedMediaField = mediaField?.render ? /*#__PURE__*/_jsx(mediaField.render, {
    item: item
  }) : null;
  const renderedTitleField = showTitle && titleField?.render ? /*#__PURE__*/_jsx(titleField.render, {
    item: item
  }) : null;
  const clickableMediaItemProps = getClickableItemProps({
    item,
    isItemClickable,
    onClickItem,
    className: 'dataviews-view-grid__media'
  });
  const clickableTitleItemProps = getClickableItemProps({
    item,
    isItemClickable,
    onClickItem,
    className: 'dataviews-view-grid__title-field dataviews-title-field'
  });
  let mediaA11yProps;
  let titleA11yProps;
  if (isItemClickable(item) && onClickItem) {
    if (renderedTitleField) {
      mediaA11yProps = {
        'aria-labelledby': `dataviews-view-grid__title-field-${instanceId}`
      };
      titleA11yProps = {
        id: `dataviews-view-grid__title-field-${instanceId}`
      };
    } else {
      mediaA11yProps = {
        'aria-label': __('Navigate to item')
      };
    }
  }
  return /*#__PURE__*/_jsxs(VStack, {
    spacing: 0,
    className: clsx('dataviews-view-grid__card', {
      'is-selected': hasBulkAction && isSelected
    }),
    onClickCapture: event => {
      if (event.ctrlKey || event.metaKey) {
        event.stopPropagation();
        event.preventDefault();
        if (!hasBulkAction) {
          return;
        }
        onChangeSelection(selection.includes(id) ? selection.filter(itemId => id !== itemId) : [...selection, id]);
      }
    },
    children: [showMedia && renderedMediaField && /*#__PURE__*/_jsx("div", {
      ...clickableMediaItemProps,
      ...mediaA11yProps,
      children: renderedMediaField
    }), hasBulkActions && showMedia && renderedMediaField && /*#__PURE__*/_jsx(DataViewsSelectionCheckbox, {
      item: item,
      selection: selection,
      onChangeSelection: onChangeSelection,
      getItemId: getItemId,
      titleField: titleField,
      disabled: !hasBulkAction
    }), /*#__PURE__*/_jsxs(HStack, {
      justify: "space-between",
      className: "dataviews-view-grid__title-actions",
      children: [/*#__PURE__*/_jsx("div", {
        ...clickableTitleItemProps,
        ...titleA11yProps,
        children: renderedTitleField
      }), !!actions?.length && /*#__PURE__*/_jsx(ItemActions, {
        item: item,
        actions: actions,
        isCompact: true
      })]
    }), /*#__PURE__*/_jsxs(VStack, {
      spacing: 1,
      children: [showDescription && descriptionField?.render && /*#__PURE__*/_jsx(descriptionField.render, {
        item: item
      }), !!badgeFields?.length && /*#__PURE__*/_jsx(HStack, {
        className: "dataviews-view-grid__badge-fields",
        spacing: 2,
        wrap: true,
        alignment: "top",
        justify: "flex-start",
        children: badgeFields.map(field => {
          return /*#__PURE__*/_jsx(Badge, {
            className: "dataviews-view-grid__field-value",
            children: /*#__PURE__*/_jsx(field.render, {
              item: item
            })
          }, field.id);
        })
      }), !!regularFields?.length && /*#__PURE__*/_jsx(VStack, {
        className: "dataviews-view-grid__fields",
        spacing: 1,
        children: regularFields.map(field => {
          return /*#__PURE__*/_jsx(Flex, {
            className: "dataviews-view-grid__field",
            gap: 1,
            justify: "flex-start",
            expanded: true,
            style: {
              height: 'auto'
            },
            direction: "row",
            children: /*#__PURE__*/_jsxs(_Fragment, {
              children: [/*#__PURE__*/_jsx(FlexItem, {
                className: "dataviews-view-grid__field-name",
                children: field.header
              }), /*#__PURE__*/_jsx(FlexItem, {
                className: "dataviews-view-grid__field-value",
                style: {
                  maxHeight: 'none'
                },
                children: /*#__PURE__*/_jsx(field.render, {
                  item: item
                })
              })]
            })
          }, field.id);
        })
      })]
    })]
  }, id);
}
export default function ViewGrid({
  actions,
  data,
  fields,
  getItemId,
  isLoading,
  onChangeSelection,
  onClickItem,
  isItemClickable,
  selection,
  view
}) {
  var _view$fields;
  const titleField = fields.find(field => field.id === view?.titleField);
  const mediaField = fields.find(field => field.id === view?.mediaField);
  const descriptionField = fields.find(field => field.id === view?.descriptionField);
  const otherFields = (_view$fields = view.fields) !== null && _view$fields !== void 0 ? _view$fields : [];
  const {
    regularFields,
    badgeFields
  } = otherFields.reduce((accumulator, fieldId) => {
    const field = fields.find(f => f.id === fieldId);
    if (!field) {
      return accumulator;
    }
    // If the field is a badge field, add it to the badgeFields array
    // otherwise add it to the rest visibleFields array.
    const key = view.layout?.badgeFields?.includes(fieldId) ? 'badgeFields' : 'regularFields';
    accumulator[key].push(field);
    return accumulator;
  }, {
    regularFields: [],
    badgeFields: []
  });
  const hasData = !!data?.length;
  const updatedPreviewSize = useUpdatedPreviewSizeOnViewportChange();
  const hasBulkActions = useSomeItemHasAPossibleBulkAction(actions, data);
  const usedPreviewSize = updatedPreviewSize || view.layout?.previewSize;
  const gridStyle = usedPreviewSize ? {
    gridTemplateColumns: `repeat(${usedPreviewSize}, minmax(0, 1fr))`
  } : {};
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [hasData && /*#__PURE__*/_jsx(Grid, {
      gap: 8,
      columns: 2,
      alignment: "top",
      className: "dataviews-view-grid",
      style: gridStyle,
      "aria-busy": isLoading,
      children: data.map(item => {
        return /*#__PURE__*/_jsx(GridItem, {
          view: view,
          selection: selection,
          onChangeSelection: onChangeSelection,
          onClickItem: onClickItem,
          isItemClickable: isItemClickable,
          getItemId: getItemId,
          item: item,
          actions: actions,
          mediaField: mediaField,
          titleField: titleField,
          descriptionField: descriptionField,
          regularFields: regularFields,
          badgeFields: badgeFields,
          hasBulkActions: hasBulkActions
        }, getItemId(item));
      })
    }), !hasData && /*#__PURE__*/_jsx("div", {
      className: clsx({
        'dataviews-loading': isLoading,
        'dataviews-no-results': !isLoading
      }),
      children: /*#__PURE__*/_jsx("p", {
        children: isLoading ? /*#__PURE__*/_jsx(Spinner, {}) : __('No results')
      })
    })]
  });
}
//# sourceMappingURL=index.js.map