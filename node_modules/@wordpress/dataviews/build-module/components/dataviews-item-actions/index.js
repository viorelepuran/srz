/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
import { Button, Modal, __experimentalHStack as HStack, privateApis as componentsPrivateApis } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useMemo, useState } from '@wordpress/element';
import { moreVertical } from '@wordpress/icons';
import { useRegistry } from '@wordpress/data';

/**
 * Internal dependencies
 */
import { unlock } from '../../lock-unlock';
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
const {
  Menu,
  kebabCase
} = unlock(componentsPrivateApis);
function ButtonTrigger({
  action,
  onClick,
  items
}) {
  const label = typeof action.label === 'string' ? action.label : action.label(items);
  return /*#__PURE__*/_jsx(Button, {
    label: label,
    icon: action.icon,
    disabled: !!action.disabled,
    accessibleWhenDisabled: true,
    isDestructive: action.isDestructive,
    size: "compact",
    onClick: onClick
  });
}
function MenuItemTrigger({
  action,
  onClick,
  items
}) {
  const label = typeof action.label === 'string' ? action.label : action.label(items);
  return /*#__PURE__*/_jsx(Menu.Item, {
    disabled: action.disabled,
    onClick: onClick,
    children: /*#__PURE__*/_jsx(Menu.ItemLabel, {
      children: label
    })
  });
}
export function ActionModal({
  action,
  items,
  closeModal
}) {
  var _action$modalFocusOnM;
  const label = typeof action.label === 'string' ? action.label : action.label(items);
  return /*#__PURE__*/_jsx(Modal, {
    title: action.modalHeader || label,
    __experimentalHideHeader: !!action.hideModalHeader,
    onRequestClose: closeModal,
    focusOnMount: (_action$modalFocusOnM = action.modalFocusOnMount) !== null && _action$modalFocusOnM !== void 0 ? _action$modalFocusOnM : true,
    size: action.modalSize || 'medium',
    overlayClassName: `dataviews-action-modal dataviews-action-modal__${kebabCase(action.id)}`,
    children: /*#__PURE__*/_jsx(action.RenderModal, {
      items: items,
      closeModal: closeModal
    })
  });
}
export function ActionsMenuGroup({
  actions,
  item,
  registry,
  setActiveModalAction
}) {
  return /*#__PURE__*/_jsx(Menu.Group, {
    children: actions.map(action => /*#__PURE__*/_jsx(MenuItemTrigger, {
      action: action,
      onClick: () => {
        if ('RenderModal' in action) {
          setActiveModalAction(action);
          return;
        }
        action.callback([item], {
          registry
        });
      },
      items: [item]
    }, action.id))
  });
}
export default function ItemActions({
  item,
  actions,
  isCompact
}) {
  const registry = useRegistry();
  const {
    primaryActions,
    eligibleActions
  } = useMemo(() => {
    // If an action is eligible for all items, doesn't need
    // to provide the `isEligible` function.
    const _eligibleActions = actions.filter(action => !action.isEligible || action.isEligible(item));
    const _primaryActions = _eligibleActions.filter(action => action.isPrimary && !!action.icon);
    return {
      primaryActions: _primaryActions,
      eligibleActions: _eligibleActions
    };
  }, [actions, item]);
  if (isCompact) {
    return /*#__PURE__*/_jsx(CompactItemActions, {
      item: item,
      actions: eligibleActions,
      isSmall: true,
      registry: registry
    });
  }

  // If all actions are primary, there is no need to render the dropdown.
  if (primaryActions.length === eligibleActions.length) {
    return /*#__PURE__*/_jsx(PrimaryActions, {
      item: item,
      actions: primaryActions,
      registry: registry
    });
  }
  return /*#__PURE__*/_jsxs(HStack, {
    spacing: 1,
    justify: "flex-end",
    className: "dataviews-item-actions",
    style: {
      flexShrink: '0',
      width: 'auto'
    },
    children: [/*#__PURE__*/_jsx(PrimaryActions, {
      item: item,
      actions: primaryActions,
      registry: registry
    }), /*#__PURE__*/_jsx(CompactItemActions, {
      item: item,
      actions: eligibleActions,
      registry: registry
    })]
  });
}
function CompactItemActions({
  item,
  actions,
  isSmall,
  registry
}) {
  const [activeModalAction, setActiveModalAction] = useState(null);
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsxs(Menu, {
      placement: "bottom-end",
      children: [/*#__PURE__*/_jsx(Menu.TriggerButton, {
        render: /*#__PURE__*/_jsx(Button, {
          size: isSmall ? 'small' : 'compact',
          icon: moreVertical,
          label: __('Actions'),
          accessibleWhenDisabled: true,
          disabled: !actions.length,
          className: "dataviews-all-actions-button"
        })
      }), /*#__PURE__*/_jsx(Menu.Popover, {
        children: /*#__PURE__*/_jsx(ActionsMenuGroup, {
          actions: actions,
          item: item,
          registry: registry,
          setActiveModalAction: setActiveModalAction
        })
      })]
    }), !!activeModalAction && /*#__PURE__*/_jsx(ActionModal, {
      action: activeModalAction,
      items: [item],
      closeModal: () => setActiveModalAction(null)
    })]
  });
}
function PrimaryActions({
  item,
  actions,
  registry
}) {
  const [activeModalAction, setActiveModalAction] = useState(null);
  if (!Array.isArray(actions) || actions.length === 0) {
    return null;
  }
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [actions.map(action => /*#__PURE__*/_jsx(ButtonTrigger, {
      action: action,
      onClick: () => {
        if ('RenderModal' in action) {
          setActiveModalAction(action);
          return;
        }
        action.callback([item], {
          registry
        });
      },
      items: [item]
    }, action.id)), !!activeModalAction && /*#__PURE__*/_jsx(ActionModal, {
      action: activeModalAction,
      items: [item],
      closeModal: () => setActiveModalAction(null)
    })]
  });
}
//# sourceMappingURL=index.js.map