/**
 * WordPress dependencies
 */
import { useContext, useMemo } from '@wordpress/element';
import { __experimentalHStack as HStack, __experimentalVStack as VStack, __experimentalHeading as Heading, __experimentalSpacer as Spacer } from '@wordpress/components';

/**
 * Internal dependencies
 */

import DataFormContext from '../../components/dataform-context';
import { DataFormLayout } from '../data-form-layout';
import { isCombinedField } from '../is-combined-field';
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
function Header({
  title
}) {
  return /*#__PURE__*/_jsx(VStack, {
    className: "dataforms-layouts-regular__header",
    spacing: 4,
    children: /*#__PURE__*/_jsxs(HStack, {
      alignment: "center",
      children: [/*#__PURE__*/_jsx(Heading, {
        level: 2,
        size: 13,
        children: title
      }), /*#__PURE__*/_jsx(Spacer, {})]
    })
  });
}
export default function FormRegularField({
  data,
  field,
  onChange,
  hideLabelFromVision
}) {
  var _field$labelPosition;
  const {
    fields
  } = useContext(DataFormContext);
  const form = useMemo(() => {
    if (isCombinedField(field)) {
      return {
        fields: field.children.map(child => {
          if (typeof child === 'string') {
            return {
              id: child
            };
          }
          return child;
        }),
        type: 'regular'
      };
    }
    return {
      type: 'regular',
      fields: []
    };
  }, [field]);
  if (isCombinedField(field)) {
    return /*#__PURE__*/_jsxs(_Fragment, {
      children: [!hideLabelFromVision && field.label && /*#__PURE__*/_jsx(Header, {
        title: field.label
      }), /*#__PURE__*/_jsx(DataFormLayout, {
        data: data,
        form: form,
        onChange: onChange
      })]
    });
  }
  const labelPosition = (_field$labelPosition = field.labelPosition) !== null && _field$labelPosition !== void 0 ? _field$labelPosition : 'top';
  const fieldDefinition = fields.find(fieldDef => fieldDef.id === field.id);
  if (!fieldDefinition) {
    return null;
  }
  if (labelPosition === 'side') {
    return /*#__PURE__*/_jsxs(HStack, {
      className: "dataforms-layouts-regular__field",
      children: [/*#__PURE__*/_jsx("div", {
        className: "dataforms-layouts-regular__field-label",
        children: fieldDefinition.label
      }), /*#__PURE__*/_jsx("div", {
        className: "dataforms-layouts-regular__field-control",
        children: /*#__PURE__*/_jsx(fieldDefinition.Edit, {
          data: data,
          field: fieldDefinition,
          onChange: onChange,
          hideLabelFromVision: true
        }, fieldDefinition.id)
      })]
    });
  }
  return /*#__PURE__*/_jsx("div", {
    className: "dataforms-layouts-regular__field",
    children: /*#__PURE__*/_jsx(fieldDefinition.Edit, {
      data: data,
      field: fieldDefinition,
      onChange: onChange,
      hideLabelFromVision: labelPosition === 'none' ? true : hideLabelFromVision
    })
  });
}
//# sourceMappingURL=index.js.map