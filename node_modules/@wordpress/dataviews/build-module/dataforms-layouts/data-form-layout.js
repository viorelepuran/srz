/**
 * WordPress dependencies
 */
import { __experimentalVStack as VStack } from '@wordpress/components';
import { useContext, useMemo } from '@wordpress/element';

/**
 * Internal dependencies
 */

import { getFormFieldLayout } from './index';
import DataFormContext from '../components/dataform-context';
import { isCombinedField } from './is-combined-field';
import normalizeFormFields from '../normalize-form-fields';
import { jsx as _jsx } from "react/jsx-runtime";
export function DataFormLayout({
  data,
  form,
  onChange,
  children
}) {
  const {
    fields: fieldDefinitions
  } = useContext(DataFormContext);
  function getFieldDefinition(field) {
    const fieldId = typeof field === 'string' ? field : field.id;
    return fieldDefinitions.find(fieldDefinition => fieldDefinition.id === fieldId);
  }
  const normalizedFormFields = useMemo(() => normalizeFormFields(form), [form]);
  return /*#__PURE__*/_jsx(VStack, {
    spacing: 2,
    children: normalizedFormFields.map(formField => {
      const FieldLayout = getFormFieldLayout(formField.layout)?.component;
      if (!FieldLayout) {
        return null;
      }
      const fieldDefinition = !isCombinedField(formField) ? getFieldDefinition(formField) : undefined;
      if (fieldDefinition && fieldDefinition.isVisible && !fieldDefinition.isVisible(data)) {
        return null;
      }
      if (children) {
        return children(FieldLayout, formField);
      }
      return /*#__PURE__*/_jsx(FieldLayout, {
        data: data,
        field: formField,
        onChange: onChange
      }, formField.id);
    })
  });
}
//# sourceMappingURL=data-form-layout.js.map