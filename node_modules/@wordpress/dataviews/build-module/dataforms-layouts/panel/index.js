/**
 * WordPress dependencies
 */
import { __experimentalVStack as VStack, __experimentalHStack as HStack, __experimentalHeading as Heading, __experimentalSpacer as Spacer, Dropdown, Button } from '@wordpress/components';
import { sprintf, __, _x } from '@wordpress/i18n';
import { useState, useMemo, useContext } from '@wordpress/element';
import { closeSmall } from '@wordpress/icons';

/**
 * Internal dependencies
 */

import DataFormContext from '../../components/dataform-context';
import { DataFormLayout } from '../data-form-layout';
import { isCombinedField } from '../is-combined-field';
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
function DropdownHeader({
  title,
  onClose
}) {
  return /*#__PURE__*/_jsx(VStack, {
    className: "dataforms-layouts-panel__dropdown-header",
    spacing: 4,
    children: /*#__PURE__*/_jsxs(HStack, {
      alignment: "center",
      children: [title && /*#__PURE__*/_jsx(Heading, {
        level: 2,
        size: 13,
        children: title
      }), /*#__PURE__*/_jsx(Spacer, {}), onClose && /*#__PURE__*/_jsx(Button, {
        label: __('Close'),
        icon: closeSmall,
        onClick: onClose,
        size: "small"
      })]
    })
  });
}
function PanelDropdown({
  fieldDefinition,
  popoverAnchor,
  labelPosition = 'side',
  data,
  onChange,
  field
}) {
  const fieldLabel = isCombinedField(field) ? field.label : fieldDefinition?.label;
  const form = useMemo(() => {
    if (isCombinedField(field)) {
      return {
        type: 'regular',
        fields: field.children.map(child => {
          if (typeof child === 'string') {
            return {
              id: child
            };
          }
          return child;
        })
      };
    }
    // If not explicit children return the field id itself.
    return {
      type: 'regular',
      fields: [{
        id: field.id
      }]
    };
  }, [field]);

  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = useMemo(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    placement: 'left-start',
    offset: 36,
    shift: true
  }), [popoverAnchor]);
  return /*#__PURE__*/_jsx(Dropdown, {
    contentClassName: "dataforms-layouts-panel__field-dropdown",
    popoverProps: popoverProps,
    focusOnMount: true,
    toggleProps: {
      size: 'compact',
      variant: 'tertiary',
      tooltipPosition: 'middle left'
    },
    renderToggle: ({
      isOpen,
      onToggle
    }) => /*#__PURE__*/_jsx(Button, {
      className: "dataforms-layouts-panel__field-control",
      size: "compact",
      variant: ['none', 'top'].includes(labelPosition) ? 'link' : 'tertiary',
      "aria-expanded": isOpen,
      "aria-label": sprintf(
      // translators: %s: Field name.
      _x('Edit %s', 'field'), fieldLabel),
      onClick: onToggle,
      children: /*#__PURE__*/_jsx(fieldDefinition.render, {
        item: data
      })
    }),
    renderContent: ({
      onClose
    }) => /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsx(DropdownHeader, {
        title: fieldLabel,
        onClose: onClose
      }), /*#__PURE__*/_jsx(DataFormLayout, {
        data: data,
        form: form,
        onChange: onChange,
        children: (FieldLayout, nestedField) => {
          var _form$fields;
          return /*#__PURE__*/_jsx(FieldLayout, {
            data: data,
            field: nestedField,
            onChange: onChange,
            hideLabelFromVision: ((_form$fields = form?.fields) !== null && _form$fields !== void 0 ? _form$fields : []).length < 2
          }, nestedField.id);
        }
      })]
    })
  });
}
export default function FormPanelField({
  data,
  field,
  onChange
}) {
  var _field$labelPosition;
  const {
    fields
  } = useContext(DataFormContext);
  const fieldDefinition = fields.find(fieldDef => {
    // Default to the first child if it is a combined field.
    if (isCombinedField(field)) {
      const children = field.children.filter(child => typeof child === 'string' || !isCombinedField(child));
      const firstChildFieldId = typeof children[0] === 'string' ? children[0] : children[0].id;
      return fieldDef.id === firstChildFieldId;
    }
    return fieldDef.id === field.id;
  });
  const labelPosition = (_field$labelPosition = field.labelPosition) !== null && _field$labelPosition !== void 0 ? _field$labelPosition : 'side';

  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = useState(null);
  if (!fieldDefinition) {
    return null;
  }
  const fieldLabel = isCombinedField(field) ? field.label : fieldDefinition?.label;
  if (labelPosition === 'top') {
    return /*#__PURE__*/_jsxs(VStack, {
      className: "dataforms-layouts-panel__field",
      spacing: 0,
      children: [/*#__PURE__*/_jsx("div", {
        className: "dataforms-layouts-panel__field-label",
        style: {
          paddingBottom: 0
        },
        children: fieldLabel
      }), /*#__PURE__*/_jsx("div", {
        className: "dataforms-layouts-panel__field-control",
        children: /*#__PURE__*/_jsx(PanelDropdown, {
          field: field,
          popoverAnchor: popoverAnchor,
          fieldDefinition: fieldDefinition,
          data: data,
          onChange: onChange,
          labelPosition: labelPosition
        })
      })]
    });
  }
  if (labelPosition === 'none') {
    return /*#__PURE__*/_jsx("div", {
      className: "dataforms-layouts-panel__field",
      children: /*#__PURE__*/_jsx(PanelDropdown, {
        field: field,
        popoverAnchor: popoverAnchor,
        fieldDefinition: fieldDefinition,
        data: data,
        onChange: onChange,
        labelPosition: labelPosition
      })
    });
  }

  // Defaults to label position side.
  return /*#__PURE__*/_jsxs(HStack, {
    ref: setPopoverAnchor,
    className: "dataforms-layouts-panel__field",
    children: [/*#__PURE__*/_jsx("div", {
      className: "dataforms-layouts-panel__field-label",
      children: fieldLabel
    }), /*#__PURE__*/_jsx("div", {
      className: "dataforms-layouts-panel__field-control",
      children: /*#__PURE__*/_jsx(PanelDropdown, {
        field: field,
        popoverAnchor: popoverAnchor,
        fieldDefinition: fieldDefinition,
        data: data,
        onChange: onChange,
        labelPosition: labelPosition
      })
    })]
  });
}
//# sourceMappingURL=index.js.map