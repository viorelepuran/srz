"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormPanelField;
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _dataformContext = _interopRequireDefault(require("../../components/dataform-context"));
var _dataFormLayout = require("../data-form-layout");
var _isCombinedField = require("../is-combined-field");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function DropdownHeader({
  title,
  onClose
}) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalVStack, {
    className: "dataforms-layouts-panel__dropdown-header",
    spacing: 4,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
      alignment: "center",
      children: [title && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalHeading, {
        level: 2,
        size: 13,
        children: title
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalSpacer, {}), onClose && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
        label: (0, _i18n.__)('Close'),
        icon: _icons.closeSmall,
        onClick: onClose,
        size: "small"
      })]
    })
  });
}
function PanelDropdown({
  fieldDefinition,
  popoverAnchor,
  labelPosition = 'side',
  data,
  onChange,
  field
}) {
  const fieldLabel = (0, _isCombinedField.isCombinedField)(field) ? field.label : fieldDefinition?.label;
  const form = (0, _element.useMemo)(() => {
    if ((0, _isCombinedField.isCombinedField)(field)) {
      return {
        type: 'regular',
        fields: field.children.map(child => {
          if (typeof child === 'string') {
            return {
              id: child
            };
          }
          return child;
        })
      };
    }
    // If not explicit children return the field id itself.
    return {
      type: 'regular',
      fields: [{
        id: field.id
      }]
    };
  }, [field]);

  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = (0, _element.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    placement: 'left-start',
    offset: 36,
    shift: true
  }), [popoverAnchor]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Dropdown, {
    contentClassName: "dataforms-layouts-panel__field-dropdown",
    popoverProps: popoverProps,
    focusOnMount: true,
    toggleProps: {
      size: 'compact',
      variant: 'tertiary',
      tooltipPosition: 'middle left'
    },
    renderToggle: ({
      isOpen,
      onToggle
    }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
      className: "dataforms-layouts-panel__field-control",
      size: "compact",
      variant: ['none', 'top'].includes(labelPosition) ? 'link' : 'tertiary',
      "aria-expanded": isOpen,
      "aria-label": (0, _i18n.sprintf)(
      // translators: %s: Field name.
      (0, _i18n._x)('Edit %s', 'field'), fieldLabel),
      onClick: onToggle,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(fieldDefinition.render, {
        item: data
      })
    }),
    renderContent: ({
      onClose
    }) => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownHeader, {
        title: fieldLabel,
        onClose: onClose
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataFormLayout.DataFormLayout, {
        data: data,
        form: form,
        onChange: onChange,
        children: (FieldLayout, nestedField) => {
          var _form$fields;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(FieldLayout, {
            data: data,
            field: nestedField,
            onChange: onChange,
            hideLabelFromVision: ((_form$fields = form?.fields) !== null && _form$fields !== void 0 ? _form$fields : []).length < 2
          }, nestedField.id);
        }
      })]
    })
  });
}
function FormPanelField({
  data,
  field,
  onChange
}) {
  var _field$labelPosition;
  const {
    fields
  } = (0, _element.useContext)(_dataformContext.default);
  const fieldDefinition = fields.find(fieldDef => {
    // Default to the first child if it is a combined field.
    if ((0, _isCombinedField.isCombinedField)(field)) {
      const children = field.children.filter(child => typeof child === 'string' || !(0, _isCombinedField.isCombinedField)(child));
      const firstChildFieldId = typeof children[0] === 'string' ? children[0] : children[0].id;
      return fieldDef.id === firstChildFieldId;
    }
    return fieldDef.id === field.id;
  });
  const labelPosition = (_field$labelPosition = field.labelPosition) !== null && _field$labelPosition !== void 0 ? _field$labelPosition : 'side';

  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  if (!fieldDefinition) {
    return null;
  }
  const fieldLabel = (0, _isCombinedField.isCombinedField)(field) ? field.label : fieldDefinition?.label;
  if (labelPosition === 'top') {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
      className: "dataforms-layouts-panel__field",
      spacing: 0,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "dataforms-layouts-panel__field-label",
        style: {
          paddingBottom: 0
        },
        children: fieldLabel
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "dataforms-layouts-panel__field-control",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PanelDropdown, {
          field: field,
          popoverAnchor: popoverAnchor,
          fieldDefinition: fieldDefinition,
          data: data,
          onChange: onChange,
          labelPosition: labelPosition
        })
      })]
    });
  }
  if (labelPosition === 'none') {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "dataforms-layouts-panel__field",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PanelDropdown, {
        field: field,
        popoverAnchor: popoverAnchor,
        fieldDefinition: fieldDefinition,
        data: data,
        onChange: onChange,
        labelPosition: labelPosition
      })
    });
  }

  // Defaults to label position side.
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
    ref: setPopoverAnchor,
    className: "dataforms-layouts-panel__field",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "dataforms-layouts-panel__field-label",
      children: fieldLabel
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "dataforms-layouts-panel__field-control",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PanelDropdown, {
        field: field,
        popoverAnchor: popoverAnchor,
        fieldDefinition: fieldDefinition,
        data: data,
        onChange: onChange,
        labelPosition: labelPosition
      })
    })]
  });
}
//# sourceMappingURL=index.js.map