"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormRegularField;
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _dataformContext = _interopRequireDefault(require("../../components/dataform-context"));
var _dataFormLayout = require("../data-form-layout");
var _isCombinedField = require("../is-combined-field");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function Header({
  title
}) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalVStack, {
    className: "dataforms-layouts-regular__header",
    spacing: 4,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
      alignment: "center",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalHeading, {
        level: 2,
        size: 13,
        children: title
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalSpacer, {})]
    })
  });
}
function FormRegularField({
  data,
  field,
  onChange,
  hideLabelFromVision
}) {
  var _field$labelPosition;
  const {
    fields
  } = (0, _element.useContext)(_dataformContext.default);
  const form = (0, _element.useMemo)(() => {
    if ((0, _isCombinedField.isCombinedField)(field)) {
      return {
        fields: field.children.map(child => {
          if (typeof child === 'string') {
            return {
              id: child
            };
          }
          return child;
        }),
        type: 'regular'
      };
    }
    return {
      type: 'regular',
      fields: []
    };
  }, [field]);
  if ((0, _isCombinedField.isCombinedField)(field)) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [!hideLabelFromVision && field.label && /*#__PURE__*/(0, _jsxRuntime.jsx)(Header, {
        title: field.label
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataFormLayout.DataFormLayout, {
        data: data,
        form: form,
        onChange: onChange
      })]
    });
  }
  const labelPosition = (_field$labelPosition = field.labelPosition) !== null && _field$labelPosition !== void 0 ? _field$labelPosition : 'top';
  const fieldDefinition = fields.find(fieldDef => fieldDef.id === field.id);
  if (!fieldDefinition) {
    return null;
  }
  if (labelPosition === 'side') {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
      className: "dataforms-layouts-regular__field",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "dataforms-layouts-regular__field-label",
        children: fieldDefinition.label
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "dataforms-layouts-regular__field-control",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(fieldDefinition.Edit, {
          data: data,
          field: fieldDefinition,
          onChange: onChange,
          hideLabelFromVision: true
        }, fieldDefinition.id)
      })]
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "dataforms-layouts-regular__field",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(fieldDefinition.Edit, {
      data: data,
      field: fieldDefinition,
      onChange: onChange,
      hideLabelFromVision: labelPosition === 'none' ? true : hideLabelFromVision
    })
  });
}
//# sourceMappingURL=index.js.map