"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _clsx = _interopRequireDefault(require("clsx"));
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _dataviewsSelectionCheckbox = _interopRequireDefault(require("../../components/dataviews-selection-checkbox"));
var _dataviewsItemActions = _interopRequireDefault(require("../../components/dataviews-item-actions"));
var _constants = require("../../constants");
var _dataviewsBulkActions = require("../../components/dataviews-bulk-actions");
var _columnHeaderMenu = _interopRequireDefault(require("./column-header-menu"));
var _columnPrimary = _interopRequireDefault(require("./column-primary"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function TableColumnField({
  item,
  fields,
  column
}) {
  const field = fields.find(f => f.id === column);
  if (!field) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "dataviews-view-table__cell-content-wrapper",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(field.render, {
      item
    })
  });
}
function TableRow({
  hasBulkActions,
  item,
  level,
  actions,
  fields,
  id,
  view,
  titleField,
  mediaField,
  descriptionField,
  selection,
  getItemId,
  isItemClickable,
  onClickItem,
  onChangeSelection
}) {
  var _view$fields;
  const hasPossibleBulkAction = (0, _dataviewsBulkActions.useHasAPossibleBulkAction)(actions, item);
  const isSelected = hasPossibleBulkAction && selection.includes(id);
  const [isHovered, setIsHovered] = (0, _element.useState)(false);
  const {
    showTitle = true,
    showMedia = true,
    showDescription = true
  } = view;
  const handleMouseEnter = () => {
    setIsHovered(true);
  };
  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  // Will be set to true if `onTouchStart` fires. This happens before
  // `onClick` and can be used to exclude touchscreen devices from certain
  // behaviours.
  const isTouchDeviceRef = (0, _element.useRef)(false);
  const columns = (_view$fields = view.fields) !== null && _view$fields !== void 0 ? _view$fields : [];
  const hasPrimaryColumn = titleField && showTitle || mediaField && showMedia || descriptionField && showDescription;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("tr", {
    className: (0, _clsx.default)('dataviews-view-table__row', {
      'is-selected': hasPossibleBulkAction && isSelected,
      'is-hovered': isHovered,
      'has-bulk-actions': hasPossibleBulkAction
    }),
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onTouchStart: () => {
      isTouchDeviceRef.current = true;
    },
    onClick: () => {
      if (!hasPossibleBulkAction) {
        return;
      }
      if (!isTouchDeviceRef.current && document.getSelection()?.type !== 'Range') {
        onChangeSelection(selection.includes(id) ? selection.filter(itemId => id !== itemId) : [id]);
      }
    },
    children: [hasBulkActions && /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
      className: "dataviews-view-table__checkbox-column",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "dataviews-view-table__cell-content-wrapper",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataviewsSelectionCheckbox.default, {
          item: item,
          selection: selection,
          onChangeSelection: onChangeSelection,
          getItemId: getItemId,
          titleField: titleField,
          disabled: !hasPossibleBulkAction
        })
      })
    }), hasPrimaryColumn && /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_columnPrimary.default, {
        item: item,
        level: level,
        titleField: showTitle ? titleField : undefined,
        mediaField: showMedia ? mediaField : undefined,
        descriptionField: showDescription ? descriptionField : undefined,
        isItemClickable: isItemClickable,
        onClickItem: onClickItem
      })
    }), columns.map(column => {
      var _view$layout$styles$c;
      // Explicit picks the supported styles.
      const {
        width,
        maxWidth,
        minWidth
      } = (_view$layout$styles$c = view.layout?.styles?.[column]) !== null && _view$layout$styles$c !== void 0 ? _view$layout$styles$c : {};
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
        style: {
          width,
          maxWidth,
          minWidth
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TableColumnField, {
          fields: fields,
          item: item,
          column: column
        })
      }, column);
    }), !!actions?.length &&
    /*#__PURE__*/
    // Disable reason: we are not making the element interactive,
    // but preventing any click events from bubbling up to the
    // table row. This allows us to add a click handler to the row
    // itself (to toggle row selection) without erroneously
    // intercepting click events from ItemActions.
    /* eslint-disable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */
    (0, _jsxRuntime.jsx)("td", {
      className: "dataviews-view-table__actions-column",
      onClick: e => e.stopPropagation(),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataviewsItemActions.default, {
        item: item,
        actions: actions
      })
    })
    /* eslint-enable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */]
  });
}
function ViewTable({
  actions,
  data,
  fields,
  getItemId,
  getItemLevel,
  isLoading = false,
  onChangeView,
  onChangeSelection,
  selection,
  setOpenedFilter,
  onClickItem,
  isItemClickable,
  view
}) {
  var _view$fields2;
  const headerMenuRefs = (0, _element.useRef)(new Map());
  const headerMenuToFocusRef = (0, _element.useRef)();
  const [nextHeaderMenuToFocus, setNextHeaderMenuToFocus] = (0, _element.useState)();
  const hasBulkActions = (0, _dataviewsBulkActions.useSomeItemHasAPossibleBulkAction)(actions, data);
  (0, _element.useEffect)(() => {
    if (headerMenuToFocusRef.current) {
      headerMenuToFocusRef.current.focus();
      headerMenuToFocusRef.current = undefined;
    }
  });
  const tableNoticeId = (0, _element.useId)();
  if (nextHeaderMenuToFocus) {
    // If we need to force focus, we short-circuit rendering here
    // to prevent any additional work while we handle that.
    // Clearing out the focus directive is necessary to make sure
    // future renders don't cause unexpected focus jumps.
    headerMenuToFocusRef.current = nextHeaderMenuToFocus;
    setNextHeaderMenuToFocus(undefined);
    return;
  }
  const onHide = field => {
    const hidden = headerMenuRefs.current.get(field.id);
    const fallback = hidden ? headerMenuRefs.current.get(hidden.fallback) : undefined;
    setNextHeaderMenuToFocus(fallback?.node);
  };
  const hasData = !!data?.length;
  const titleField = fields.find(field => field.id === view.titleField);
  const mediaField = fields.find(field => field.id === view.mediaField);
  const descriptionField = fields.find(field => field.id === view.descriptionField);
  const {
    showTitle = true,
    showMedia = true,
    showDescription = true
  } = view;
  const hasPrimaryColumn = titleField && showTitle || mediaField && showMedia || descriptionField && showDescription;
  const columns = (_view$fields2 = view.fields) !== null && _view$fields2 !== void 0 ? _view$fields2 : [];
  const headerMenuRef = (column, index) => node => {
    if (node) {
      headerMenuRefs.current.set(column, {
        node,
        fallback: columns[index > 0 ? index - 1 : 1]
      });
    } else {
      headerMenuRefs.current.delete(column);
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("table", {
      className: (0, _clsx.default)('dataviews-view-table', {
        [`has-${view.layout?.density}-density`]: view.layout?.density && ['compact', 'comfortable'].includes(view.layout.density)
      }),
      "aria-busy": isLoading,
      "aria-describedby": tableNoticeId,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("thead", {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("tr", {
          className: "dataviews-view-table__row",
          children: [hasBulkActions && /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
            className: "dataviews-view-table__checkbox-column",
            scope: "col",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataviewsBulkActions.BulkSelectionCheckbox, {
              selection: selection,
              onChangeSelection: onChangeSelection,
              data: data,
              actions: actions,
              getItemId: getItemId
            })
          }), hasPrimaryColumn && /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
            scope: "col",
            children: titleField && /*#__PURE__*/(0, _jsxRuntime.jsx)(_columnHeaderMenu.default, {
              ref: headerMenuRef(titleField.id, 0),
              fieldId: titleField.id,
              view: view,
              fields: fields,
              onChangeView: onChangeView,
              onHide: onHide,
              setOpenedFilter: setOpenedFilter,
              canMove: false
            })
          }), columns.map((column, index) => {
            var _view$layout$styles$c2;
            // Explicit picks the supported styles.
            const {
              width,
              maxWidth,
              minWidth
            } = (_view$layout$styles$c2 = view.layout?.styles?.[column]) !== null && _view$layout$styles$c2 !== void 0 ? _view$layout$styles$c2 : {};
            return /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
              style: {
                width,
                maxWidth,
                minWidth
              },
              "aria-sort": view.sort?.direction && view.sort?.field === column ? _constants.sortValues[view.sort.direction] : undefined,
              scope: "col",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_columnHeaderMenu.default, {
                ref: headerMenuRef(column, index),
                fieldId: column,
                view: view,
                fields: fields,
                onChangeView: onChangeView,
                onHide: onHide,
                setOpenedFilter: setOpenedFilter
              })
            }, column);
          }), !!actions?.length && /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
            className: "dataviews-view-table__actions-column",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "dataviews-view-table-header",
              children: (0, _i18n.__)('Actions')
            })
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("tbody", {
        children: hasData && data.map((item, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TableRow, {
          item: item,
          level: view.showLevels && typeof getItemLevel === 'function' ? getItemLevel(item) : undefined,
          hasBulkActions: hasBulkActions,
          actions: actions,
          fields: fields,
          id: getItemId(item) || index.toString(),
          view: view,
          titleField: titleField,
          mediaField: mediaField,
          descriptionField: descriptionField,
          selection: selection,
          getItemId: getItemId,
          onChangeSelection: onChangeSelection,
          onClickItem: onClickItem,
          isItemClickable: isItemClickable
        }, getItemId(item)))
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: (0, _clsx.default)({
        'dataviews-loading': isLoading,
        'dataviews-no-results': !hasData && !isLoading
      }),
      id: tableNoticeId,
      children: !hasData && /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
        children: isLoading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Spinner, {}) : (0, _i18n.__)('No results')
      })
    })]
  });
}
var _default = exports.default = ViewTable;
//# sourceMappingURL=index.js.map