"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewGrid;
var _clsx = _interopRequireDefault(require("clsx"));
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _lockUnlock = require("../../lock-unlock");
var _dataviewsItemActions = _interopRequireDefault(require("../../components/dataviews-item-actions"));
var _dataviewsSelectionCheckbox = _interopRequireDefault(require("../../components/dataviews-selection-checkbox"));
var _dataviewsBulkActions = require("../../components/dataviews-bulk-actions");
var _getClickableItemProps = _interopRequireDefault(require("../utils/get-clickable-item-props"));
var _previewSizePicker = require("./preview-size-picker");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  Badge
} = (0, _lockUnlock.unlock)(_components.privateApis);
function GridItem({
  view,
  selection,
  onChangeSelection,
  onClickItem,
  isItemClickable,
  getItemId,
  item,
  actions,
  mediaField,
  titleField,
  descriptionField,
  regularFields,
  badgeFields,
  hasBulkActions
}) {
  const {
    showTitle = true,
    showMedia = true,
    showDescription = true
  } = view;
  const hasBulkAction = (0, _dataviewsBulkActions.useHasAPossibleBulkAction)(actions, item);
  const id = getItemId(item);
  const instanceId = (0, _compose.useInstanceId)(GridItem);
  const isSelected = selection.includes(id);
  const renderedMediaField = mediaField?.render ? /*#__PURE__*/(0, _jsxRuntime.jsx)(mediaField.render, {
    item: item
  }) : null;
  const renderedTitleField = showTitle && titleField?.render ? /*#__PURE__*/(0, _jsxRuntime.jsx)(titleField.render, {
    item: item
  }) : null;
  const clickableMediaItemProps = (0, _getClickableItemProps.default)({
    item,
    isItemClickable,
    onClickItem,
    className: 'dataviews-view-grid__media'
  });
  const clickableTitleItemProps = (0, _getClickableItemProps.default)({
    item,
    isItemClickable,
    onClickItem,
    className: 'dataviews-view-grid__title-field dataviews-title-field'
  });
  let mediaA11yProps;
  let titleA11yProps;
  if (isItemClickable(item) && onClickItem) {
    if (renderedTitleField) {
      mediaA11yProps = {
        'aria-labelledby': `dataviews-view-grid__title-field-${instanceId}`
      };
      titleA11yProps = {
        id: `dataviews-view-grid__title-field-${instanceId}`
      };
    } else {
      mediaA11yProps = {
        'aria-label': (0, _i18n.__)('Navigate to item')
      };
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
    spacing: 0,
    className: (0, _clsx.default)('dataviews-view-grid__card', {
      'is-selected': hasBulkAction && isSelected
    }),
    onClickCapture: event => {
      if (event.ctrlKey || event.metaKey) {
        event.stopPropagation();
        event.preventDefault();
        if (!hasBulkAction) {
          return;
        }
        onChangeSelection(selection.includes(id) ? selection.filter(itemId => id !== itemId) : [...selection, id]);
      }
    },
    children: [showMedia && renderedMediaField && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ...clickableMediaItemProps,
      ...mediaA11yProps,
      children: renderedMediaField
    }), hasBulkActions && showMedia && renderedMediaField && /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataviewsSelectionCheckbox.default, {
      item: item,
      selection: selection,
      onChangeSelection: onChangeSelection,
      getItemId: getItemId,
      titleField: titleField,
      disabled: !hasBulkAction
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
      justify: "space-between",
      className: "dataviews-view-grid__title-actions",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        ...clickableTitleItemProps,
        ...titleA11yProps,
        children: renderedTitleField
      }), !!actions?.length && /*#__PURE__*/(0, _jsxRuntime.jsx)(_dataviewsItemActions.default, {
        item: item,
        actions: actions,
        isCompact: true
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
      spacing: 1,
      children: [showDescription && descriptionField?.render && /*#__PURE__*/(0, _jsxRuntime.jsx)(descriptionField.render, {
        item: item
      }), !!badgeFields?.length && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalHStack, {
        className: "dataviews-view-grid__badge-fields",
        spacing: 2,
        wrap: true,
        alignment: "top",
        justify: "flex-start",
        children: badgeFields.map(field => {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(Badge, {
            className: "dataviews-view-grid__field-value",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(field.render, {
              item: item
            })
          }, field.id);
        })
      }), !!regularFields?.length && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalVStack, {
        className: "dataviews-view-grid__fields",
        spacing: 1,
        children: regularFields.map(field => {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Flex, {
            className: "dataviews-view-grid__field",
            gap: 1,
            justify: "flex-start",
            expanded: true,
            style: {
              height: 'auto'
            },
            direction: "row",
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.FlexItem, {
                className: "dataviews-view-grid__field-name",
                children: field.header
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.FlexItem, {
                className: "dataviews-view-grid__field-value",
                style: {
                  maxHeight: 'none'
                },
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(field.render, {
                  item: item
                })
              })]
            })
          }, field.id);
        })
      })]
    })]
  }, id);
}
function ViewGrid({
  actions,
  data,
  fields,
  getItemId,
  isLoading,
  onChangeSelection,
  onClickItem,
  isItemClickable,
  selection,
  view
}) {
  var _view$fields;
  const titleField = fields.find(field => field.id === view?.titleField);
  const mediaField = fields.find(field => field.id === view?.mediaField);
  const descriptionField = fields.find(field => field.id === view?.descriptionField);
  const otherFields = (_view$fields = view.fields) !== null && _view$fields !== void 0 ? _view$fields : [];
  const {
    regularFields,
    badgeFields
  } = otherFields.reduce((accumulator, fieldId) => {
    const field = fields.find(f => f.id === fieldId);
    if (!field) {
      return accumulator;
    }
    // If the field is a badge field, add it to the badgeFields array
    // otherwise add it to the rest visibleFields array.
    const key = view.layout?.badgeFields?.includes(fieldId) ? 'badgeFields' : 'regularFields';
    accumulator[key].push(field);
    return accumulator;
  }, {
    regularFields: [],
    badgeFields: []
  });
  const hasData = !!data?.length;
  const updatedPreviewSize = (0, _previewSizePicker.useUpdatedPreviewSizeOnViewportChange)();
  const hasBulkActions = (0, _dataviewsBulkActions.useSomeItemHasAPossibleBulkAction)(actions, data);
  const usedPreviewSize = updatedPreviewSize || view.layout?.previewSize;
  const gridStyle = usedPreviewSize ? {
    gridTemplateColumns: `repeat(${usedPreviewSize}, minmax(0, 1fr))`
  } : {};
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [hasData && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalGrid, {
      gap: 8,
      columns: 2,
      alignment: "top",
      className: "dataviews-view-grid",
      style: gridStyle,
      "aria-busy": isLoading,
      children: data.map(item => {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(GridItem, {
          view: view,
          selection: selection,
          onChangeSelection: onChangeSelection,
          onClickItem: onClickItem,
          isItemClickable: isItemClickable,
          getItemId: getItemId,
          item: item,
          actions: actions,
          mediaField: mediaField,
          titleField: titleField,
          descriptionField: descriptionField,
          regularFields: regularFields,
          badgeFields: badgeFields,
          hasBulkActions: hasBulkActions
        }, getItemId(item));
      })
    }), !hasData && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: (0, _clsx.default)({
        'dataviews-loading': isLoading,
        'dataviews-no-results': !isLoading
      }),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
        children: isLoading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Spinner, {}) : (0, _i18n.__)('No results')
      })
    })]
  });
}
//# sourceMappingURL=index.js.map