"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PreviewSizePicker;
exports.useUpdatedPreviewSizeOnViewportChange = useUpdatedPreviewSizeOnViewportChange;
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _dataviewsContext = _interopRequireDefault(require("../../components/dataviews-context"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const viewportBreaks = {
  xhuge: {
    min: 3,
    max: 6,
    default: 5
  },
  huge: {
    min: 2,
    max: 4,
    default: 4
  },
  xlarge: {
    min: 2,
    max: 3,
    default: 3
  },
  large: {
    min: 1,
    max: 2,
    default: 2
  },
  mobile: {
    min: 1,
    max: 2,
    default: 2
  }
};

/**
 * Breakpoints were adjusted from media queries breakpoints to account for
 * the sidebar width. This was done to match the existing styles we had.
 */
const BREAKPOINTS = {
  xhuge: 1520,
  huge: 1140,
  xlarge: 780,
  large: 480,
  mobile: 0
};
function useViewPortBreakpoint() {
  const containerWidth = (0, _element.useContext)(_dataviewsContext.default).containerWidth;
  for (const [key, value] of Object.entries(BREAKPOINTS)) {
    if (containerWidth >= value) {
      return key;
    }
  }
  return 'mobile';
}
function useUpdatedPreviewSizeOnViewportChange() {
  const view = (0, _element.useContext)(_dataviewsContext.default).view;
  const viewport = useViewPortBreakpoint();
  return (0, _element.useMemo)(() => {
    const previewSize = view.layout?.previewSize;
    let newPreviewSize;
    if (!previewSize) {
      return;
    }
    const breakValues = viewportBreaks[viewport];
    if (previewSize < breakValues.min) {
      newPreviewSize = breakValues.min;
    }
    if (previewSize > breakValues.max) {
      newPreviewSize = breakValues.max;
    }
    return newPreviewSize;
  }, [viewport, view]);
}
function PreviewSizePicker() {
  const viewport = useViewPortBreakpoint();
  const context = (0, _element.useContext)(_dataviewsContext.default);
  const view = context.view;
  const breakValues = viewportBreaks[viewport];
  const previewSizeToUse = view.layout?.previewSize || breakValues.default;
  const marks = (0, _element.useMemo)(() => Array.from({
    length: breakValues.max - breakValues.min + 1
  }, (_, i) => {
    return {
      value: breakValues.min + i
    };
  }), [breakValues]);
  if (viewport === 'mobile') {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.RangeControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    showTooltip: false,
    label: (0, _i18n.__)('Preview size'),
    value: breakValues.max + breakValues.min - previewSizeToUse,
    marks: marks,
    min: breakValues.min,
    max: breakValues.max,
    withInputField: false,
    onChange: (value = 0) => {
      context.onChangeView({
        ...view,
        layout: {
          ...view.layout,
          previewSize: breakValues.max + breakValues.min - value
        }
      });
    },
    step: 1
  });
}
//# sourceMappingURL=preview-size-picker.js.map