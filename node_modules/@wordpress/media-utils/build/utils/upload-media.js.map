{"version":3,"names":["_i18n","require","_blob","_uploadToServer","_validateMimeType","_validateMimeTypeForUser","_validateFileSize","_uploadError","uploadMedia","wpAllowedMimeTypes","allowedTypes","additionalData","filesList","maxUploadFileSize","onError","onFileChange","signal","multiple","length","Error","__","validFiles","filesSet","setAndUpdateFiles","index","value","window","__experimentalMediaProcessing","url","revokeBlobURL","filter","attachment","mediaFile","validateMimeTypeForUser","error","validateMimeType","validateFileSize","push","createBlobURL","map","file","uploadToServer","message","String","sprintf","name","UploadError","code","cause","undefined"],"sources":["@wordpress/media-utils/src/utils/upload-media.ts"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\n\n/**\n * Internal dependencies\n */\nimport type {\n\tAdditionalData,\n\tAttachment,\n\tOnChangeHandler,\n\tOnErrorHandler,\n} from './types';\nimport { uploadToServer } from './upload-to-server';\nimport { validateMimeType } from './validate-mime-type';\nimport { validateMimeTypeForUser } from './validate-mime-type-for-user';\nimport { validateFileSize } from './validate-file-size';\nimport { UploadError } from './upload-error';\n\ndeclare global {\n\tinterface Window {\n\t\t__experimentalMediaProcessing?: boolean;\n\t}\n}\n\ninterface UploadMediaArgs {\n\t// Additional data to include in the request.\n\tadditionalData?: AdditionalData;\n\t// Array with the types of media that can be uploaded, if unset all types are allowed.\n\tallowedTypes?: string[];\n\t// List of files.\n\tfilesList: File[];\n\t// Maximum upload size in bytes allowed for the site.\n\tmaxUploadFileSize?: number;\n\t// Function called when an error happens.\n\tonError?: OnErrorHandler;\n\t// Function called each time a file or a temporary representation of the file is available.\n\tonFileChange?: OnChangeHandler;\n\t// List of allowed mime types and file extensions.\n\twpAllowedMimeTypes?: Record< string, string > | null;\n\t// Abort signal.\n\tsignal?: AbortSignal;\n\t// Whether to allow multiple files to be uploaded.\n\tmultiple?: boolean;\n}\n\n/**\n * Upload a media file when the file upload button is activated\n * or when adding a file to the editor via drag & drop.\n *\n * @param $0                    Parameters object passed to the function.\n * @param $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param $0.additionalData     Additional data to include in the request.\n * @param $0.filesList          List of files.\n * @param $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param $0.onError            Function called when an error happens.\n * @param $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n * @param $0.signal             Abort signal.\n * @param $0.multiple           Whether to allow multiple files to be uploaded.\n */\nexport function uploadMedia( {\n\twpAllowedMimeTypes,\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError,\n\tonFileChange,\n\tsignal,\n\tmultiple = true,\n}: UploadMediaArgs ) {\n\tif ( ! multiple && filesList.length > 1 ) {\n\t\tonError?.( new Error( __( 'Only one file can be used here.' ) ) );\n\t\treturn;\n\t}\n\n\tconst validFiles = [];\n\n\tconst filesSet: Array< Partial< Attachment > | null > = [];\n\tconst setAndUpdateFiles = ( index: number, value: Attachment | null ) => {\n\t\t// For client-side media processing, this is handled by the upload-media package.\n\t\tif ( ! window.__experimentalMediaProcessing ) {\n\t\t\tif ( filesSet[ index ]?.url ) {\n\t\t\t\trevokeBlobURL( filesSet[ index ].url );\n\t\t\t}\n\t\t}\n\t\tfilesSet[ index ] = value;\n\t\tonFileChange?.(\n\t\t\tfilesSet.filter( ( attachment ) => attachment !== null )\n\t\t);\n\t};\n\n\tfor ( const mediaFile of filesList ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeTypeForUser( mediaFile, wpAllowedMimeTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the caller (e.g. a block) supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeType( mediaFile, allowedTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Verify if file is greater than the maximum file upload size allowed for the site.\n\t\ttry {\n\t\t\tvalidateFileSize( mediaFile, maxUploadFileSize );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// For client-side media processing, this is handled by the upload-media package.\n\t\tif ( ! window.__experimentalMediaProcessing ) {\n\t\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t\t// with final file from media gallery when upload is `done` below.\n\t\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\t\tonFileChange?.( filesSet as Array< Partial< Attachment > > );\n\t\t}\n\t}\n\n\tvalidFiles.map( async ( file, index ) => {\n\t\ttry {\n\t\t\tconst attachment = await uploadToServer(\n\t\t\t\tfile,\n\t\t\t\tadditionalData,\n\t\t\t\tsignal\n\t\t\t);\n\t\t\tsetAndUpdateFiles( index, attachment );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( index, null );\n\n\t\t\t// @wordpress/api-fetch throws any response that isn't in the 200 range as-is.\n\t\t\tlet message: string;\n\t\t\tif (\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\terror !== null &&\n\t\t\t\t'message' in error\n\t\t\t) {\n\t\t\t\tmessage =\n\t\t\t\t\ttypeof error.message === 'string'\n\t\t\t\t\t\t? error.message\n\t\t\t\t\t\t: String( error.message );\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tfile.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tonError?.(\n\t\t\t\tnew UploadError( {\n\t\t\t\t\tcode: 'GENERAL',\n\t\t\t\t\tmessage,\n\t\t\t\t\tfile,\n\t\t\t\t\tcause: error instanceof Error ? error : undefined,\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t} );\n}\n"],"mappings":";;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAWA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,iBAAA,GAAAH,OAAA;AACA,IAAAI,wBAAA,GAAAJ,OAAA;AACA,IAAAK,iBAAA,GAAAL,OAAA;AACA,IAAAM,YAAA,GAAAN,OAAA;AAnBA;AACA;AACA;;AAIA;AACA;AACA;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASO,WAAWA,CAAE;EAC5BC,kBAAkB;EAClBC,YAAY;EACZC,cAAc,GAAG,CAAC,CAAC;EACnBC,SAAS;EACTC,iBAAiB;EACjBC,OAAO;EACPC,YAAY;EACZC,MAAM;EACNC,QAAQ,GAAG;AACK,CAAC,EAAG;EACpB,IAAK,CAAEA,QAAQ,IAAIL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAG;IACzCJ,OAAO,GAAI,IAAIK,KAAK,CAAE,IAAAC,QAAE,EAAE,iCAAkC,CAAE,CAAE,CAAC;IACjE;EACD;EAEA,MAAMC,UAAU,GAAG,EAAE;EAErB,MAAMC,QAA+C,GAAG,EAAE;EAC1D,MAAMC,iBAAiB,GAAGA,CAAEC,KAAa,EAAEC,KAAwB,KAAM;IACxE;IACA,IAAK,CAAEC,MAAM,CAACC,6BAA6B,EAAG;MAC7C,IAAKL,QAAQ,CAAEE,KAAK,CAAE,EAAEI,GAAG,EAAG;QAC7B,IAAAC,mBAAa,EAAEP,QAAQ,CAAEE,KAAK,CAAE,CAACI,GAAI,CAAC;MACvC;IACD;IACAN,QAAQ,CAAEE,KAAK,CAAE,GAAGC,KAAK;IACzBV,YAAY,GACXO,QAAQ,CAACQ,MAAM,CAAIC,UAAU,IAAMA,UAAU,KAAK,IAAK,CACxD,CAAC;EACF,CAAC;EAED,KAAM,MAAMC,SAAS,IAAIpB,SAAS,EAAG;IACpC;IACA;IACA,IAAI;MACH,IAAAqB,gDAAuB,EAAED,SAAS,EAAEvB,kBAAmB,CAAC;IACzD,CAAC,CAAC,OAAQyB,KAAc,EAAG;MAC1BpB,OAAO,GAAIoB,KAAe,CAAC;MAC3B;IACD;;IAEA;IACA;IACA,IAAI;MACH,IAAAC,kCAAgB,EAAEH,SAAS,EAAEtB,YAAa,CAAC;IAC5C,CAAC,CAAC,OAAQwB,KAAc,EAAG;MAC1BpB,OAAO,GAAIoB,KAAe,CAAC;MAC3B;IACD;;IAEA;IACA,IAAI;MACH,IAAAE,kCAAgB,EAAEJ,SAAS,EAAEnB,iBAAkB,CAAC;IACjD,CAAC,CAAC,OAAQqB,KAAc,EAAG;MAC1BpB,OAAO,GAAIoB,KAAe,CAAC;MAC3B;IACD;IAEAb,UAAU,CAACgB,IAAI,CAAEL,SAAU,CAAC;;IAE5B;IACA,IAAK,CAAEN,MAAM,CAACC,6BAA6B,EAAG;MAC7C;MACA;MACAL,QAAQ,CAACe,IAAI,CAAE;QAAET,GAAG,EAAE,IAAAU,mBAAa,EAAEN,SAAU;MAAE,CAAE,CAAC;MACpDjB,YAAY,GAAIO,QAA2C,CAAC;IAC7D;EACD;EAEAD,UAAU,CAACkB,GAAG,CAAE,OAAQC,IAAI,EAAEhB,KAAK,KAAM;IACxC,IAAI;MACH,MAAMO,UAAU,GAAG,MAAM,IAAAU,8BAAc,EACtCD,IAAI,EACJ7B,cAAc,EACdK,MACD,CAAC;MACDO,iBAAiB,CAAEC,KAAK,EAAEO,UAAW,CAAC;IACvC,CAAC,CAAC,OAAQG,KAAK,EAAG;MACjB;MACAX,iBAAiB,CAAEC,KAAK,EAAE,IAAK,CAAC;;MAEhC;MACA,IAAIkB,OAAe;MACnB,IACC,OAAOR,KAAK,KAAK,QAAQ,IACzBA,KAAK,KAAK,IAAI,IACd,SAAS,IAAIA,KAAK,EACjB;QACDQ,OAAO,GACN,OAAOR,KAAK,CAACQ,OAAO,KAAK,QAAQ,GAC9BR,KAAK,CAACQ,OAAO,GACbC,MAAM,CAAET,KAAK,CAACQ,OAAQ,CAAC;MAC5B,CAAC,MAAM;QACNA,OAAO,GAAG,IAAAE,aAAO;QAChB;QACA,IAAAxB,QAAE,EAAE,qDAAsD,CAAC,EAC3DoB,IAAI,CAACK,IACN,CAAC;MACF;MAEA/B,OAAO,GACN,IAAIgC,wBAAW,CAAE;QAChBC,IAAI,EAAE,SAAS;QACfL,OAAO;QACPF,IAAI;QACJQ,KAAK,EAAEd,KAAK,YAAYf,KAAK,GAAGe,KAAK,GAAGe;MACzC,CAAE,CACH,CAAC;IACF;EACD,CAAE,CAAC;AACJ","ignoreList":[]}