{"version":3,"names":["_element","require","_deprecated","_interopRequireDefault","_a11y","_i18n","_index","_lockUnlock","castArray","maybeArray","Array","isArray","privateSettings","__experimentalUpdateSettings","settings","stripExperimentalSettings","reset","incomingSettings","Object","hasOwn","deprecated","since","alternative","isPreviewMode","__unstableIsPreviewMode","cleanSettings","Platform","OS","key","includes","type","hideBlockInterface","showBlockInterface","privateRemoveBlocks","clientIds","selectPrevious","forceRemove","select","dispatch","registry","length","canRemoveBlocks","rules","getBlockRemovalRules","flattenBlocks","blocks","result","stack","innerBlocks","block","shift","push","blockList","map","getBlock","flattenedBlocks","message","rule","callback","displayBlockRemovalPrompt","selectPreviousBlock","batch","ensureDefaultBlock","exports","count","getBlockCount","__unstableHasCustomAppender","getSettings","insertDefaultBlock","clearBlockRemovalPrompt","setBlockRemovalRules","setOpenedBlockSettingsMenu","clientId","setStyleOverride","id","style","deleteStyleOverride","setLastFocus","lastFocus","stopEditingAsBlocks","focusModeToRevert","unlock","blockEditorStore","getTemporarilyEditingFocusModeToRevert","__unstableMarkNextChangeAsNotPersistent","updateBlockAttributes","templateLock","updateBlockListSettings","getBlockListSettings","updateSettings","focusMode","__unstableSetTemporarilyEditingAsBlocks","startDragging","stopDragging","expandBlock","setInsertionPoint","value","modifyContentLockBlock","selectBlock","undefined","setZoomLevel","zoom","firstSelectedClientId","getBlockSelectionStart","sectionRootClientId","getSectionRootClientId","sectionClientId","sectionClientIds","getBlockOrder","getBlockParents","find","parent","getBlockHierarchyRootClientId","clearSelectedBlock","speak","__","resetZoomLevel"],"sources":["@wordpress/block-editor/src/store/private-actions.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Platform } from '@wordpress/element';\nimport deprecated from '@wordpress/deprecated';\nimport { speak } from '@wordpress/a11y';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from './index';\nimport { unlock } from '../lock-unlock';\n\nconst castArray = ( maybeArray ) =>\n\tArray.isArray( maybeArray ) ? maybeArray : [ maybeArray ];\n\n/**\n * A list of private/experimental block editor settings that\n * should not become a part of the WordPress public API.\n * BlockEditorProvider will remove these settings from the\n * settings object it receives.\n *\n * @see https://github.com/WordPress/gutenberg/pull/46131\n */\nconst privateSettings = [\n\t'inserterMediaCategories',\n\t'blockInspectorAnimation',\n\t'mediaSideload',\n];\n\n/**\n * Action that updates the block editor settings and\n * conditionally preserves the experimental ones.\n *\n * @param {Object}  settings                          Updated settings\n * @param {Object}  options                           Options object.\n * @param {boolean} options.stripExperimentalSettings Whether to strip experimental settings.\n * @param {boolean} options.reset                     Whether to reset the settings.\n * @return {Object} Action object\n */\nexport function __experimentalUpdateSettings(\n\tsettings,\n\t{ stripExperimentalSettings = false, reset = false } = {}\n) {\n\tlet incomingSettings = settings;\n\n\tif ( Object.hasOwn( incomingSettings, '__unstableIsPreviewMode' ) ) {\n\t\tdeprecated(\n\t\t\t\"__unstableIsPreviewMode argument in wp.data.dispatch('core/block-editor').updateSettings\",\n\t\t\t{\n\t\t\t\tsince: '6.8',\n\t\t\t\talternative: 'isPreviewMode',\n\t\t\t}\n\t\t);\n\n\t\tincomingSettings = { ...incomingSettings };\n\t\tincomingSettings.isPreviewMode =\n\t\t\tincomingSettings.__unstableIsPreviewMode;\n\t\tdelete incomingSettings.__unstableIsPreviewMode;\n\t}\n\n\tlet cleanSettings = incomingSettings;\n\n\t// There are no plugins in the mobile apps, so there is no\n\t// need to strip the experimental settings:\n\tif ( stripExperimentalSettings && Platform.OS === 'web' ) {\n\t\tcleanSettings = {};\n\t\tfor ( const key in incomingSettings ) {\n\t\t\tif ( ! privateSettings.includes( key ) ) {\n\t\t\t\tcleanSettings[ key ] = incomingSettings[ key ];\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\ttype: 'UPDATE_SETTINGS',\n\t\tsettings: cleanSettings,\n\t\treset,\n\t};\n}\n\n/**\n * Hides the block interface (eg. toolbar, outline, etc.)\n *\n * @return {Object} Action object.\n */\nexport function hideBlockInterface() {\n\treturn {\n\t\ttype: 'HIDE_BLOCK_INTERFACE',\n\t};\n}\n\n/**\n * Shows the block interface (eg. toolbar, outline, etc.)\n *\n * @return {Object} Action object.\n */\nexport function showBlockInterface() {\n\treturn {\n\t\ttype: 'SHOW_BLOCK_INTERFACE',\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * Compared to `removeBlocks`, this private interface exposes an additional\n * parameter; see `forceRemove`.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block\n *                                         or the immediate parent\n *                                         (if no previous block exists)\n *                                         should be selected\n *                                         when a block is removed.\n * @param {boolean}         forceRemove    Whether to force the operation,\n *                                         bypassing any checks for certain\n *                                         block types.\n */\nexport const privateRemoveBlocks =\n\t( clientIds, selectPrevious = true, forceRemove = false ) =>\n\t( { select, dispatch, registry } ) => {\n\t\tif ( ! clientIds || ! clientIds.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tclientIds = castArray( clientIds );\n\t\tconst canRemoveBlocks = select.canRemoveBlocks( clientIds );\n\n\t\tif ( ! canRemoveBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In certain editing contexts, we'd like to prevent accidental removal\n\t\t// of important blocks. For example, in the site editor, the Query Loop\n\t\t// block is deemed important. In such cases, we'll ask the user for\n\t\t// confirmation that they intended to remove such block(s). However,\n\t\t// the editor instance is responsible for presenting those confirmation\n\t\t// prompts to the user. Any instance opting into removal prompts must\n\t\t// register using `setBlockRemovalRules()`.\n\t\t//\n\t\t// @see https://github.com/WordPress/gutenberg/pull/51145\n\t\tconst rules = ! forceRemove && select.getBlockRemovalRules();\n\n\t\tif ( rules ) {\n\t\t\tfunction flattenBlocks( blocks ) {\n\t\t\t\tconst result = [];\n\t\t\t\tconst stack = [ ...blocks ];\n\t\t\t\twhile ( stack.length ) {\n\t\t\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\t\t\tstack.push( ...innerBlocks );\n\t\t\t\t\tresult.push( block );\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tconst blockList = clientIds.map( select.getBlock );\n\t\t\tconst flattenedBlocks = flattenBlocks( blockList );\n\n\t\t\t// Find the first message and use it.\n\t\t\tlet message;\n\t\t\tfor ( const rule of rules ) {\n\t\t\t\tmessage = rule.callback( flattenedBlocks );\n\t\t\t\tif ( message ) {\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tdisplayBlockRemovalPrompt(\n\t\t\t\t\t\t\tclientIds,\n\t\t\t\t\t\t\tselectPrevious,\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( selectPrevious ) {\n\t\t\tdispatch.selectPreviousBlock( clientIds[ 0 ], selectPrevious );\n\t\t}\n\n\t\t// We're batching these two actions because an extra `undo/redo` step can\n\t\t// be created, based on whether we insert a default block or not.\n\t\tregistry.batch( () => {\n\t\t\tdispatch( { type: 'REMOVE_BLOCKS', clientIds } );\n\t\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t\t// always a default block if the last of the blocks have been removed.\n\t\t\tdispatch( ensureDefaultBlock() );\n\t\t} );\n\t};\n\n/**\n * Action which will insert a default block insert action if there\n * are no other blocks at the root of the editor. This action should be used\n * in actions which may result in no blocks remaining in the editor (removal,\n * replacement, etc).\n */\nexport const ensureDefaultBlock =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t// always a default block if the last of the blocks have been removed.\n\t\tconst count = select.getBlockCount();\n\t\tif ( count > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there's an custom appender, don't insert default block.\n\t\t// We have to remember to manually move the focus elsewhere to\n\t\t// prevent it from being lost though.\n\t\tconst { __unstableHasCustomAppender } = select.getSettings();\n\t\tif ( __unstableHasCustomAppender ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch.insertDefaultBlock();\n\t};\n\n/**\n * Returns an action object used in signalling that a block removal prompt must\n * be displayed.\n *\n * Contrast with `setBlockRemovalRules`.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block or the\n *                                         immediate parent (if no previous\n *                                         block exists) should be selected\n *                                         when a block is removed.\n * @param {string}          message        Message to display in the prompt.\n *\n * @return {Object} Action object.\n */\nfunction displayBlockRemovalPrompt( clientIds, selectPrevious, message ) {\n\treturn {\n\t\ttype: 'DISPLAY_BLOCK_REMOVAL_PROMPT',\n\t\tclientIds,\n\t\tselectPrevious,\n\t\tmessage,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a block removal prompt must\n * be cleared, either be cause the user has confirmed or canceled the request\n * for removal.\n *\n * @return {Object} Action object.\n */\nexport function clearBlockRemovalPrompt() {\n\treturn {\n\t\ttype: 'CLEAR_BLOCK_REMOVAL_PROMPT',\n\t};\n}\n\n/**\n * Returns an action object used to set up any rules that a block editor may\n * provide in order to prevent a user from accidentally removing certain\n * blocks. These rules are then used to display a confirmation prompt to the\n * user. For instance, in the Site Editor, the Query Loop block is important\n * enough to warrant such confirmation.\n *\n * IMPORTANT: Registering rules implicitly signals to the `privateRemoveBlocks`\n * action that the editor will be responsible for displaying block removal\n * prompts and confirming deletions. This action is meant to be used by\n * component `BlockRemovalWarningModal` only.\n *\n * The data is a record whose keys are block types (e.g. 'core/query') and\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\n * displays a list of posts or pages.').\n *\n * Contrast with `displayBlockRemovalPrompt`.\n *\n * @param {Record<string,string>|false} rules Block removal rules.\n * @return {Object} Action object.\n */\nexport function setBlockRemovalRules( rules = false ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_REMOVAL_RULES',\n\t\trules,\n\t};\n}\n\n/**\n * Sets the client ID of the block settings menu that is currently open.\n *\n * @param {?string} clientId The block client ID.\n * @return {Object} Action object.\n */\nexport function setOpenedBlockSettingsMenu( clientId ) {\n\treturn {\n\t\ttype: 'SET_OPENED_BLOCK_SETTINGS_MENU',\n\t\tclientId,\n\t};\n}\n\nexport function setStyleOverride( id, style ) {\n\treturn {\n\t\ttype: 'SET_STYLE_OVERRIDE',\n\t\tid,\n\t\tstyle,\n\t};\n}\n\nexport function deleteStyleOverride( id ) {\n\treturn {\n\t\ttype: 'DELETE_STYLE_OVERRIDE',\n\t\tid,\n\t};\n}\n\n/**\n * Action that sets the element that had focus when focus leaves the editor canvas.\n *\n * @param {Object} lastFocus The last focused element.\n *\n *\n * @return {Object} Action object.\n */\nexport function setLastFocus( lastFocus = null ) {\n\treturn {\n\t\ttype: 'LAST_FOCUS',\n\t\tlastFocus,\n\t};\n}\n\n/**\n * Action that stops temporarily editing as blocks.\n *\n * @param {string} clientId The block's clientId.\n */\nexport function stopEditingAsBlocks( clientId ) {\n\treturn ( { select, dispatch, registry } ) => {\n\t\tconst focusModeToRevert = unlock(\n\t\t\tregistry.select( blockEditorStore )\n\t\t).getTemporarilyEditingFocusModeToRevert();\n\t\tdispatch.__unstableMarkNextChangeAsNotPersistent();\n\t\tdispatch.updateBlockAttributes( clientId, {\n\t\t\ttemplateLock: 'contentOnly',\n\t\t} );\n\t\tdispatch.updateBlockListSettings( clientId, {\n\t\t\t...select.getBlockListSettings( clientId ),\n\t\t\ttemplateLock: 'contentOnly',\n\t\t} );\n\t\tdispatch.updateSettings( { focusMode: focusModeToRevert } );\n\t\tdispatch.__unstableSetTemporarilyEditingAsBlocks();\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to drag.\n *\n * @return {Object} Action object.\n */\nexport function startDragging() {\n\treturn {\n\t\ttype: 'START_DRAGGING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped dragging.\n *\n * @return {Object} Action object.\n */\nexport function stopDragging() {\n\treturn {\n\t\ttype: 'STOP_DRAGGING',\n\t};\n}\n\n/**\n * @param {string|null} clientId The block's clientId, or `null` to clear.\n *\n * @return  {Object} Action object.\n */\nexport function expandBlock( clientId ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_EXPANDED_IN_LIST_VIEW',\n\t\tclientId,\n\t};\n}\n\n/**\n * @param {Object} value\n * @param {string} value.rootClientId The root client ID to insert at.\n * @param {number} value.index        The index to insert at.\n *\n * @return {Object} Action object.\n */\nexport function setInsertionPoint( value ) {\n\treturn {\n\t\ttype: 'SET_INSERTION_POINT',\n\t\tvalue,\n\t};\n}\n\n/**\n * Temporarily modify/unlock the content-only block for editions.\n *\n * @param {string} clientId The client id of the block.\n */\nexport const modifyContentLockBlock =\n\t( clientId ) =>\n\t( { select, dispatch } ) => {\n\t\tdispatch.selectBlock( clientId );\n\t\tdispatch.__unstableMarkNextChangeAsNotPersistent();\n\t\tdispatch.updateBlockAttributes( clientId, {\n\t\t\ttemplateLock: undefined,\n\t\t} );\n\t\tdispatch.updateBlockListSettings( clientId, {\n\t\t\t...select.getBlockListSettings( clientId ),\n\t\t\ttemplateLock: false,\n\t\t} );\n\t\tconst focusModeToRevert = select.getSettings().focusMode;\n\t\tdispatch.updateSettings( { focusMode: true } );\n\t\tdispatch.__unstableSetTemporarilyEditingAsBlocks(\n\t\t\tclientId,\n\t\t\tfocusModeToRevert\n\t\t);\n\t};\n\n/**\n * Sets the zoom level.\n *\n * @param {number} zoom the new zoom level\n * @return {Object} Action object.\n */\nexport const setZoomLevel =\n\t( zoom = 100 ) =>\n\t( { select, dispatch } ) => {\n\t\t// When switching to zoom-out mode, we need to select the parent section\n\t\tif ( zoom !== 100 ) {\n\t\t\tconst firstSelectedClientId = select.getBlockSelectionStart();\n\t\t\tconst sectionRootClientId = select.getSectionRootClientId();\n\n\t\t\tif ( firstSelectedClientId ) {\n\t\t\t\tlet sectionClientId;\n\n\t\t\t\tif ( sectionRootClientId ) {\n\t\t\t\t\tconst sectionClientIds =\n\t\t\t\t\t\tselect.getBlockOrder( sectionRootClientId );\n\n\t\t\t\t\t// If the selected block is a section block, use it.\n\t\t\t\t\tif ( sectionClientIds?.includes( firstSelectedClientId ) ) {\n\t\t\t\t\t\tsectionClientId = firstSelectedClientId;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If the selected block is not a section block, find\n\t\t\t\t\t\t// the parent section that contains the selected block.\n\t\t\t\t\t\tsectionClientId = select\n\t\t\t\t\t\t\t.getBlockParents( firstSelectedClientId )\n\t\t\t\t\t\t\t.find( ( parent ) =>\n\t\t\t\t\t\t\t\tsectionClientIds.includes( parent )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsectionClientId = select.getBlockHierarchyRootClientId(\n\t\t\t\t\t\tfirstSelectedClientId\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif ( sectionClientId ) {\n\t\t\t\t\tdispatch.selectBlock( sectionClientId );\n\t\t\t\t} else {\n\t\t\t\t\tdispatch.clearSelectedBlock();\n\t\t\t\t}\n\n\t\t\t\tspeak( __( 'You are currently in zoom-out mode.' ) );\n\t\t\t}\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'SET_ZOOM_LEVEL',\n\t\t\tzoom,\n\t\t} );\n\t};\n\n/**\n * Resets the Zoom state.\n * @return {Object} Action object.\n */\nexport function resetZoomLevel() {\n\treturn {\n\t\ttype: 'RESET_ZOOM_LEVEL',\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AACA,IAAAI,KAAA,GAAAJ,OAAA;AAKA,IAAAK,MAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AAZA;AACA;AACA;;AAMA;AACA;AACA;;AAIA,MAAMO,SAAS,GAAKC,UAAU,IAC7BC,KAAK,CAACC,OAAO,CAAEF,UAAW,CAAC,GAAGA,UAAU,GAAG,CAAEA,UAAU,CAAE;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,eAAe,GAAG,CACvB,yBAAyB,EACzB,yBAAyB,EACzB,eAAe,CACf;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,4BAA4BA,CAC3CC,QAAQ,EACR;EAAEC,yBAAyB,GAAG,KAAK;EAAEC,KAAK,GAAG;AAAM,CAAC,GAAG,CAAC,CAAC,EACxD;EACD,IAAIC,gBAAgB,GAAGH,QAAQ;EAE/B,IAAKI,MAAM,CAACC,MAAM,CAAEF,gBAAgB,EAAE,yBAA0B,CAAC,EAAG;IACnE,IAAAG,mBAAU,EACT,0FAA0F,EAC1F;MACCC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE;IACd,CACD,CAAC;IAEDL,gBAAgB,GAAG;MAAE,GAAGA;IAAiB,CAAC;IAC1CA,gBAAgB,CAACM,aAAa,GAC7BN,gBAAgB,CAACO,uBAAuB;IACzC,OAAOP,gBAAgB,CAACO,uBAAuB;EAChD;EAEA,IAAIC,aAAa,GAAGR,gBAAgB;;EAEpC;EACA;EACA,IAAKF,yBAAyB,IAAIW,iBAAQ,CAACC,EAAE,KAAK,KAAK,EAAG;IACzDF,aAAa,GAAG,CAAC,CAAC;IAClB,KAAM,MAAMG,GAAG,IAAIX,gBAAgB,EAAG;MACrC,IAAK,CAAEL,eAAe,CAACiB,QAAQ,CAAED,GAAI,CAAC,EAAG;QACxCH,aAAa,CAAEG,GAAG,CAAE,GAAGX,gBAAgB,CAAEW,GAAG,CAAE;MAC/C;IACD;EACD;EACA,OAAO;IACNE,IAAI,EAAE,iBAAiB;IACvBhB,QAAQ,EAAEW,aAAa;IACvBT;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASe,kBAAkBA,CAAA,EAAG;EACpC,OAAO;IACND,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASE,kBAAkBA,CAAA,EAAG;EACpC,OAAO;IACNF,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,mBAAmB,GAC/BA,CAAEC,SAAS,EAAEC,cAAc,GAAG,IAAI,EAAEC,WAAW,GAAG,KAAK,KACvD,CAAE;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAM;EACrC,IAAK,CAAEL,SAAS,IAAI,CAAEA,SAAS,CAACM,MAAM,EAAG;IACxC;EACD;EAEAN,SAAS,GAAG1B,SAAS,CAAE0B,SAAU,CAAC;EAClC,MAAMO,eAAe,GAAGJ,MAAM,CAACI,eAAe,CAAEP,SAAU,CAAC;EAE3D,IAAK,CAAEO,eAAe,EAAG;IACxB;EACD;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,KAAK,GAAG,CAAEN,WAAW,IAAIC,MAAM,CAACM,oBAAoB,CAAC,CAAC;EAE5D,IAAKD,KAAK,EAAG;IACZ,SAASE,aAAaA,CAAEC,MAAM,EAAG;MAChC,MAAMC,MAAM,GAAG,EAAE;MACjB,MAAMC,KAAK,GAAG,CAAE,GAAGF,MAAM,CAAE;MAC3B,OAAQE,KAAK,CAACP,MAAM,EAAG;QACtB,MAAM;UAAEQ,WAAW;UAAE,GAAGC;QAAM,CAAC,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC;QAC/CH,KAAK,CAACI,IAAI,CAAE,GAAGH,WAAY,CAAC;QAC5BF,MAAM,CAACK,IAAI,CAAEF,KAAM,CAAC;MACrB;MACA,OAAOH,MAAM;IACd;IAEA,MAAMM,SAAS,GAAGlB,SAAS,CAACmB,GAAG,CAAEhB,MAAM,CAACiB,QAAS,CAAC;IAClD,MAAMC,eAAe,GAAGX,aAAa,CAAEQ,SAAU,CAAC;;IAElD;IACA,IAAII,OAAO;IACX,KAAM,MAAMC,IAAI,IAAIf,KAAK,EAAG;MAC3Bc,OAAO,GAAGC,IAAI,CAACC,QAAQ,CAAEH,eAAgB,CAAC;MAC1C,IAAKC,OAAO,EAAG;QACdlB,QAAQ,CACPqB,yBAAyB,CACxBzB,SAAS,EACTC,cAAc,EACdqB,OACD,CACD,CAAC;QACD;MACD;IACD;EACD;EAEA,IAAKrB,cAAc,EAAG;IACrBG,QAAQ,CAACsB,mBAAmB,CAAE1B,SAAS,CAAE,CAAC,CAAE,EAAEC,cAAe,CAAC;EAC/D;;EAEA;EACA;EACAI,QAAQ,CAACsB,KAAK,CAAE,MAAM;IACrBvB,QAAQ,CAAE;MAAER,IAAI,EAAE,eAAe;MAAEI;IAAU,CAAE,CAAC;IAChD;IACA;IACAI,QAAQ,CAAEwB,kBAAkB,CAAC,CAAE,CAAC;EACjC,CAAE,CAAC;AACJ,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AALAC,OAAA,CAAA9B,mBAAA,GAAAA,mBAAA;AAMO,MAAM6B,kBAAkB,GAC9BA,CAAA,KACA,CAAE;EAAEzB,MAAM;EAAEC;AAAS,CAAC,KAAM;EAC3B;EACA;EACA,MAAM0B,KAAK,GAAG3B,MAAM,CAAC4B,aAAa,CAAC,CAAC;EACpC,IAAKD,KAAK,GAAG,CAAC,EAAG;IAChB;EACD;;EAEA;EACA;EACA;EACA,MAAM;IAAEE;EAA4B,CAAC,GAAG7B,MAAM,CAAC8B,WAAW,CAAC,CAAC;EAC5D,IAAKD,2BAA2B,EAAG;IAClC;EACD;EAEA5B,QAAQ,CAAC8B,kBAAkB,CAAC,CAAC;AAC9B,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdAL,OAAA,CAAAD,kBAAA,GAAAA,kBAAA;AAeA,SAASH,yBAAyBA,CAAEzB,SAAS,EAAEC,cAAc,EAAEqB,OAAO,EAAG;EACxE,OAAO;IACN1B,IAAI,EAAE,8BAA8B;IACpCI,SAAS;IACTC,cAAc;IACdqB;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASa,uBAAuBA,CAAA,EAAG;EACzC,OAAO;IACNvC,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASwC,oBAAoBA,CAAE5B,KAAK,GAAG,KAAK,EAAG;EACrD,OAAO;IACNZ,IAAI,EAAE,yBAAyB;IAC/BY;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS6B,0BAA0BA,CAAEC,QAAQ,EAAG;EACtD,OAAO;IACN1C,IAAI,EAAE,gCAAgC;IACtC0C;EACD,CAAC;AACF;AAEO,SAASC,gBAAgBA,CAAEC,EAAE,EAAEC,KAAK,EAAG;EAC7C,OAAO;IACN7C,IAAI,EAAE,oBAAoB;IAC1B4C,EAAE;IACFC;EACD,CAAC;AACF;AAEO,SAASC,mBAAmBA,CAAEF,EAAE,EAAG;EACzC,OAAO;IACN5C,IAAI,EAAE,uBAAuB;IAC7B4C;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,YAAYA,CAAEC,SAAS,GAAG,IAAI,EAAG;EAChD,OAAO;IACNhD,IAAI,EAAE,YAAY;IAClBgD;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,mBAAmBA,CAAEP,QAAQ,EAAG;EAC/C,OAAO,CAAE;IAAEnC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,KAAM;IAC5C,MAAMyC,iBAAiB,GAAG,IAAAC,kBAAM,EAC/B1C,QAAQ,CAACF,MAAM,CAAE6C,YAAiB,CACnC,CAAC,CAACC,sCAAsC,CAAC,CAAC;IAC1C7C,QAAQ,CAAC8C,uCAAuC,CAAC,CAAC;IAClD9C,QAAQ,CAAC+C,qBAAqB,CAAEb,QAAQ,EAAE;MACzCc,YAAY,EAAE;IACf,CAAE,CAAC;IACHhD,QAAQ,CAACiD,uBAAuB,CAAEf,QAAQ,EAAE;MAC3C,GAAGnC,MAAM,CAACmD,oBAAoB,CAAEhB,QAAS,CAAC;MAC1Cc,YAAY,EAAE;IACf,CAAE,CAAC;IACHhD,QAAQ,CAACmD,cAAc,CAAE;MAAEC,SAAS,EAAEV;IAAkB,CAAE,CAAC;IAC3D1C,QAAQ,CAACqD,uCAAuC,CAAC,CAAC;EACnD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAAA,EAAG;EAC/B,OAAO;IACN9D,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAAS+D,YAAYA,CAAA,EAAG;EAC9B,OAAO;IACN/D,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASgE,WAAWA,CAAEtB,QAAQ,EAAG;EACvC,OAAO;IACN1C,IAAI,EAAE,iCAAiC;IACvC0C;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASuB,iBAAiBA,CAAEC,KAAK,EAAG;EAC1C,OAAO;IACNlE,IAAI,EAAE,qBAAqB;IAC3BkE;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,MAAMC,sBAAsB,GAChCzB,QAAQ,IACV,CAAE;EAAEnC,MAAM;EAAEC;AAAS,CAAC,KAAM;EAC3BA,QAAQ,CAAC4D,WAAW,CAAE1B,QAAS,CAAC;EAChClC,QAAQ,CAAC8C,uCAAuC,CAAC,CAAC;EAClD9C,QAAQ,CAAC+C,qBAAqB,CAAEb,QAAQ,EAAE;IACzCc,YAAY,EAAEa;EACf,CAAE,CAAC;EACH7D,QAAQ,CAACiD,uBAAuB,CAAEf,QAAQ,EAAE;IAC3C,GAAGnC,MAAM,CAACmD,oBAAoB,CAAEhB,QAAS,CAAC;IAC1Cc,YAAY,EAAE;EACf,CAAE,CAAC;EACH,MAAMN,iBAAiB,GAAG3C,MAAM,CAAC8B,WAAW,CAAC,CAAC,CAACuB,SAAS;EACxDpD,QAAQ,CAACmD,cAAc,CAAE;IAAEC,SAAS,EAAE;EAAK,CAAE,CAAC;EAC9CpD,QAAQ,CAACqD,uCAAuC,CAC/CnB,QAAQ,EACRQ,iBACD,CAAC;AACF,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AALAjB,OAAA,CAAAkC,sBAAA,GAAAA,sBAAA;AAMO,MAAMG,YAAY,GACxBA,CAAEC,IAAI,GAAG,GAAG,KACZ,CAAE;EAAEhE,MAAM;EAAEC;AAAS,CAAC,KAAM;EAC3B;EACA,IAAK+D,IAAI,KAAK,GAAG,EAAG;IACnB,MAAMC,qBAAqB,GAAGjE,MAAM,CAACkE,sBAAsB,CAAC,CAAC;IAC7D,MAAMC,mBAAmB,GAAGnE,MAAM,CAACoE,sBAAsB,CAAC,CAAC;IAE3D,IAAKH,qBAAqB,EAAG;MAC5B,IAAII,eAAe;MAEnB,IAAKF,mBAAmB,EAAG;QAC1B,MAAMG,gBAAgB,GACrBtE,MAAM,CAACuE,aAAa,CAAEJ,mBAAoB,CAAC;;QAE5C;QACA,IAAKG,gBAAgB,EAAE9E,QAAQ,CAAEyE,qBAAsB,CAAC,EAAG;UAC1DI,eAAe,GAAGJ,qBAAqB;QACxC,CAAC,MAAM;UACN;UACA;UACAI,eAAe,GAAGrE,MAAM,CACtBwE,eAAe,CAAEP,qBAAsB,CAAC,CACxCQ,IAAI,CAAIC,MAAM,IACdJ,gBAAgB,CAAC9E,QAAQ,CAAEkF,MAAO,CACnC,CAAC;QACH;MACD,CAAC,MAAM;QACNL,eAAe,GAAGrE,MAAM,CAAC2E,6BAA6B,CACrDV,qBACD,CAAC;MACF;MAEA,IAAKI,eAAe,EAAG;QACtBpE,QAAQ,CAAC4D,WAAW,CAAEQ,eAAgB,CAAC;MACxC,CAAC,MAAM;QACNpE,QAAQ,CAAC2E,kBAAkB,CAAC,CAAC;MAC9B;MAEA,IAAAC,WAAK,EAAE,IAAAC,QAAE,EAAE,qCAAsC,CAAE,CAAC;IACrD;EACD;EAEA7E,QAAQ,CAAE;IACTR,IAAI,EAAE,gBAAgB;IACtBuE;EACD,CAAE,CAAC;AACJ,CAAC;;AAEF;AACA;AACA;AACA;AAHAtC,OAAA,CAAAqC,YAAA,GAAAA,YAAA;AAIO,SAASgB,cAAcA,CAAA,EAAG;EAChC,OAAO;IACNtF,IAAI,EAAE;EACP,CAAC;AACF","ignoreList":[]}