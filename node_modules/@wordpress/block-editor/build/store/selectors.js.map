{"version":3,"names":["_blocks","require","_element","_hooks","_icons","_richText","_deprecated","_interopRequireDefault","_data","_preferences","_utils","_sorting","_constants","_lockUnlock","_privateSelectors","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","EMPTY_SET","Set","DEFAULT_INSERTER_OPTIONS","isFiltered","getBlockName","state","clientId","block","blocks","byClientId","get","socialLinkName","Platform","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","has","tree","__unstableGetBlockWithoutInnerBlocks","exports","createSelector","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","deprecated","since","version","__unstableGetClientIdsTree","order","getBlockOrder","map","getClientIdsOfDescendants","rootIds","Array","isArray","ids","rootId","push","index","length","id","splice","getClientIdsWithDescendants","getGlobalBlockCount","blockName","clientIds","count","getBlocksByName","blockNames","foundBlocks","filter","includes","__experimentalGetGlobalBlocksByName","alternative","getBlocksByClientId","getBlockNamesByClientId","Boolean","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","_state$blocks$parents","parents","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","hasName","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","getAdjacentBlockClientId","startClientId","modifier","undefined","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","selectedClientIds","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableSelectionHasUnmergeableBlock","some","blockType","getBlockType","merge","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlockName","targetBlockType","blockToMerge","blocksToMerge","switchToBlockType","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockB","htmlA","htmlB","valueA","create","html","valueB","remove","text","toHTMLString","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","selectedBlockClientIds","hasDraggedInnerBlock","innerClientId","isBlockBeingDragged","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionCue","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","_getBlockListSettings","_state$settings$templ","templateLock","getBlockListSettings","isBlockVisibleInTheInserter","blockNameOrType","allowedBlockTypes","getSettings","isBlockAllowedInEditor","checkAllowList","concat","ancestor","hasParent","canInsertBlockTypeUnmemoized","isLocked","_isSectionBlock","isSectionBlock","getBlockEditingMode","parentBlockListSettings","parentName","parentBlockType","parentAllowedChildBlocks","allowedBlocks","hasParentAllowedBlock","parentAllowedBlocks","hasParentListAllowedBlock","blockAllowedParentBlocks","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestors","canInsert","applyFilters","bind","canInsertBlockType","createRegistrySelector","select","getInsertBlockTypeDependants","canInsertBlocks","every","canRemoveBlock","lock","isBlockWithinSection","getParentSectionBlock","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","hasBlockSupport","canLockBlocks","getInsertUsage","_state$preferences$in","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","item","variation","variationId","time","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","getBlockVariations","variations","utility","getInserterItems","options","buildReusableBlockInserterItem","reusableBlock","wp_pattern_sync_status","src","symbol","foreground","ref","raw","content","syncStatus","syncedPatternInserterItems","unlock","STORE_NAME","getReusableBlocks","buildBlockTypeInserterItem","blockTypeInserterItems","getBlockTypes","isAllowedInCurrentRoot","items","reduce","accumulator","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Object","fromEntries","entries","possibleTransforms","getPossibleBlockTransformations","orderBy","hasInserterItems","hasBlockType","hasReusableBlock","getAllowedBlocks","blockTypes","__experimentalGetAllowedBlocks","getDirectInsertBlock","_state$blockListSetti","defaultBlock","directInsert","blockListSettings","__experimentalGetDirectInsertBlock","__experimentalGetParsedPattern","patternName","pattern","getPatternBySlug","getParsedPattern","getAllowedPatternsDependants","getAllPatternsDependants","patternsWithParsedBlocks","WeakMap","enhancePatternWithParsedBlocks","enhancedPattern","set","__experimentalGetAllowedPatterns","getAllPatterns","patterns","parsedPatterns","inserter","availableParsedPatterns","checkAllowListRecursive","getGrammar","patternsAllowed","getPatternsByBlockTypes","normalizedBlockNames","filteredPatterns","__experimentalGetPatternsByBlockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","find","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","isNavigationMode","__unstableGetEditorMode","_state$settings$edito","window","__experimentalEditorWriteMode","editorTool","preferencesStore","hasBlockMovingClientId","hint","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","_state$blockVisibilit","blockVisibility","getHoveredBlockClientId","hoveredBlockClientId","__unstableGetVisibleBlocks","visibleBlocks","keys","key","size","__unstableHasActiveBlockOverlayActive","isZoomOut","sectionRootClientId","getSectionRootClientId","sectionClientIds","blockSupportDisable","shouldEnableIfUnselected","__unstableIsWithinBlockOverlay","isNavMode","derivedBlockEditingModes","derivedNavModeBlockEditingModes","blockEditingMode","blockEditingModes","hasContentRoleAttribute","blocksStore","isContent","isUngroupable","_clientId","getGroupingBlockName","groupingBlockName","_isUngroupable","transforms","ungroup","isGroupable","_clientIds","groupingBlockAvailable","_isGroupable","__unstableGetContentLockingParent","getContentLockingParent","__unstableGetTemporarilyEditingAsBlocks","getTemporarilyEditingAsBlocks","__unstableGetTemporarilyEditingFocusModeToRevert","getTemporarilyEditingFocusModeToRevert"],"sources":["@wordpress/block-editor/src/store/selectors.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetBlockVariations,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tswitchToBlockType,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\nimport { symbol } from '@wordpress/icons';\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\n/**\n * Internal dependencies\n */\nimport {\n\tisFiltered,\n\tcheckAllowListRecursive,\n\tcheckAllowList,\n\tgetAllPatternsDependants,\n\tgetInsertBlockTypeDependants,\n\tgetParsedPattern,\n\tgetGrammar,\n} from './utils';\nimport { orderBy } from '../utils/sorting';\nimport { STORE_NAME } from './constants';\nimport { unlock } from '../lock-unlock';\n\nimport {\n\tgetContentLockingParent,\n\tgetTemporarilyEditingAsBlocks,\n\tgetTemporarilyEditingFocusModeToRevert,\n\tgetSectionRootClientId,\n\tisSectionBlock,\n\tgetParentSectionBlock,\n\tisZoomOut,\n} from './private-selectors';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants.\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shared reference to an empty Set for cases where it is important to avoid\n * returning a new Set reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Set}\n */\nconst EMPTY_SET = new Set();\n\nconst DEFAULT_INSERTER_OPTIONS = {\n\t[ isFiltered ]: true,\n};\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes.get( clientId );\n\t\tconst { service } = attributes ?? {};\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {?Object} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes.get( clientId );\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree.get( clientId );\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId.get( clientId ),\n\t\tstate.blocks.attributes.get( clientId ),\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree.get( treeKey )?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn {\n\t\t\tclientId,\n\t\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn getBlockOrder( state, rootClientId ).map( ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants of the blocks\n * given. Returned ids are ordered first by the order of the ids given, then\n * by the order that they appear in the editor.\n *\n * @param {Object}          state   Global application state.\n * @param {string|string[]} rootIds Client ID(s) for which descendant blocks are to be returned.\n *\n * @return {Array} Client IDs of descendants.\n */\nexport const getClientIdsOfDescendants = createSelector(\n\t( state, rootIds ) => {\n\t\trootIds = Array.isArray( rootIds ) ? [ ...rootIds ] : [ rootIds ];\n\t\tconst ids = [];\n\n\t\t// Add the descendants of the root blocks first.\n\t\tfor ( const rootId of rootIds ) {\n\t\t\tconst order = state.blocks.order.get( rootId );\n\t\t\tif ( order ) {\n\t\t\t\tids.push( ...order );\n\t\t\t}\n\t\t}\n\n\t\tlet index = 0;\n\n\t\t// Add the descendants of the descendants, recursively.\n\t\twhile ( index < ids.length ) {\n\t\t\tconst id = ids[ index ];\n\t\t\tconst order = state.blocks.order.get( id );\n\t\t\tif ( order ) {\n\t\t\t\tids.splice( index + 1, 0, ...order );\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\n\t\treturn ids;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of the top-level blocks and\n * their descendants of any depth (for nested blocks). Ids are returned\n * in the same order that they appear in the editor.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = ( state ) =>\n\tgetClientIdsOfDescendants( state, '' );\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\tlet count = 0;\n\t\tfor ( const clientId of clientIds ) {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\tif ( block.name === blockName ) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all blocks that match a blockName. Results include nested blocks.\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} blockName Block name(s) for which clientIds are to be returned.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport const getBlocksByName = createSelector(\n\t( state, blockName ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tconst blockNames = Array.isArray( blockName )\n\t\t\t? blockName\n\t\t\t: [ blockName ];\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn blockNames.includes( block.name );\n\t\t} );\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all global blocks that match a blockName. Results include nested blocks.\n *\n * @deprecated\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} blockName Block name(s) for which clientIds are to be returned.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport function __experimentalGetGlobalBlocksByName( state, blockName ) {\n\tdeprecated(\n\t\t\"wp.data.select( 'core/block-editor' ).__experimentalGetGlobalBlocksByName\",\n\t\t{\n\t\t\tsince: '6.5',\n\t\t\talternative: `wp.data.select( 'core/block-editor' ).getBlocksByName`,\n\t\t}\n\t);\n\treturn getBlocksByName( state, blockName );\n}\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => getBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => state.blocks.tree.get( clientId )\n\t\t)\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * names.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which block names are to be returned.\n *\n * @return {string[]} Block names.\n */\nexport const getBlockNamesByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tgetBlocksByClientId( state, clientIds )\n\t\t\t.filter( Boolean )\n\t\t\t.map( ( block ) => block.name ),\n\t( state, clientIds ) => getBlocksByClientId( state, clientIds )\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount =\n\t\tgetMultiSelectedBlockClientIds( state ).length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @example\n *\n *```js\n * import { select } from '@wordpress/data'\n * import { store as blockEditorStore } from '@wordpress/block-editor'\n *\n * // Set initial active block client ID\n * let activeBlockClientId = null\n *\n * const getActiveBlockData = () => {\n * \tconst activeBlock = select(blockEditorStore).getSelectedBlock()\n *\n * \tif (activeBlock && activeBlock.clientId !== activeBlockClientId) {\n * \t\tactiveBlockClientId = activeBlock.clientId\n *\n * \t\t// Get active block name and attributes\n * \t\tconst activeBlockName = activeBlock.name\n * \t\tconst activeBlockAttributes = activeBlock.attributes\n *\n * \t\t// Log active block name and attributes\n * \t\tconsole.log(activeBlockName, activeBlockAttributes)\n * \t\t}\n * \t}\n *\n * \t// Subscribe to changes in the editor\n * \t// wp.data.subscribe(() => {\n * \t\t// getActiveBlockData()\n * \t// })\n *\n * \t// Update active block data on click\n * \t// onclick=\"getActiveBlockData()\"\n *```\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents.get( clientId ) ?? null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( ( current = state.blocks.parents.get( current ) ) ) {\n\t\t\tparents.push( current );\n\t\t}\n\n\t\tif ( ! parents.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\tconst hasName = Array.isArray( blockName )\n\t\t\t? ( name ) => blockName.includes( name )\n\t\t\t: ( name ) => blockName === name;\n\t\treturn parents.filter( ( id ) => hasName( getBlockName( state, id ) ) );\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents.get( current );\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order.get( rootClientId );\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif ( ! selectionStart.clientId || ! selectionEnd.clientId ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn getMultiSelectedBlockClientIds( state )[ 0 ] || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\tconst selectedClientIds = getMultiSelectedBlockClientIds( state );\n\treturn selectedClientIds[ selectedClientIds.length - 1 ] || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns true if the selection is not partial.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsFullySelected( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t! selectionAnchor.attributeKey &&\n\t\t! selectionFocus.attributeKey &&\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t);\n}\n\n/**\n * Returns true if the selection is collapsed.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is collapsed.\n */\nexport function __unstableIsSelectionCollapsed( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t!! selectionAnchor &&\n\t\t!! selectionFocus &&\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\n\t\tselectionAnchor.offset === selectionFocus.offset\n\t);\n}\n\nexport function __unstableSelectionHasUnmergeableBlock( state ) {\n\treturn getSelectedBlockClientIds( state ).some( ( clientId ) => {\n\t\tconst blockName = getBlockName( state, clientId );\n\t\tconst blockType = getBlockType( blockName );\n\t\treturn ! blockType.merge;\n\t} );\n}\n\n/**\n * Check whether the selection is mergeable.\n *\n * @param {Object}  state     Editor state.\n * @param {boolean} isForward Whether to merge forwards.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsSelectionMergeable( state, isForward ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\t// It's not mergeable if the start and end are within the same block.\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn false;\n\t}\n\n\t// It's not mergeable if there's no rich text selection.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn false;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not mergeable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn false;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tlet selectionStart, selectionEnd;\n\n\tif ( anchorIndex > focusIndex ) {\n\t\tselectionStart = selectionFocus;\n\t\tselectionEnd = selectionAnchor;\n\t} else {\n\t\tselectionStart = selectionAnchor;\n\t\tselectionEnd = selectionFocus;\n\t}\n\n\tconst targetBlockClientId = isForward\n\t\t? selectionEnd.clientId\n\t\t: selectionStart.clientId;\n\tconst blockToMergeClientId = isForward\n\t\t? selectionStart.clientId\n\t\t: selectionEnd.clientId;\n\n\tconst targetBlockName = getBlockName( state, targetBlockClientId );\n\tconst targetBlockType = getBlockType( targetBlockName );\n\n\tif ( ! targetBlockType.merge ) {\n\t\treturn false;\n\t}\n\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\n\n\t// It's mergeable if the blocks are of the same type.\n\tif ( blockToMerge.name === targetBlockName ) {\n\t\treturn true;\n\t}\n\n\t// If the blocks are of a different type, try to transform the block being\n\t// merged into the same type of block.\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlockName );\n\n\treturn blocksToMerge && blocksToMerge.length;\n}\n\n/**\n * Get partial selected blocks with their content updated\n * based on the selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object[]} Updated partial selected blocks.\n */\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\t// Can't split if the selection is not set.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not splittable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tconst [ selectionStart, selectionEnd ] =\n\t\tanchorIndex > focusIndex\n\t\t\t? [ selectionFocus, selectionAnchor ]\n\t\t\t: [ selectionAnchor, selectionFocus ];\n\n\tconst blockA = getBlock( state, selectionStart.clientId );\n\tconst blockB = getBlock( state, selectionEnd.clientId );\n\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\n\n\tlet valueA = create( { html: htmlA } );\n\tlet valueB = create( { html: htmlB } );\n\n\tvalueA = remove( valueA, 0, selectionStart.offset );\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\n\n\treturn [\n\t\t{\n\t\t\t...blockA,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueA,\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t...blockB,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueB,\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t];\n};\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order.get( rootClientId || '' ) || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId ) {\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\tconst selectedBlockClientIds = getSelectedBlockClientIds( state );\n\n\tif ( ! selectedBlockClientIds.length ) {\n\t\treturn false;\n\t}\n\n\tif ( deep ) {\n\t\treturn selectedBlockClientIds.some( ( id ) =>\n\t\t\t// Pass true because we don't care about order and it's more\n\t\t\t// performant.\n\t\t\tgetBlockParents( state, id, true ).includes( clientId )\n\t\t);\n\t}\n\n\treturn selectedBlockClientIds.some(\n\t\t( id ) => getBlockRootClientId( state, id ) === clientId\n\t);\n}\n\n/**\n * Returns true if one of the block's inner blocks is dragged.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block dragged\n */\nexport function hasDraggedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockBeingDragged( state, innerClientId ) ||\n\t\t\t( deep && hasDraggedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn parents.some( ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @deprecated\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.3',\n\t\t}\n\t);\n\n\treturn false;\n}\n\n/**\n * Returns the location of the insertion cue. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport const getBlockInsertionPoint = createSelector(\n\t( state ) => {\n\t\tlet rootClientId, index;\n\n\t\tconst {\n\t\t\tinsertionCue,\n\t\t\tselection: { selectionEnd },\n\t\t} = state;\n\t\tif ( insertionCue !== null ) {\n\t\t\treturn insertionCue;\n\t\t}\n\n\t\tconst { clientId } = selectionEnd;\n\n\t\tif ( clientId ) {\n\t\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\t\tindex = getBlockIndex( state, selectionEnd.clientId ) + 1;\n\t\t} else {\n\t\t\tindex = getBlockOrder( state ).length;\n\t\t}\n\n\t\treturn { rootClientId, index };\n\t},\n\t( state ) => [\n\t\tstate.insertionCue,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tstate.blocks.parents,\n\t\tstate.blocks.order,\n\t]\n);\n\n/**\n * Returns true if the block insertion point is visible.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionCue !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {string|false} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock ?? false;\n\t}\n\n\treturn getBlockListSettings( state, rootClientId )?.templateLock ?? false;\n}\n\n/**\n * Determines if the given block type is visible in the inserter.\n * Note that this is different than whether a block is allowed to be inserted.\n * In some cases, the block is not allowed in a given position but\n * it should still be visible in the inserter to be able to add it\n * to a different position.\n *\n * @param {Object}        state           Editor state.\n * @param {string|Object} blockNameOrType The block type object, e.g., the response\n *                                        from the block directory; or a string name of\n *                                        an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId    Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst isBlockVisibleInTheInserter = (\n\tstate,\n\tblockNameOrType,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tlet blockName;\n\n\tif ( blockNameOrType && 'object' === typeof blockNameOrType ) {\n\t\tblockType = blockNameOrType;\n\t\tblockName = blockNameOrType.name;\n\t} else {\n\t\tblockType = getBlockType( blockNameOrType );\n\t\tblockName = blockNameOrType;\n\t}\n\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\t// If parent blocks are not visible, child blocks should be hidden too.\n\tconst parents = (\n\t\tArray.isArray( blockType.parent ) ? blockType.parent : []\n\t).concat( Array.isArray( blockType.ancestor ) ? blockType.ancestor : [] );\n\tif ( parents.length > 0 ) {\n\t\t// This is an exception to the rule that says that all blocks are visible in the inserter.\n\t\t// Blocks that require a given parent or ancestor are only visible if we're within that parent.\n\t\tif ( parents.includes( 'core/post-content' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet current = rootClientId;\n\t\tlet hasParent = false;\n\t\tdo {\n\t\t\tif ( parents.includes( getBlockName( state, current ) ) ) {\n\t\t\t\thasParent = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t} while ( current );\n\n\t\treturn hasParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tif ( ! isBlockVisibleInTheInserter( state, blockName, rootClientId ) ) {\n\t\treturn false;\n\t}\n\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst _isSectionBlock = !! isSectionBlock( state, rootClientId );\n\tif ( _isSectionBlock ) {\n\t\treturn false;\n\t}\n\n\tif ( getBlockEditingMode( state, rootClientId ?? '' ) === 'disabled' ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst parentBlockType = getBlockType( parentName );\n\n\t// Look at the `blockType.allowedBlocks` field to determine whether this is an allowed child block.\n\tconst parentAllowedChildBlocks = parentBlockType?.allowedBlocks;\n\tlet hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedChildBlocks,\n\t\tblockName\n\t);\n\n\t// The `allowedBlocks` block list setting can further limit which blocks are allowed children.\n\tif ( hasParentAllowedBlock !== false ) {\n\t\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\t\tconst hasParentListAllowedBlock = checkAllowList(\n\t\t\tparentAllowedBlocks,\n\t\t\tblockName\n\t\t);\n\t\t// Never downgrade the result from `true` to `null`\n\t\tif ( hasParentListAllowedBlock !== null ) {\n\t\t\thasParentAllowedBlock = hasParentListAllowedBlock;\n\t\t}\n\t}\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tlet hasBlockAllowedAncestor = true;\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\n\tif ( blockAllowedAncestorBlocks ) {\n\t\tconst ancestors = [\n\t\t\trootClientId,\n\t\t\t...getBlockParents( state, rootClientId ),\n\t\t];\n\n\t\thasBlockAllowedAncestor = ancestors.some( ( ancestorClientId ) =>\n\t\t\tcheckAllowList(\n\t\t\t\tblockAllowedAncestorBlocks,\n\t\t\t\tgetBlockName( state, ancestorClientId )\n\t\t\t)\n\t\t);\n\t}\n\n\tconst canInsert =\n\t\thasBlockAllowedAncestor &&\n\t\t( ( hasParentAllowedBlock === null &&\n\t\t\thasBlockAllowedParent === null ) ||\n\t\t\thasParentAllowedBlock === true ||\n\t\t\thasBlockAllowedParent === true );\n\n\tif ( ! canInsert ) {\n\t\treturn canInsert;\n\t}\n\n\t/**\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\n\t * replaced by a declarative API that doesn't the following drawbacks:\n\t *\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\n\t * because you can't switch between the two modes while the inserter stays open.\n\t *\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\n\t * An ideal API would only affect specific editor instances.\n\t */\n\treturn applyFilters(\n\t\t'blockEditor.__unstableCanInsertBlockType',\n\t\tcanInsert,\n\t\tblockType,\n\t\trootClientId,\n\t\t{\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\n\t\t\t// context, the data will differ from the one selected from the root\n\t\t\t// registry.\n\t\t\tgetBlock: getBlock.bind( null, state ),\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\n\t\t\t\tnull,\n\t\t\t\tstate\n\t\t\t),\n\t\t}\n\t);\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\tcanInsertBlockTypeUnmemoized,\n\t\t( state, blockName, rootClientId ) =>\n\t\t\tgetInsertBlockTypeDependants( select )( state, rootClientId )\n\t)\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.remove !== undefined ) {\n\t\treturn ! attributes.lock.remove;\n\t}\n\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\tif ( getTemplateLock( state, rootClientId ) ) {\n\t\treturn false;\n\t}\n\n\tconst isBlockWithinSection = !! getParentSectionBlock( state, clientId );\n\tif ( isBlockWithinSection ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object} state     Editor state.\n * @param {string} clientIds The block client IDs to be removed.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds ) {\n\treturn clientIds.every( ( clientId ) => canRemoveBlock( state, clientId ) );\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.move !== undefined ) {\n\t\treturn ! attributes.lock.move;\n\t}\n\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\tif ( getTemplateLock( state, rootClientId ) === 'all' ) {\n\t\treturn false;\n\t}\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object} state     Editor state.\n * @param {string} clientIds The block client IDs to be moved.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds ) {\n\treturn clientIds.every( ( clientId ) => canMoveBlock( state, clientId ) );\n}\n\n/**\n * Determines if the given block is allowed to be edited.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be edited.\n */\nexport function canEditBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\n\t// When the edit is true, we cannot edit the block.\n\treturn ! lock?.edit;\n}\n\n/**\n * Determines if the given block type can be locked/unlocked by a user.\n *\n * @param {Object}          state      Editor state.\n * @param {(string|Object)} nameOrType Block name or type object.\n *\n * @return {boolean} Whether a given block type can be locked/unlocked.\n */\nexport function canLockBlockType( state, nameOrType ) {\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\n\t\treturn false;\n\t}\n\n\t// Use block editor settings as the default value.\n\treturn !! state.settings?.canLockBlocks;\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to transform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequency and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transforms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem =\n\t( state, { buildScope = 'inserter' } ) =>\n\t( blockType ) => {\n\t\tconst id = blockType.name;\n\n\t\tlet isDisabled = false;\n\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\tisDisabled = getBlocksByClientId(\n\t\t\t\tstate,\n\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t).some( ( { name } ) => name === blockType.name );\n\t\t}\n\n\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\tconst blockItemBase = {\n\t\t\tid,\n\t\t\tname: blockType.name,\n\t\t\ttitle: blockType.title,\n\t\t\ticon: blockType.icon,\n\t\t\tisDisabled,\n\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t};\n\t\tif ( buildScope === 'transform' ) {\n\t\t\treturn blockItemBase;\n\t\t}\n\n\t\tconst inserterVariations = getBlockVariations(\n\t\t\tblockType.name,\n\t\t\t'inserter'\n\t\t);\n\t\treturn {\n\t\t\t...blockItemBase,\n\t\t\tinitialAttributes: {},\n\t\t\tdescription: blockType.description,\n\t\t\tcategory: blockType.category,\n\t\t\tkeywords: blockType.keywords,\n\t\t\tparent: blockType.parent,\n\t\t\tancestor: blockType.ancestor,\n\t\t\tvariations: inserterVariations,\n\t\t\texample: blockType.example,\n\t\t\tutility: 1, // Deprecated.\n\t\t};\n\t};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequency and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null, options = DEFAULT_INSERTER_OPTIONS ) => {\n\t\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\t\tconst icon = ! reusableBlock.wp_pattern_sync_status\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tsrc: symbol,\n\t\t\t\t\t\t\tforeground: 'var(--wp-block-synced-color)',\n\t\t\t\t\t  }\n\t\t\t\t\t: symbol;\n\t\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\t\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\tname: 'core/block',\n\t\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\t\ttitle: reusableBlock.title?.raw,\n\t\t\t\t\ticon,\n\t\t\t\t\tcategory: 'reusable',\n\t\t\t\t\tkeywords: [ 'reusable' ],\n\t\t\t\t\tisDisabled: false,\n\t\t\t\t\tutility: 1, // Deprecated.\n\t\t\t\t\tfrecency,\n\t\t\t\t\tcontent: reusableBlock.content?.raw,\n\t\t\t\t\tsyncStatus: reusableBlock.wp_pattern_sync_status,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tconst syncedPatternInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\t\tstate,\n\t\t\t\t'core/block',\n\t\t\t\trootClientId\n\t\t\t)\n\t\t\t\t? unlock( select( STORE_NAME ) )\n\t\t\t\t\t\t.getReusableBlocks()\n\t\t\t\t\t\t.map( buildReusableBlockInserterItem )\n\t\t\t\t: [];\n\n\t\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\t\tbuildScope: 'inserter',\n\t\t\t} );\n\n\t\t\tlet blockTypeInserterItems = getBlockTypes()\n\t\t\t\t.filter( ( blockType ) =>\n\t\t\t\t\thasBlockSupport( blockType, 'inserter', true )\n\t\t\t\t)\n\t\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\t\tif ( options[ isFiltered ] !== false ) {\n\t\t\t\tblockTypeInserterItems = blockTypeInserterItems.filter(\n\t\t\t\t\t( blockType ) =>\n\t\t\t\t\t\tcanIncludeBlockTypeInInserter(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tblockType,\n\t\t\t\t\t\t\trootClientId\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tblockTypeInserterItems = blockTypeInserterItems\n\t\t\t\t\t.filter( ( blockType ) =>\n\t\t\t\t\t\tisBlockVisibleInTheInserter(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tblockType,\n\t\t\t\t\t\t\trootClientId\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t.map( ( blockType ) => ( {\n\t\t\t\t\t\t...blockType,\n\t\t\t\t\t\tisAllowedInCurrentRoot: canIncludeBlockTypeInInserter(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tblockType,\n\t\t\t\t\t\t\trootClientId\n\t\t\t\t\t\t),\n\t\t\t\t\t} ) );\n\t\t\t}\n\n\t\t\tconst items = blockTypeInserterItems.reduce(\n\t\t\t\t( accumulator, item ) => {\n\t\t\t\t\tconst { variations = [] } = item;\n\t\t\t\t\t// Exclude any block type item that is to be replaced by a default variation.\n\t\t\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\n\t\t\t\t\t\taccumulator.push( item );\n\t\t\t\t\t}\n\t\t\t\t\tif ( variations.length ) {\n\t\t\t\t\t\tconst variationMapper = getItemFromVariation(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\titem\n\t\t\t\t\t\t);\n\t\t\t\t\t\taccumulator.push(\n\t\t\t\t\t\t\t...variations.map( variationMapper )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn accumulator;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t);\n\n\t\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t\t// because third party blocks can be registered earlier than\n\t\t\t// the core blocks (usually by using the `init` action),\n\t\t\t// thus affecting the display order.\n\t\t\t// We don't sort reusable blocks as they are handled differently.\n\t\t\tconst groupByType = ( blocks, block ) => {\n\t\t\t\tconst { core, noncore } = blocks;\n\t\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\t\ttype.push( block );\n\t\t\t\treturn blocks;\n\t\t\t};\n\t\t\tconst { core: coreItems, noncore: nonCoreItems } = items.reduce(\n\t\t\t\tgroupByType,\n\t\t\t\t{ core: [], noncore: [] }\n\t\t\t);\n\t\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\n\t\t\treturn [ ...sortedBlockTypes, ...syncedPatternInserterItems ];\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\tgetBlockTypes(),\n\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\n\t\t\tstate.blocks.order,\n\t\t\tstate.preferences.insertUsage,\n\t\t\t...getInsertBlockTypeDependants( select )( state, rootClientId ),\n\t\t]\n\t)\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequency and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}          state        Editor state.\n * @param    {Object|Object[]} blocks       Block object or array objects.\n * @param    {?string}         rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}          id           Unique identifier for the item.\n * @property {string}          name         The type of block to create.\n * @property {string}          title        Title of the item, as it appears in the inserter.\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\n *                                          this item.\n * @property {number}          frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, blocks, rootClientId = null ) => {\n\t\t\tconst normalizedBlocks = Array.isArray( blocks )\n\t\t\t\t? blocks\n\t\t\t\t: [ blocks ];\n\t\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\t\tbuildScope: 'transform',\n\t\t\t} );\n\t\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t\t.filter( ( blockType ) =>\n\t\t\t\t\tcanIncludeBlockTypeInInserter(\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tblockType,\n\t\t\t\t\t\trootClientId\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\t\tconst itemsByName = Object.fromEntries(\n\t\t\t\tObject.entries( blockTypeTransformItems ).map(\n\t\t\t\t\t( [ , value ] ) => [ value.name, value ]\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\t\tnormalizedBlocks\n\t\t\t).reduce( ( accumulator, block ) => {\n\t\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, [] );\n\t\t\treturn orderBy(\n\t\t\t\tpossibleTransforms,\n\t\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t\t'desc'\n\t\t\t);\n\t\t},\n\t\t( state, blocks, rootClientId ) => [\n\t\t\tgetBlockTypes(),\n\t\t\tstate.preferences.insertUsage,\n\t\t\t...getInsertBlockTypeDependants( select )( state, rootClientId ),\n\t\t]\n\t)\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createRegistrySelector(\n\t( select ) =>\n\t\t( state, rootClientId = null ) => {\n\t\t\tconst hasBlockType = getBlockTypes().some( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t);\n\t\t\tif ( hasBlockType ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst hasReusableBlock =\n\t\t\t\tcanInsertBlockTypeUnmemoized(\n\t\t\t\t\tstate,\n\t\t\t\t\t'core/block',\n\t\t\t\t\trootClientId\n\t\t\t\t) &&\n\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks().length > 0;\n\n\t\t\treturn hasReusableBlock;\n\t\t}\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const getAllowedBlocks = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null ) => {\n\t\t\tif ( ! rootClientId ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockTypes = getBlockTypes().filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t);\n\n\t\t\tconst hasReusableBlock =\n\t\t\t\tcanInsertBlockTypeUnmemoized(\n\t\t\t\t\tstate,\n\t\t\t\t\t'core/block',\n\t\t\t\t\trootClientId\n\t\t\t\t) &&\n\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks().length > 0;\n\n\t\t\tif ( hasReusableBlock ) {\n\t\t\t\tblockTypes.push( 'core/block' );\n\t\t\t}\n\n\t\t\treturn blockTypes;\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\tgetBlockTypes(),\n\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\n\t\t\t...getInsertBlockTypeDependants( select )( state, rootClientId ),\n\t\t]\n\t)\n);\n\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetAllowedBlocks',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getAllowedBlocks',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getAllowedBlocks( state, rootClientId );\n\t},\n\t( state, rootClientId ) =>\n\t\tgetAllowedBlocks.getDependants( state, rootClientId )\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param    {Object}         state            Editor state.\n * @param    {?string}        rootClientId     Optional root client ID of block list.\n *\n * @return {WPDirectInsertBlock|undefined}              The block type to be directly inserted.\n *\n * @typedef {Object} WPDirectInsertBlock\n * @property {string}         name             The type of block.\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjacent blocks when inserted.\n */\nexport function getDirectInsertBlock( state, rootClientId = null ) {\n\tif ( ! rootClientId ) {\n\t\treturn;\n\t}\n\tconst { defaultBlock, directInsert } =\n\t\tstate.blockListSettings[ rootClientId ] ?? {};\n\tif ( ! defaultBlock || ! directInsert ) {\n\t\treturn;\n\t}\n\n\treturn defaultBlock;\n}\n\nexport function __experimentalGetDirectInsertBlock(\n\tstate,\n\trootClientId = null\n) {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetDirectInsertBlock',\n\t\t{\n\t\t\talternative:\n\t\t\t\t'wp.data.select( \"core/block-editor\" ).getDirectInsertBlock',\n\t\t\tsince: '6.3',\n\t\t\tversion: '6.4',\n\t\t}\n\t);\n\treturn getDirectInsertBlock( state, rootClientId );\n}\n\nexport const __experimentalGetParsedPattern = createRegistrySelector(\n\t( select ) => ( state, patternName ) => {\n\t\tconst pattern = unlock( select( STORE_NAME ) ).getPatternBySlug(\n\t\t\tpatternName\n\t\t);\n\t\treturn pattern ? getParsedPattern( pattern ) : null;\n\t}\n);\n\nconst getAllowedPatternsDependants = ( select ) => ( state, rootClientId ) => [\n\t...getAllPatternsDependants( select )( state ),\n\t...getInsertBlockTypeDependants( select )( state, rootClientId ),\n];\n\nconst patternsWithParsedBlocks = new WeakMap();\nfunction enhancePatternWithParsedBlocks( pattern ) {\n\tlet enhancedPattern = patternsWithParsedBlocks.get( pattern );\n\tif ( ! enhancedPattern ) {\n\t\tenhancedPattern = {\n\t\t\t...pattern,\n\t\t\tget blocks() {\n\t\t\t\treturn getParsedPattern( pattern ).blocks;\n\t\t\t},\n\t\t};\n\t\tpatternsWithParsedBlocks.set( pattern, enhancedPattern );\n\t}\n\treturn enhancedPattern;\n}\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createRegistrySelector(\n\t( select ) => {\n\t\treturn createSelector(\n\t\t\t(\n\t\t\t\tstate,\n\t\t\t\trootClientId = null,\n\t\t\t\toptions = DEFAULT_INSERTER_OPTIONS\n\t\t\t) => {\n\t\t\t\tconst { getAllPatterns } = unlock( select( STORE_NAME ) );\n\t\t\t\tconst patterns = getAllPatterns();\n\t\t\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\t\t\tconst parsedPatterns = patterns\n\t\t\t\t\t.filter( ( { inserter = true } ) => !! inserter )\n\t\t\t\t\t.map( enhancePatternWithParsedBlocks );\n\n\t\t\t\tconst availableParsedPatterns = parsedPatterns.filter(\n\t\t\t\t\t( pattern ) =>\n\t\t\t\t\t\tcheckAllowListRecursive(\n\t\t\t\t\t\t\tgetGrammar( pattern ),\n\t\t\t\t\t\t\tallowedBlockTypes\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tconst patternsAllowed = availableParsedPatterns.filter(\n\t\t\t\t\t( pattern ) =>\n\t\t\t\t\t\tgetGrammar( pattern ).every( ( { blockName: name } ) =>\n\t\t\t\t\t\t\toptions[ isFiltered ] !== false\n\t\t\t\t\t\t\t\t? canInsertBlockType(\n\t\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\trootClientId\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: isBlockVisibleInTheInserter(\n\t\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\trootClientId\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\treturn patternsAllowed;\n\t\t\t},\n\t\t\tgetAllowedPatternsDependants( select )\n\t\t);\n\t}\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching patterns.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const getPatternsByBlockTypes = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, blockNames, rootClientId = null ) => {\n\t\t\tif ( ! blockNames ) {\n\t\t\t\treturn EMPTY_ARRAY;\n\t\t\t}\n\t\t\tconst patterns =\n\t\t\t\tselect( STORE_NAME ).__experimentalGetAllowedPatterns(\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t\t? blockNames\n\t\t\t\t: [ blockNames ];\n\t\t\tconst filteredPatterns = patterns.filter( ( pattern ) =>\n\t\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t\t)\n\t\t\t);\n\t\t\tif ( filteredPatterns.length === 0 ) {\n\t\t\t\treturn EMPTY_ARRAY;\n\t\t\t}\n\t\t\treturn filteredPatterns;\n\t\t},\n\t\t( state, blockNames, rootClientId ) =>\n\t\t\tgetAllowedPatternsDependants( select )( state, rootClientId )\n\t)\n);\n\nexport const __experimentalGetPatternsByBlockTypes = createRegistrySelector(\n\t( select ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetPatternsByBlockTypes',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getPatternsByBlockTypes',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn select( STORE_NAME ).getPatternsByBlockTypes;\n\t}\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `role` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector(\n\t\t\t( state, blocks, rootClientId = null ) => {\n\t\t\t\tif ( ! blocks ) {\n\t\t\t\t\treturn EMPTY_ARRAY;\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t\t\t * the `role` property of blocks' attributes for the transformation.\n\t\t\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t\t\t * to check for this case too.\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tblocks.some(\n\t\t\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn EMPTY_ARRAY;\n\t\t\t\t}\n\n\t\t\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\t\t\tconst selectedBlockNames = Array.from(\n\t\t\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t\t\t);\n\t\t\t\t/**\n\t\t\t\t * Here we will return first set of possible eligible block patterns,\n\t\t\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t\t\t */\n\t\t\t\treturn select( STORE_NAME ).getPatternsByBlockTypes(\n\t\t\t\t\tselectedBlockNames,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t},\n\t\t\t( state, blocks, rootClientId ) =>\n\t\t\t\tgetAllowedPatternsDependants( select )( state, rootClientId )\n\t\t)\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector(\n\t\t\t( state, ref ) => {\n\t\t\t\tdeprecated(\n\t\t\t\t\t\"wp.data.select( 'core/block-editor' ).__experimentalGetReusableBlockTitle\",\n\t\t\t\t\t{\n\t\t\t\t\t\tsince: '6.6',\n\t\t\t\t\t\tversion: '6.8',\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tconst reusableBlock = unlock( select( STORE_NAME ) )\n\t\t\t\t\t.getReusableBlocks()\n\t\t\t\t\t.find( ( block ) => block.id === ref );\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn reusableBlock.title?.raw;\n\t\t\t},\n\t\t\t() => [ unlock( select( STORE_NAME ) ).getReusableBlocks() ]\n\t\t)\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn __unstableGetEditorMode( state ) === 'navigation';\n}\n\n/**\n * Returns the current editor mode.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} the editor mode.\n */\nexport const __unstableGetEditorMode = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tif ( ! window?.__experimentalEditorWriteMode ) {\n\t\t\treturn 'edit';\n\t\t}\n\t\treturn (\n\t\t\tstate.settings.editorTool ??\n\t\t\tselect( preferencesStore ).get( 'core', 'editorTool' )\n\t\t);\n\t}\n);\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @deprecated\n */\nexport function hasBlockMovingClientId() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).hasBlockMovingClientId',\n\t\t{\n\t\t\tsince: '6.7',\n\t\t\thint: 'Block moving mode feature has been removed',\n\t\t}\n\t);\n\treturn false;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn entityAreaParents[ entityAreaParents.length - 1 ];\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientIds?.includes( clientId ) &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n\n/**\n * Tells if the block is visible on the canvas or not.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n * @return {boolean} True if the block is visible.\n */\nexport function isBlockVisible( state, clientId ) {\n\treturn state.blockVisibility?.[ clientId ] ?? true;\n}\n\n/**\n * Returns the currently hovered block.\n *\n * @param {Object} state Global application state.\n * @return {Object} Client Id of the hovered block.\n */\nexport function getHoveredBlockClientId( state ) {\n\treturn state.hoveredBlockClientId;\n}\n\n/**\n * Returns the list of all hidden blocks.\n *\n * @param {Object} state Global application state.\n * @return {[string]} List of hidden blocks.\n */\nexport const __unstableGetVisibleBlocks = createSelector(\n\t( state ) => {\n\t\tconst visibleBlocks = new Set(\n\t\t\tObject.keys( state.blockVisibility ).filter(\n\t\t\t\t( key ) => state.blockVisibility[ key ]\n\t\t\t)\n\t\t);\n\t\tif ( visibleBlocks.size === 0 ) {\n\t\t\treturn EMPTY_SET;\n\t\t}\n\t\treturn visibleBlocks;\n\t},\n\t( state ) => [ state.blockVisibility ]\n);\n\nexport function __unstableHasActiveBlockOverlayActive( state, clientId ) {\n\t// Prevent overlay on blocks with a non-default editing mode. If the mode is\n\t// 'disabled' then the overlay is redundant since the block can't be\n\t// selected. If the mode is 'contentOnly' then the overlay is redundant\n\t// since there will be no controls to interact with once selected.\n\tif ( getBlockEditingMode( state, clientId ) !== 'default' ) {\n\t\treturn false;\n\t}\n\n\t// If the block editing is locked, the block overlay is always active.\n\tif ( ! canEditBlock( state, clientId ) ) {\n\t\treturn true;\n\t}\n\n\t// In zoom-out mode, the block overlay is always active for section level blocks.\n\tif ( isZoomOut( state ) ) {\n\t\tconst sectionRootClientId = getSectionRootClientId( state );\n\t\tif ( sectionRootClientId ) {\n\t\t\tconst sectionClientIds = getBlockOrder(\n\t\t\t\tstate,\n\t\t\t\tsectionRootClientId\n\t\t\t);\n\t\t\tif ( sectionClientIds?.includes( clientId ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if ( clientId && ! getBlockRootClientId( state, clientId ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// In navigation mode, the block overlay is active when the block is not\n\t// selected (and doesn't contain a selected child). The same behavior is\n\t// also enabled in all modes for blocks that have controlled children\n\t// (reusable block, template part, navigation), unless explicitly disabled\n\t// with `supports.__experimentalDisableBlockOverlay`.\n\tconst blockSupportDisable = hasBlockSupport(\n\t\tgetBlockName( state, clientId ),\n\t\t'__experimentalDisableBlockOverlay',\n\t\tfalse\n\t);\n\tconst shouldEnableIfUnselected = blockSupportDisable\n\t\t? false\n\t\t: areInnerBlocksControlled( state, clientId );\n\n\treturn (\n\t\tshouldEnableIfUnselected &&\n\t\t! isBlockSelected( state, clientId ) &&\n\t\t! hasSelectedInnerBlock( state, clientId, true )\n\t);\n}\n\nexport function __unstableIsWithinBlockOverlay( state, clientId ) {\n\tlet parent = state.blocks.parents.get( clientId );\n\twhile ( !! parent ) {\n\t\tif ( __unstableHasActiveBlockOverlayActive( state, parent ) ) {\n\t\t\treturn true;\n\t\t}\n\t\tparent = state.blocks.parents.get( parent );\n\t}\n\treturn false;\n}\n\n/**\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\n */\n\n/**\n * Returns the block editing mode for a given block.\n *\n * The mode can be one of three options:\n *\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\n *   selected.\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\n *   toolbar, the block movers, block settings.\n * - `'default'`: Allows editing the block as normal.\n *\n * Blocks can set a mode using the `useBlockEditingMode` hook.\n *\n * The mode is inherited by all of the block's inner blocks, unless they have\n * their own mode.\n *\n * A template lock can also set a mode. If the template lock is `'contentOnly'`,\n * the block's mode is overridden to `'contentOnly'` if the block has a content\n * role attribute, or `'disabled'` otherwise.\n *\n * @see useBlockEditingMode\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID, or `''` for the root container.\n *\n * @return {BlockEditingMode} The block editing mode. One of `'disabled'`,\n *                            `'contentOnly'`, or `'default'`.\n */\nexport const getBlockEditingMode = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\t// Some selectors that call this provide `null` as the default\n\t\t\t// rootClientId, but the default rootClientId is actually `''`.\n\t\t\tif ( clientId === null ) {\n\t\t\t\tclientId = '';\n\t\t\t}\n\n\t\t\tconst isNavMode = isNavigationMode( state );\n\n\t\t\t// If the editor is currently not in navigation mode, check if the clientId\n\t\t\t// has an editing mode set in the regular derived map.\n\t\t\t// There may be an editing mode set here for synced patterns or in zoomed out\n\t\t\t// mode.\n\t\t\tif (\n\t\t\t\t! isNavMode &&\n\t\t\t\tstate.derivedBlockEditingModes?.has( clientId )\n\t\t\t) {\n\t\t\t\treturn state.derivedBlockEditingModes.get( clientId );\n\t\t\t}\n\n\t\t\t// If the editor *is* in navigation mode, the block editing mode states\n\t\t\t// are stored in the derivedNavModeBlockEditingModes map.\n\t\t\tif (\n\t\t\t\tisNavMode &&\n\t\t\t\tstate.derivedNavModeBlockEditingModes?.has( clientId )\n\t\t\t) {\n\t\t\t\treturn state.derivedNavModeBlockEditingModes.get( clientId );\n\t\t\t}\n\n\t\t\t// In normal mode, consider that an explicitly set editing mode takes over.\n\t\t\tconst blockEditingMode = state.blockEditingModes.get( clientId );\n\t\t\tif ( blockEditingMode ) {\n\t\t\t\treturn blockEditingMode;\n\t\t\t}\n\n\t\t\t// In normal mode, top level is default mode.\n\t\t\tif ( clientId === '' ) {\n\t\t\t\treturn 'default';\n\t\t\t}\n\n\t\t\tconst rootClientId = getBlockRootClientId( state, clientId );\n\t\t\tconst templateLock = getTemplateLock( state, rootClientId );\n\t\t\t// If the parent of the block is contentOnly locked, check whether it's a content block.\n\t\t\tif ( templateLock === 'contentOnly' ) {\n\t\t\t\tconst name = getBlockName( state, clientId );\n\t\t\t\tconst { hasContentRoleAttribute } = unlock(\n\t\t\t\t\tselect( blocksStore )\n\t\t\t\t);\n\t\t\t\tconst isContent = hasContentRoleAttribute( name );\n\t\t\t\treturn isContent ? 'contentOnly' : 'disabled';\n\t\t\t}\n\t\t\treturn 'default';\n\t\t}\n);\n\n/**\n * Indicates if a block is ungroupable.\n * A block is ungroupable if it is a single grouping block with inner blocks.\n * If a block has an `ungroup` transform, it is also ungroupable, without the\n * requirement of being the default grouping block.\n * Additionally a block can only be ungrouped if it has inner blocks and can\n * be removed.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block. If not passed the selected block's client id will be used.\n * @return {boolean} True if the block is ungroupable.\n */\nexport const isUngroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tconst _clientId = clientId || getSelectedBlockClientId( state );\n\t\t\tif ( ! _clientId ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst block = getBlock( state, _clientId );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _isUngroupable =\n\t\t\t\tblock &&\n\t\t\t\t( block.name === groupingBlockName ||\n\t\t\t\t\tgetBlockType( block.name )?.transforms?.ungroup ) &&\n\t\t\t\t!! block.innerBlocks.length;\n\n\t\t\treturn _isUngroupable && canRemoveBlock( state, _clientId );\n\t\t}\n);\n\n/**\n * Indicates if the provided blocks(by client ids) are groupable.\n * We need to have at least one block, have a grouping block name set and\n * be able to remove these blocks.\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} clientIds Block client ids. If not passed the selected blocks client ids will be used.\n * @return {boolean} True if the blocks are groupable.\n */\nexport const isGroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientIds = EMPTY_ARRAY ) => {\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _clientIds = clientIds?.length\n\t\t\t\t? clientIds\n\t\t\t\t: getSelectedBlockClientIds( state );\n\t\t\tconst rootClientId = _clientIds?.length\n\t\t\t\t? getBlockRootClientId( state, _clientIds[ 0 ] )\n\t\t\t\t: undefined;\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t\tstate,\n\t\t\t\tgroupingBlockName,\n\t\t\t\trootClientId\n\t\t\t);\n\t\t\tconst _isGroupable = groupingBlockAvailable && _clientIds.length;\n\t\t\treturn _isGroupable && canRemoveBlocks( state, _clientIds );\n\t\t}\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @deprecated\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n *\n * @return {?string} Client ID of the ancestor block that is content locking the block.\n */\nexport const __unstableGetContentLockingParent = ( state, clientId ) => {\n\tdeprecated(\n\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetContentLockingParent\",\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.7',\n\t\t}\n\t);\n\treturn getContentLockingParent( state, clientId );\n};\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @deprecated\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingAsBlocks( state ) {\n\tdeprecated(\n\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetTemporarilyEditingAsBlocks\",\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.7',\n\t\t}\n\t);\n\treturn getTemporarilyEditingAsBlocks( state );\n}\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @deprecated\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingFocusModeToRevert( state ) {\n\tdeprecated(\n\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetTemporarilyEditingFocusModeToRevert\",\n\t\t{\n\t\t\tsince: '6.5',\n\t\t\tversion: '6.7',\n\t\t}\n\t);\n\treturn getTemporarilyEditingFocusModeToRevert( state );\n}\n"],"mappings":"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","ignoreList":[]}