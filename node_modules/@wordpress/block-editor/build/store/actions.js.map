{"version":3,"names":["_blocks","require","_a11y","_i18n","_notices","_richText","_deprecated","_interopRequireDefault","_preferences","_selection","_privateActions","castArray","maybeArray","Array","isArray","resetBlocks","blocks","dispatch","type","validateBlocksToTemplate","exports","select","template","getTemplate","templateLock","getTemplateLock","isBlocksValidToTemplate","doBlocksMatchTemplate","isValidTemplate","setTemplateValidity","resetSelection","selectionStart","selectionEnd","initialPosition","receiveBlocks","deprecated","since","alternative","updateBlockAttributes","clientIds","attributes","uniqueByBlock","updateBlock","clientId","updates","selectBlock","hoverBlock","selectPreviousBlock","fallbackToParent","previousBlockClientId","getPreviousBlockClientId","firstParentClientId","getBlockRootClientId","selectNextBlock","nextBlockClientId","getNextBlockClientId","startMultiSelect","stopMultiSelect","multiSelect","start","end","__experimentalInitialPosition","startBlockRootClientId","endBlockRootClientId","blockCount","getSelectedBlockCount","speak","sprintf","_n","clearSelectedBlock","toggleSelection","isSelectionEnabled","replaceBlocks","indexToSelect","meta","registry","rootClientId","index","length","block","canInsertBlock","canInsertBlockType","name","batch","time","Date","now","ensureDefaultBlock","replaceBlock","createOnMove","canMoveBlocks","moveBlocksDown","moveBlocksUp","moveBlocksToPosition","fromRootClientId","toRootClientId","canRemoveBlocks","canInsertBlocks","moveBlockToPosition","insertBlock","updateSelection","insertBlocks","hint","allowedBlocks","isValid","push","showInsertionPoint","__unstableOptions","__unstableWithInserter","operation","nearestSide","hideInsertionPoint","isBlockInsertionPointVisible","synchronizeTemplate","getBlocks","updatedBlockList","synchronizeBlocksWithTemplate","__unstableDeleteSelection","isForward","selectionAnchor","getSelectionStart","selectionFocus","getSelectionEnd","attributeKey","offset","anchorRootClientId","focusRootClientId","blockOrder","getBlockOrder","anchorIndex","indexOf","focusIndex","targetSelection","targetBlock","getBlock","targetBlockType","getBlockType","merge","selectionA","selectionB","blockA","blockB","htmlA","htmlB","valueA","create","html","valueB","remove","text","insert","START_OF_SELECTED_AREA","cloneA","cloneBlock","toHTMLString","value","cloneB","followingBlock","blocksWithTheSameType","switchToBlockType","updatedAttributes","blockToMerge","pop","shift","newAttributeKey","retrieveSelectedAttribute","convertedHtml","convertedValue","newOffset","newValue","newHtml","selectedBlockClientIds","getSelectedBlockClientIds","replacement","selectionChange","getSelectedBlocksInitialCaretPosition","__unstableSplitSelection","blockAType","blockBType","attributeKeyA","findRichTextAttributeKey","attributeKeyB","blockAttributes","getBlockAttributes","bindings","metadata","createWarningNotice","noticesStore","__","insertAfterBlock","isUnmodifiedDefaultBlock","createEmpty","defaultBlockName","getDefaultBlockName","createBlock","getBlockName","getBlockIndex","head","innerBlocks","tail","switched","selection","output","clonedBlocks","firstBlock","headType","firstBlocks","first","unshift","isUnmodifiedBlock","lastBlock","tailType","lastBlocks","last","__unstableExpandSelection","mergeBlocks","firstBlockClientId","secondBlockClientId","clientIdA","clientIdB","getBlockSupport","blockWithSameType","undefined","removeBlock","rootAttributes","previousRootAttributes","Object","keys","every","key","isBlockSelected","selectedBlockType","attributeDefinition","canRestoreTextSelection","window","console","error","selectedBlock","slice","removeBlocks","selectPrevious","privateRemoveBlocks","replaceInnerBlocks","toggleBlockMode","startTyping","stopTyping","startDraggingBlocks","stopDraggingBlocks","enterFormattedText","version","exitFormattedText","startOffset","endOffset","insertDefaultBlock","updateBlockListSettings","settings","updateSettings","__experimentalUpdateSettings","stripExperimentalSettings","__unstableSaveReusableBlock","id","updatedId","__unstableMarkLastChangeAsPersistent","__unstableMarkNextChangeAsNotPersistent","__unstableMarkAutomaticChange","requestIdleCallback","cb","setTimeout","setNavigationMode","isNavigationMode","__unstableSetEditorMode","mode","preferencesStore","set","setBlockMovingClientId","duplicateBlocks","getBlocksByClientId","some","blockNames","map","blockName","hasBlockSupport","clientIdsArray","lastSelectedIndex","__experimentalCloneSanitizedBlock","insertBeforeBlock","isLocked","blockIndex","directInsertBlock","getDirectInsertBlock","copiedAttributes","attributesToCopy","forEach","toggleBlockHighlight","isHighlighted","flashBlock","Promise","resolve","setHasControlledInnerBlocks","hasControlledInnerBlocks","setBlockVisibility","__unstableSetTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","focusModeToRevert","registerInserterMediaCategory","category","labels","includes","mediaType","fetch","registeredInserterMediaCategories","getRegisteredInserterMediaCategories","isExternalResource","setBlockEditingMode","unsetBlockEditingMode"],"sources":["@wordpress/block-editor/src/store/actions.js"],"sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error', 'warn' ] } ] */\n/**\n * WordPress dependencies\n */\nimport {\n\tcloneBlock,\n\t__experimentalCloneSanitizedBlock,\n\tcreateBlock,\n\tdoBlocksMatchTemplate,\n\tgetBlockType,\n\tgetDefaultBlockName,\n\thasBlockSupport,\n\tswitchToBlockType,\n\tsynchronizeBlocksWithTemplate,\n\tgetBlockSupport,\n\tisUnmodifiedDefaultBlock,\n\tisUnmodifiedBlock,\n} from '@wordpress/blocks';\nimport { speak } from '@wordpress/a11y';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { create, insert, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\n/**\n * Internal dependencies\n */\nimport {\n\tretrieveSelectedAttribute,\n\tfindRichTextAttributeKey,\n\tSTART_OF_SELECTED_AREA,\n} from '../utils/selection';\nimport {\n\t__experimentalUpdateSettings,\n\tprivateRemoveBlocks,\n} from './private-actions';\n\n/** @typedef {import('../components/use-on-block-drop/types').WPDropOperation} WPDropOperation */\n\nconst castArray = ( maybeArray ) =>\n\tArray.isArray( maybeArray ) ? maybeArray : [ maybeArray ];\n\n/**\n * Action that resets blocks state to the specified array of blocks, taking precedence\n * over any other content reflected as an edit in state.\n *\n * @param {Array} blocks Array of blocks.\n */\nexport const resetBlocks =\n\t( blocks ) =>\n\t( { dispatch } ) => {\n\t\tdispatch( { type: 'RESET_BLOCKS', blocks } );\n\t\tdispatch( validateBlocksToTemplate( blocks ) );\n\t};\n\n/**\n * Block validity is a function of blocks state (at the point of a\n * reset) and the template setting. As a compromise to its placement\n * across distinct parts of state, it is implemented here as a side\n * effect of the block reset action.\n *\n * @param {Array} blocks Array of blocks.\n */\nexport const validateBlocksToTemplate =\n\t( blocks ) =>\n\t( { select, dispatch } ) => {\n\t\tconst template = select.getTemplate();\n\t\tconst templateLock = select.getTemplateLock();\n\n\t\t// Unlocked templates are considered always valid because they act\n\t\t// as default values only.\n\t\tconst isBlocksValidToTemplate =\n\t\t\t! template ||\n\t\t\ttemplateLock !== 'all' ||\n\t\t\tdoBlocksMatchTemplate( blocks, template );\n\n\t\t// Update if validity has changed.\n\t\tconst isValidTemplate = select.isValidTemplate();\n\n\t\tif ( isBlocksValidToTemplate !== isValidTemplate ) {\n\t\t\tdispatch.setTemplateValidity( isBlocksValidToTemplate );\n\t\t\treturn isBlocksValidToTemplate;\n\t\t}\n\t};\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n/**\n * A selection object.\n *\n * @typedef {Object} WPSelection\n *\n * @property {WPBlockSelection} start The selection start.\n * @property {WPBlockSelection} end   The selection end.\n */\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that selection state should be\n * reset to the specified selection.\n *\n * @param {WPBlockSelection} selectionStart  The selection start.\n * @param {WPBlockSelection} selectionEnd    The selection end.\n * @param {0|-1|null}        initialPosition Initial block position.\n *\n * @return {Object} Action object.\n */\nexport function resetSelection(\n\tselectionStart,\n\tselectionEnd,\n\tinitialPosition\n) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn {\n\t\ttype: 'RESET_SELECTION',\n\t\tselectionStart,\n\t\tselectionEnd,\n\t\tinitialPosition,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that blocks have been received.\n * Unlike resetBlocks, these should be appended to the existing known set, not\n * replacing.\n *\n * @deprecated\n *\n * @param {Object[]} blocks Array of block objects.\n *\n * @return {Object} Action object.\n */\nexport function receiveBlocks( blocks ) {\n\tdeprecated( 'wp.data.dispatch( \"core/block-editor\" ).receiveBlocks', {\n\t\tsince: '5.9',\n\t\talternative: 'resetBlocks or insertBlocks',\n\t} );\n\n\treturn {\n\t\ttype: 'RECEIVE_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Action that updates attributes of multiple blocks with the specified client IDs.\n *\n * @param {string|string[]} clientIds     Block client IDs.\n * @param {Object}          attributes    Block attributes to be merged. Should be keyed by clientIds if\n *                                        uniqueByBlock is true.\n * @param {boolean}         uniqueByBlock true if each block in clientIds array has a unique set of attributes\n * @return {Object} Action object.\n */\nexport function updateBlockAttributes(\n\tclientIds,\n\tattributes,\n\tuniqueByBlock = false\n) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_ATTRIBUTES',\n\t\tclientIds: castArray( clientIds ),\n\t\tattributes,\n\t\tuniqueByBlock,\n\t};\n}\n\n/**\n * Action that updates the block with the specified client ID.\n *\n * @param {string} clientId Block client ID.\n * @param {Object} updates  Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlock( clientId, updates ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK',\n\t\tclientId,\n\t\tupdates,\n\t};\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been selected, optionally accepting a position\n * value reflecting its selection directionality. An initialPosition of -1\n * reflects a reverse selection.\n *\n * @param {string}    clientId        Block client ID.\n * @param {0|-1|null} initialPosition Optional initial position. Pass as -1 to\n *                                    reflect reverse selection.\n *\n * @return {Object} Action object.\n */\nexport function selectBlock( clientId, initialPosition = 0 ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn {\n\t\ttype: 'SELECT_BLOCK',\n\t\tinitialPosition,\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been hovered.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Action object.\n */\nexport function hoverBlock( clientId ) {\n\treturn {\n\t\ttype: 'HOVER_BLOCK',\n\t\tclientId,\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the block preceding the given\n * clientId (or optionally, its first parent from bottom to top)\n * should be selected.\n *\n * @param {string}  clientId         Block client ID.\n * @param {boolean} fallbackToParent If true, select the first parent if there is no previous block.\n */\nexport const selectPreviousBlock =\n\t( clientId, fallbackToParent = false ) =>\n\t( { select, dispatch } ) => {\n\t\tconst previousBlockClientId =\n\t\t\tselect.getPreviousBlockClientId( clientId );\n\t\tif ( previousBlockClientId ) {\n\t\t\tdispatch.selectBlock( previousBlockClientId, -1 );\n\t\t} else if ( fallbackToParent ) {\n\t\t\tconst firstParentClientId = select.getBlockRootClientId( clientId );\n\t\t\tif ( firstParentClientId ) {\n\t\t\t\tdispatch.selectBlock( firstParentClientId, -1 );\n\t\t\t}\n\t\t}\n\t};\n\n/**\n * Yields action objects used in signalling that the block following the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport const selectNextBlock =\n\t( clientId ) =>\n\t( { select, dispatch } ) => {\n\t\tconst nextBlockClientId = select.getNextBlockClientId( clientId );\n\t\tif ( nextBlockClientId ) {\n\t\t\tdispatch.selectBlock( nextBlockClientId );\n\t\t}\n\t};\n\n/**\n * Action that starts block multi-selection.\n *\n * @return {Object} Action object.\n */\nexport function startMultiSelect() {\n\treturn {\n\t\ttype: 'START_MULTI_SELECT',\n\t};\n}\n\n/**\n * Action that stops block multi-selection.\n *\n * @return {Object} Action object.\n */\nexport function stopMultiSelect() {\n\treturn {\n\t\ttype: 'STOP_MULTI_SELECT',\n\t};\n}\n\n/**\n * Action that changes block multi-selection.\n *\n * @param {string}      start                         First block of the multi selection.\n * @param {string}      end                           Last block of the multiselection.\n * @param {number|null} __experimentalInitialPosition Optional initial position. Pass as null to skip focus within editor canvas.\n */\nexport const multiSelect =\n\t( start, end, __experimentalInitialPosition = 0 ) =>\n\t( { select, dispatch } ) => {\n\t\tconst startBlockRootClientId = select.getBlockRootClientId( start );\n\t\tconst endBlockRootClientId = select.getBlockRootClientId( end );\n\n\t\t// Only allow block multi-selections at the same level.\n\t\tif ( startBlockRootClientId !== endBlockRootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'MULTI_SELECT',\n\t\t\tstart,\n\t\t\tend,\n\t\t\tinitialPosition: __experimentalInitialPosition,\n\t\t} );\n\n\t\tconst blockCount = select.getSelectedBlockCount();\n\n\t\tspeak(\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: number of selected blocks */\n\t\t\t\t_n( '%s block selected.', '%s blocks selected.', blockCount ),\n\t\t\t\tblockCount\n\t\t\t),\n\t\t\t'assertive'\n\t\t);\n\t};\n\n/**\n * Action that clears the block selection.\n *\n * @return {Object} Action object.\n */\nexport function clearSelectedBlock() {\n\treturn {\n\t\ttype: 'CLEAR_SELECTED_BLOCK',\n\t};\n}\n\n/**\n * Action that enables or disables block selection.\n *\n * @param {boolean} [isSelectionEnabled=true] Whether block selection should\n *                                            be enabled.\n *\n * @return {Object} Action object.\n */\nexport function toggleSelection( isSelectionEnabled = true ) {\n\treturn {\n\t\ttype: 'TOGGLE_SELECTION',\n\t\tisSelectionEnabled,\n\t};\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Action that replaces given blocks with one or more replacement blocks.\n *\n * @param {(string|string[])} clientIds       Block client ID(s) to replace.\n * @param {(Object|Object[])} blocks          Replacement block(s).\n * @param {number}            indexToSelect   Index of replacement block to select.\n * @param {0|-1|null}         initialPosition Index of caret after in the selected block after the operation.\n * @param {?Object}           meta            Optional Meta values to be passed to the action object.\n *\n * @return {Object} Action object.\n */\nexport const replaceBlocks =\n\t( clientIds, blocks, indexToSelect, initialPosition = 0, meta ) =>\n\t( { select, dispatch, registry } ) => {\n\t\t/* eslint-enable jsdoc/valid-types */\n\t\tclientIds = castArray( clientIds );\n\t\tblocks = castArray( blocks );\n\t\tconst rootClientId = select.getBlockRootClientId( clientIds[ 0 ] );\n\t\t// Replace is valid if the new blocks can be inserted in the root block.\n\t\tfor ( let index = 0; index < blocks.length; index++ ) {\n\t\t\tconst block = blocks[ index ];\n\t\t\tconst canInsertBlock = select.canInsertBlockType(\n\t\t\t\tblock.name,\n\t\t\t\trootClientId\n\t\t\t);\n\t\t\tif ( ! canInsertBlock ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// We're batching these two actions because an extra `undo/redo` step can\n\t\t// be created, based on whether we insert a default block or not.\n\t\tregistry.batch( () => {\n\t\t\tdispatch( {\n\t\t\t\ttype: 'REPLACE_BLOCKS',\n\t\t\t\tclientIds,\n\t\t\t\tblocks,\n\t\t\t\ttime: Date.now(),\n\t\t\t\tindexToSelect,\n\t\t\t\tinitialPosition,\n\t\t\t\tmeta,\n\t\t\t} );\n\t\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t\t// always a default block if the last of the blocks have been removed.\n\t\t\tdispatch.ensureDefaultBlock();\n\t\t} );\n\t};\n\n/**\n * Action that replaces a single block with one or more replacement blocks.\n *\n * @param {(string|string[])} clientId Block client ID to replace.\n * @param {(Object|Object[])} block    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlock( clientId, block ) {\n\treturn replaceBlocks( clientId, block );\n}\n\n/**\n * Higher-order action creator which, given the action type to dispatch creates\n * an action creator for managing block movement.\n *\n * @param {string} type Action type to dispatch.\n *\n * @return {Function} Action creator.\n */\nconst createOnMove =\n\t( type ) =>\n\t( clientIds, rootClientId ) =>\n\t( { select, dispatch } ) => {\n\t\t// If one of the blocks is locked or the parent is locked, we cannot move any block.\n\t\tconst canMoveBlocks = select.canMoveBlocks( clientIds );\n\t\tif ( ! canMoveBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch( { type, clientIds: castArray( clientIds ), rootClientId } );\n\t};\n\nexport const moveBlocksDown = createOnMove( 'MOVE_BLOCKS_DOWN' );\nexport const moveBlocksUp = createOnMove( 'MOVE_BLOCKS_UP' );\n\n/**\n * Action that moves given blocks to a new position.\n *\n * @param {?string} clientIds        The client IDs of the blocks.\n * @param {?string} fromRootClientId Root client ID source.\n * @param {?string} toRootClientId   Root client ID destination.\n * @param {number}  index            The index to move the blocks to.\n */\nexport const moveBlocksToPosition =\n\t( clientIds, fromRootClientId = '', toRootClientId = '', index ) =>\n\t( { select, dispatch } ) => {\n\t\tconst canMoveBlocks = select.canMoveBlocks( clientIds );\n\n\t\t// If one of the blocks is locked or the parent is locked, we cannot move any block.\n\t\tif ( ! canMoveBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If moving inside the same root block the move is always possible.\n\t\tif ( fromRootClientId !== toRootClientId ) {\n\t\t\tconst canRemoveBlocks = select.canRemoveBlocks( clientIds );\n\n\t\t\t// If we're moving to another block, it means we're deleting blocks from\n\t\t\t// the original block, so we need to check if removing is possible.\n\t\t\tif ( ! canRemoveBlocks ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst canInsertBlocks = select.canInsertBlocks(\n\t\t\t\tclientIds,\n\t\t\t\ttoRootClientId\n\t\t\t);\n\n\t\t\t// If moving to other parent block, the move is possible if we can insert a block of the same type inside the new parent block.\n\t\t\tif ( ! canInsertBlocks ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'MOVE_BLOCKS_TO_POSITION',\n\t\t\tfromRootClientId,\n\t\t\ttoRootClientId,\n\t\t\tclientIds,\n\t\t\tindex,\n\t\t} );\n\t};\n\n/**\n * Action that moves given block to a new position.\n *\n * @param {?string} clientId         The client ID of the block.\n * @param {?string} fromRootClientId Root client ID source.\n * @param {?string} toRootClientId   Root client ID destination.\n * @param {number}  index            The index to move the block to.\n */\nexport function moveBlockToPosition(\n\tclientId,\n\tfromRootClientId = '',\n\ttoRootClientId = '',\n\tindex\n) {\n\treturn moveBlocksToPosition(\n\t\t[ clientId ],\n\t\tfromRootClientId,\n\t\ttoRootClientId,\n\t\tindex\n\t);\n}\n\n/**\n * Action that inserts a single block, optionally at a specific index respective a root block list.\n *\n * Only allowed blocks are inserted. The action may fail silently for blocks that are not allowed or if\n * a templateLock is active on the block list.\n *\n * @param {Object}   block           Block object to insert.\n * @param {?number}  index           Index at which block should be inserted.\n * @param {?string}  rootClientId    Optional root client ID of block list on which to insert.\n * @param {?boolean} updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to true.\n * @param {?Object}  meta            Optional Meta values to be passed to the action object.\n *\n * @return {Object} Action object.\n */\nexport function insertBlock(\n\tblock,\n\tindex,\n\trootClientId,\n\tupdateSelection,\n\tmeta\n) {\n\treturn insertBlocks(\n\t\t[ block ],\n\t\tindex,\n\t\trootClientId,\n\t\tupdateSelection,\n\t\t0,\n\t\tmeta\n\t);\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Action that inserts an array of blocks, optionally at a specific index respective a root block list.\n *\n * Only allowed blocks are inserted. The action may fail silently for blocks that are not allowed or if\n * a templateLock is active on the block list.\n *\n * @param {Object[]}  blocks          Block objects to insert.\n * @param {?number}   index           Index at which block should be inserted.\n * @param {?string}   rootClientId    Optional root client ID of block list on which to insert.\n * @param {?boolean}  updateSelection If true block selection will be updated.  If false, block selection will not change. Defaults to true.\n * @param {0|-1|null} initialPosition Initial focus position. Setting it to null prevent focusing the inserted block.\n * @param {?Object}   meta            Optional Meta values to be passed to the action object.\n *\n * @return {Object} Action object.\n */\nexport const insertBlocks =\n\t(\n\t\tblocks,\n\t\tindex,\n\t\trootClientId,\n\t\tupdateSelection = true,\n\t\tinitialPosition = 0,\n\t\tmeta\n\t) =>\n\t( { select, dispatch } ) => {\n\t\t/* eslint-enable jsdoc/valid-types */\n\t\tif ( initialPosition !== null && typeof initialPosition === 'object' ) {\n\t\t\tmeta = initialPosition;\n\t\t\tinitialPosition = 0;\n\t\t\tdeprecated(\n\t\t\t\t\"meta argument in wp.data.dispatch('core/block-editor')\",\n\t\t\t\t{\n\t\t\t\t\tsince: '5.8',\n\t\t\t\t\thint: 'The meta argument is now the 6th argument of the function',\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tblocks = castArray( blocks );\n\t\tconst allowedBlocks = [];\n\t\tfor ( const block of blocks ) {\n\t\t\tconst isValid = select.canInsertBlockType(\n\t\t\t\tblock.name,\n\t\t\t\trootClientId\n\t\t\t);\n\t\t\tif ( isValid ) {\n\t\t\t\tallowedBlocks.push( block );\n\t\t\t}\n\t\t}\n\t\tif ( allowedBlocks.length ) {\n\t\t\tdispatch( {\n\t\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\t\tblocks: allowedBlocks,\n\t\t\t\tindex,\n\t\t\t\trootClientId,\n\t\t\t\ttime: Date.now(),\n\t\t\t\tupdateSelection,\n\t\t\t\tinitialPosition: updateSelection ? initialPosition : null,\n\t\t\t\tmeta,\n\t\t\t} );\n\t\t}\n\t};\n\n/**\n * Action that shows the insertion point.\n *\n * @param    {?string}         rootClientId           Optional root client ID of block list on\n *                                                    which to insert.\n * @param    {?number}         index                  Index at which block should be inserted.\n * @param    {?Object}         __unstableOptions      Additional options.\n * @property {boolean}         __unstableWithInserter Whether or not to show an inserter button.\n * @property {WPDropOperation} operation              The operation to perform when applied,\n *                                                    either 'insert' or 'replace' for now.\n *\n * @return {Object} Action object.\n */\nexport function showInsertionPoint(\n\trootClientId,\n\tindex,\n\t__unstableOptions = {}\n) {\n\tconst { __unstableWithInserter, operation, nearestSide } =\n\t\t__unstableOptions;\n\treturn {\n\t\ttype: 'SHOW_INSERTION_POINT',\n\t\trootClientId,\n\t\tindex,\n\t\t__unstableWithInserter,\n\t\toperation,\n\t\tnearestSide,\n\t};\n}\n/**\n * Action that hides the insertion point.\n */\nexport const hideInsertionPoint =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tif ( ! select.isBlockInsertionPointVisible() ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'HIDE_INSERTION_POINT',\n\t\t} );\n\t};\n\n/**\n * Action that resets the template validity.\n *\n * @param {boolean} isValid template validity flag.\n *\n * @return {Object} Action object.\n */\nexport function setTemplateValidity( isValid ) {\n\treturn {\n\t\ttype: 'SET_TEMPLATE_VALIDITY',\n\t\tisValid,\n\t};\n}\n\n/**\n * Action that synchronizes the template with the list of blocks.\n *\n * @return {Object} Action object.\n */\nexport const synchronizeTemplate =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tdispatch( { type: 'SYNCHRONIZE_TEMPLATE' } );\n\t\tconst blocks = select.getBlocks();\n\t\tconst template = select.getTemplate();\n\t\tconst updatedBlockList = synchronizeBlocksWithTemplate(\n\t\t\tblocks,\n\t\t\ttemplate\n\t\t);\n\n\t\tdispatch.resetBlocks( updatedBlockList );\n\t};\n\n/**\n * Delete the current selection.\n *\n * @param {boolean} isForward\n */\nexport const __unstableDeleteSelection =\n\t( isForward ) =>\n\t( { registry, select, dispatch } ) => {\n\t\tconst selectionAnchor = select.getSelectionStart();\n\t\tconst selectionFocus = select.getSelectionEnd();\n\n\t\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// It's not mergeable if there's no rich text selection.\n\t\tif (\n\t\t\t! selectionAnchor.attributeKey ||\n\t\t\t! selectionFocus.attributeKey ||\n\t\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\t\ttypeof selectionFocus.offset === 'undefined'\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst anchorRootClientId = select.getBlockRootClientId(\n\t\t\tselectionAnchor.clientId\n\t\t);\n\t\tconst focusRootClientId = select.getBlockRootClientId(\n\t\t\tselectionFocus.clientId\n\t\t);\n\n\t\t// It's not mergeable if the selection doesn't start and end in the same\n\t\t// block list. Maybe in the future it should be allowed.\n\t\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockOrder = select.getBlockOrder( anchorRootClientId );\n\t\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\t\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t\t// Reassign selection start and end based on order.\n\t\tlet selectionStart, selectionEnd;\n\n\t\tif ( anchorIndex > focusIndex ) {\n\t\t\tselectionStart = selectionFocus;\n\t\t\tselectionEnd = selectionAnchor;\n\t\t} else {\n\t\t\tselectionStart = selectionAnchor;\n\t\t\tselectionEnd = selectionFocus;\n\t\t}\n\n\t\tconst targetSelection = isForward ? selectionEnd : selectionStart;\n\t\tconst targetBlock = select.getBlock( targetSelection.clientId );\n\t\tconst targetBlockType = getBlockType( targetBlock.name );\n\n\t\tif ( ! targetBlockType.merge ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectionA = selectionStart;\n\t\tconst selectionB = selectionEnd;\n\n\t\tconst blockA = select.getBlock( selectionA.clientId );\n\t\tconst blockB = select.getBlock( selectionB.clientId );\n\n\t\tconst htmlA = blockA.attributes[ selectionA.attributeKey ];\n\t\tconst htmlB = blockB.attributes[ selectionB.attributeKey ];\n\n\t\tlet valueA = create( { html: htmlA } );\n\t\tlet valueB = create( { html: htmlB } );\n\n\t\tvalueA = remove( valueA, selectionA.offset, valueA.text.length );\n\t\tvalueB = insert( valueB, START_OF_SELECTED_AREA, 0, selectionB.offset );\n\n\t\t// Clone the blocks so we don't manipulate the original.\n\t\tconst cloneA = cloneBlock( blockA, {\n\t\t\t[ selectionA.attributeKey ]: toHTMLString( { value: valueA } ),\n\t\t} );\n\t\tconst cloneB = cloneBlock( blockB, {\n\t\t\t[ selectionB.attributeKey ]: toHTMLString( { value: valueB } ),\n\t\t} );\n\n\t\tconst followingBlock = isForward ? cloneA : cloneB;\n\n\t\t// We can only merge blocks with similar types\n\t\t// thus, we transform the block to merge first\n\t\tconst blocksWithTheSameType =\n\t\t\tblockA.name === blockB.name\n\t\t\t\t? [ followingBlock ]\n\t\t\t\t: switchToBlockType( followingBlock, targetBlockType.name );\n\n\t\t// If the block types can not match, do nothing\n\t\tif ( ! blocksWithTheSameType || ! blocksWithTheSameType.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet updatedAttributes;\n\n\t\tif ( isForward ) {\n\t\t\tconst blockToMerge = blocksWithTheSameType.pop();\n\t\t\tupdatedAttributes = targetBlockType.merge(\n\t\t\t\tblockToMerge.attributes,\n\t\t\t\tcloneB.attributes\n\t\t\t);\n\t\t} else {\n\t\t\tconst blockToMerge = blocksWithTheSameType.shift();\n\t\t\tupdatedAttributes = targetBlockType.merge(\n\t\t\t\tcloneA.attributes,\n\t\t\t\tblockToMerge.attributes\n\t\t\t);\n\t\t}\n\n\t\tconst newAttributeKey = retrieveSelectedAttribute( updatedAttributes );\n\n\t\tconst convertedHtml = updatedAttributes[ newAttributeKey ];\n\t\tconst convertedValue = create( { html: convertedHtml } );\n\t\tconst newOffset = convertedValue.text.indexOf( START_OF_SELECTED_AREA );\n\t\tconst newValue = remove( convertedValue, newOffset, newOffset + 1 );\n\t\tconst newHtml = toHTMLString( { value: newValue } );\n\n\t\tupdatedAttributes[ newAttributeKey ] = newHtml;\n\n\t\tconst selectedBlockClientIds = select.getSelectedBlockClientIds();\n\t\tconst replacement = [\n\t\t\t...( isForward ? blocksWithTheSameType : [] ),\n\t\t\t{\n\t\t\t\t// Preserve the original client ID.\n\t\t\t\t...targetBlock,\n\t\t\t\tattributes: {\n\t\t\t\t\t...targetBlock.attributes,\n\t\t\t\t\t...updatedAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t\t...( isForward ? [] : blocksWithTheSameType ),\n\t\t];\n\n\t\tregistry.batch( () => {\n\t\t\tdispatch.selectionChange(\n\t\t\t\ttargetBlock.clientId,\n\t\t\t\tnewAttributeKey,\n\t\t\t\tnewOffset,\n\t\t\t\tnewOffset\n\t\t\t);\n\n\t\t\tdispatch.replaceBlocks(\n\t\t\t\tselectedBlockClientIds,\n\t\t\t\treplacement,\n\t\t\t\t0, // If we don't pass the `indexToSelect` it will default to the last block.\n\t\t\t\tselect.getSelectedBlocksInitialCaretPosition()\n\t\t\t);\n\t\t} );\n\t};\n\n/**\n * Split the current selection.\n * @param {?Array} blocks\n */\nexport const __unstableSplitSelection =\n\t( blocks = [] ) =>\n\t( { registry, select, dispatch } ) => {\n\t\tconst selectionAnchor = select.getSelectionStart();\n\t\tconst selectionFocus = select.getSelectionEnd();\n\t\tconst anchorRootClientId = select.getBlockRootClientId(\n\t\t\tselectionAnchor.clientId\n\t\t);\n\t\tconst focusRootClientId = select.getBlockRootClientId(\n\t\t\tselectionFocus.clientId\n\t\t);\n\n\t\t// It's not splittable if the selection doesn't start and end in the same\n\t\t// block list. Maybe in the future it should be allowed.\n\t\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockOrder = select.getBlockOrder( anchorRootClientId );\n\t\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\t\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t\t// Reassign selection start and end based on order.\n\t\tlet selectionStart, selectionEnd;\n\n\t\tif ( anchorIndex > focusIndex ) {\n\t\t\tselectionStart = selectionFocus;\n\t\t\tselectionEnd = selectionAnchor;\n\t\t} else {\n\t\t\tselectionStart = selectionAnchor;\n\t\t\tselectionEnd = selectionFocus;\n\t\t}\n\n\t\tconst selectionA = selectionStart;\n\t\tconst selectionB = selectionEnd;\n\t\tconst blockA = select.getBlock( selectionA.clientId );\n\t\tconst blockB = select.getBlock( selectionB.clientId );\n\t\tconst blockAType = getBlockType( blockA.name );\n\t\tconst blockBType = getBlockType( blockB.name );\n\t\tconst attributeKeyA =\n\t\t\ttypeof selectionA.attributeKey === 'string'\n\t\t\t\t? selectionA.attributeKey\n\t\t\t\t: findRichTextAttributeKey( blockAType );\n\t\tconst attributeKeyB =\n\t\t\ttypeof selectionB.attributeKey === 'string'\n\t\t\t\t? selectionB.attributeKey\n\t\t\t\t: findRichTextAttributeKey( blockBType );\n\t\tconst blockAttributes = select.getBlockAttributes(\n\t\t\tselectionA.clientId\n\t\t);\n\t\tconst bindings = blockAttributes?.metadata?.bindings;\n\n\t\t// If the attribute is bound, don't split the selection and insert a new block instead.\n\t\tif ( bindings?.[ attributeKeyA ] ) {\n\t\t\t// Show warning if user tries to insert a block into another block with bindings.\n\t\t\tif ( blocks.length ) {\n\t\t\t\tconst { createWarningNotice } =\n\t\t\t\t\tregistry.dispatch( noticesStore );\n\t\t\t\tcreateWarningNotice(\n\t\t\t\t\t__(\n\t\t\t\t\t\t\"Blocks can't be inserted into other blocks with bindings\"\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdispatch.insertAfterBlock( selectionA.clientId );\n\t\t\treturn;\n\t\t}\n\n\t\t// Can't split if the selection is not set.\n\t\tif (\n\t\t\t! attributeKeyA ||\n\t\t\t! attributeKeyB ||\n\t\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\t\ttypeof selectionFocus.offset === 'undefined'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// We can do some short-circuiting if the selection is collapsed.\n\t\tif (\n\t\t\tselectionA.clientId === selectionB.clientId &&\n\t\t\tattributeKeyA === attributeKeyB &&\n\t\t\tselectionA.offset === selectionB.offset\n\t\t) {\n\t\t\t// If an unmodified default block is selected, replace it. We don't\n\t\t\t// want to be converting into a default block.\n\t\t\tif ( blocks.length ) {\n\t\t\t\tif ( isUnmodifiedDefaultBlock( blockA ) ) {\n\t\t\t\t\tdispatch.replaceBlocks(\n\t\t\t\t\t\t[ selectionA.clientId ],\n\t\t\t\t\t\tblocks,\n\t\t\t\t\t\tblocks.length - 1,\n\t\t\t\t\t\t-1\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If selection is at the start or end, we can simply insert an\n\t\t\t// empty block, provided this block has no inner blocks.\n\t\t\telse if ( ! select.getBlockOrder( selectionA.clientId ).length ) {\n\t\t\t\tfunction createEmpty() {\n\t\t\t\t\tconst defaultBlockName = getDefaultBlockName();\n\t\t\t\t\treturn select.canInsertBlockType(\n\t\t\t\t\t\tdefaultBlockName,\n\t\t\t\t\t\tanchorRootClientId\n\t\t\t\t\t)\n\t\t\t\t\t\t? createBlock( defaultBlockName )\n\t\t\t\t\t\t: createBlock(\n\t\t\t\t\t\t\t\tselect.getBlockName( selectionA.clientId )\n\t\t\t\t\t\t  );\n\t\t\t\t}\n\n\t\t\t\tconst length = blockAttributes[ attributeKeyA ].length;\n\n\t\t\t\tif ( selectionA.offset === 0 && length ) {\n\t\t\t\t\tdispatch.insertBlocks(\n\t\t\t\t\t\t[ createEmpty() ],\n\t\t\t\t\t\tselect.getBlockIndex( selectionA.clientId ),\n\t\t\t\t\t\tanchorRootClientId,\n\t\t\t\t\t\tfalse\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( selectionA.offset === length ) {\n\t\t\t\t\tdispatch.insertBlocks(\n\t\t\t\t\t\t[ createEmpty() ],\n\t\t\t\t\t\tselect.getBlockIndex( selectionA.clientId ) + 1,\n\t\t\t\t\t\tanchorRootClientId\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst htmlA = blockA.attributes[ attributeKeyA ];\n\t\tconst htmlB = blockB.attributes[ attributeKeyB ];\n\n\t\tlet valueA = create( { html: htmlA } );\n\t\tlet valueB = create( { html: htmlB } );\n\n\t\tvalueA = remove( valueA, selectionA.offset, valueA.text.length );\n\t\tvalueB = remove( valueB, 0, selectionB.offset );\n\n\t\tlet head = {\n\t\t\t// Preserve the original client ID.\n\t\t\t...blockA,\n\t\t\t// If both start and end are the same, should only copy innerBlocks\n\t\t\t// once.\n\t\t\tinnerBlocks:\n\t\t\t\tblockA.clientId === blockB.clientId ? [] : blockA.innerBlocks,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ attributeKeyA ]: toHTMLString( { value: valueA } ),\n\t\t\t},\n\t\t};\n\n\t\tlet tail = {\n\t\t\t...blockB,\n\t\t\t// Only preserve the original client ID if the end is different.\n\t\t\tclientId:\n\t\t\t\tblockA.clientId === blockB.clientId\n\t\t\t\t\t? createBlock( blockB.name ).clientId\n\t\t\t\t\t: blockB.clientId,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ attributeKeyB ]: toHTMLString( { value: valueB } ),\n\t\t\t},\n\t\t};\n\n\t\t// When splitting a block, attempt to convert the tail block to the\n\t\t// default block type. For example, when splitting a heading block, the\n\t\t// tail block will be converted to a paragraph block. Note that for\n\t\t// blocks such as a list item and button, this will be skipped because\n\t\t// the default block type cannot be inserted.\n\t\tconst defaultBlockName = getDefaultBlockName();\n\t\tif (\n\t\t\t// A block is only split when the selection is within the same\n\t\t\t// block.\n\t\t\tblockA.clientId === blockB.clientId &&\n\t\t\tdefaultBlockName &&\n\t\t\ttail.name !== defaultBlockName &&\n\t\t\tselect.canInsertBlockType( defaultBlockName, anchorRootClientId )\n\t\t) {\n\t\t\tconst switched = switchToBlockType( tail, defaultBlockName );\n\t\t\tif ( switched?.length === 1 ) {\n\t\t\t\ttail = switched[ 0 ];\n\t\t\t}\n\t\t}\n\n\t\tif ( ! blocks.length ) {\n\t\t\tdispatch.replaceBlocks( select.getSelectedBlockClientIds(), [\n\t\t\t\thead,\n\t\t\t\ttail,\n\t\t\t] );\n\t\t\treturn;\n\t\t}\n\n\t\tlet selection;\n\t\tconst output = [];\n\t\tconst clonedBlocks = [ ...blocks ];\n\t\tconst firstBlock = clonedBlocks.shift();\n\t\tconst headType = getBlockType( head.name );\n\t\tconst firstBlocks =\n\t\t\theadType.merge && firstBlock.name === headType.name\n\t\t\t\t? [ firstBlock ]\n\t\t\t\t: switchToBlockType( firstBlock, headType.name );\n\n\t\tif ( firstBlocks?.length ) {\n\t\t\tconst first = firstBlocks.shift();\n\t\t\thead = {\n\t\t\t\t...head,\n\t\t\t\tattributes: {\n\t\t\t\t\t...head.attributes,\n\t\t\t\t\t...headType.merge( head.attributes, first.attributes ),\n\t\t\t\t},\n\t\t\t};\n\t\t\toutput.push( head );\n\t\t\tselection = {\n\t\t\t\tclientId: head.clientId,\n\t\t\t\tattributeKey: attributeKeyA,\n\t\t\t\toffset: create( { html: head.attributes[ attributeKeyA ] } )\n\t\t\t\t\t.text.length,\n\t\t\t};\n\t\t\tclonedBlocks.unshift( ...firstBlocks );\n\t\t} else {\n\t\t\tif ( ! isUnmodifiedBlock( head ) ) {\n\t\t\t\toutput.push( head );\n\t\t\t}\n\t\t\toutput.push( firstBlock );\n\t\t}\n\n\t\tconst lastBlock = clonedBlocks.pop();\n\t\tconst tailType = getBlockType( tail.name );\n\n\t\tif ( clonedBlocks.length ) {\n\t\t\toutput.push( ...clonedBlocks );\n\t\t}\n\n\t\tif ( lastBlock ) {\n\t\t\tconst lastBlocks =\n\t\t\t\ttailType.merge && tailType.name === lastBlock.name\n\t\t\t\t\t? [ lastBlock ]\n\t\t\t\t\t: switchToBlockType( lastBlock, tailType.name );\n\n\t\t\tif ( lastBlocks?.length ) {\n\t\t\t\tconst last = lastBlocks.pop();\n\t\t\t\toutput.push( {\n\t\t\t\t\t...tail,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\t...tail.attributes,\n\t\t\t\t\t\t...tailType.merge( last.attributes, tail.attributes ),\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t\toutput.push( ...lastBlocks );\n\t\t\t\tselection = {\n\t\t\t\t\tclientId: tail.clientId,\n\t\t\t\t\tattributeKey: attributeKeyB,\n\t\t\t\t\toffset: create( {\n\t\t\t\t\t\thtml: last.attributes[ attributeKeyB ],\n\t\t\t\t\t} ).text.length,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\toutput.push( lastBlock );\n\t\t\t\tif ( ! isUnmodifiedBlock( tail ) ) {\n\t\t\t\t\toutput.push( tail );\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( ! isUnmodifiedBlock( tail ) ) {\n\t\t\toutput.push( tail );\n\t\t}\n\n\t\tregistry.batch( () => {\n\t\t\tdispatch.replaceBlocks(\n\t\t\t\tselect.getSelectedBlockClientIds(),\n\t\t\t\toutput,\n\t\t\t\toutput.length - 1,\n\t\t\t\t0\n\t\t\t);\n\t\t\tif ( selection ) {\n\t\t\t\tdispatch.selectionChange(\n\t\t\t\t\tselection.clientId,\n\t\t\t\t\tselection.attributeKey,\n\t\t\t\t\tselection.offset,\n\t\t\t\t\tselection.offset\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\t};\n\n/**\n * Expand the selection to cover the entire blocks, removing partial selection.\n */\nexport const __unstableExpandSelection =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tconst selectionAnchor = select.getSelectionStart();\n\t\tconst selectionFocus = select.getSelectionEnd();\n\t\tdispatch.selectionChange( {\n\t\t\tstart: { clientId: selectionAnchor.clientId },\n\t\t\tend: { clientId: selectionFocus.clientId },\n\t\t} );\n\t};\n\n/**\n * Action that merges two blocks.\n *\n * @param {string} firstBlockClientId  Client ID of the first block to merge.\n * @param {string} secondBlockClientId Client ID of the second block to merge.\n */\nexport const mergeBlocks =\n\t( firstBlockClientId, secondBlockClientId ) =>\n\t( { registry, select, dispatch } ) => {\n\t\tconst clientIdA = firstBlockClientId;\n\t\tconst clientIdB = secondBlockClientId;\n\t\tconst blockA = select.getBlock( clientIdA );\n\t\tconst blockAType = getBlockType( blockA.name );\n\n\t\tif ( ! blockAType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockB = select.getBlock( clientIdB );\n\n\t\tif (\n\t\t\t! blockAType.merge &&\n\t\t\tgetBlockSupport( blockA.name, '__experimentalOnMerge' )\n\t\t) {\n\t\t\t// If there's no merge function defined, attempt merging inner\n\t\t\t// blocks.\n\t\t\tconst blocksWithTheSameType = switchToBlockType(\n\t\t\t\tblockB,\n\t\t\t\tblockAType.name\n\t\t\t);\n\t\t\t// Only focus the previous block if it's not mergeable.\n\t\t\tif ( blocksWithTheSameType?.length !== 1 ) {\n\t\t\t\tdispatch.selectBlock( blockA.clientId );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst [ blockWithSameType ] = blocksWithTheSameType;\n\t\t\tif ( blockWithSameType.innerBlocks.length < 1 ) {\n\t\t\t\tdispatch.selectBlock( blockA.clientId );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tregistry.batch( () => {\n\t\t\t\tdispatch.insertBlocks(\n\t\t\t\t\tblockWithSameType.innerBlocks,\n\t\t\t\t\tundefined,\n\t\t\t\t\tclientIdA\n\t\t\t\t);\n\t\t\t\tdispatch.removeBlock( clientIdB );\n\t\t\t\tdispatch.selectBlock(\n\t\t\t\t\tblockWithSameType.innerBlocks[ 0 ].clientId\n\t\t\t\t);\n\n\t\t\t\t// Attempt to merge the next block if it's the same type and\n\t\t\t\t// same attributes. This is useful when merging a paragraph into\n\t\t\t\t// a list, and the next block is also a list. If we don't merge,\n\t\t\t\t// it looks like one list, but it's actually two lists. The same\n\t\t\t\t// applies to other blocks such as a group with the same\n\t\t\t\t// attributes.\n\t\t\t\tconst nextBlockClientId =\n\t\t\t\t\tselect.getNextBlockClientId( clientIdA );\n\n\t\t\t\tif (\n\t\t\t\t\tnextBlockClientId &&\n\t\t\t\t\tselect.getBlockName( clientIdA ) ===\n\t\t\t\t\t\tselect.getBlockName( nextBlockClientId )\n\t\t\t\t) {\n\t\t\t\t\tconst rootAttributes =\n\t\t\t\t\t\tselect.getBlockAttributes( clientIdA );\n\t\t\t\t\tconst previousRootAttributes =\n\t\t\t\t\t\tselect.getBlockAttributes( nextBlockClientId );\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tObject.keys( rootAttributes ).every(\n\t\t\t\t\t\t\t( key ) =>\n\t\t\t\t\t\t\t\trootAttributes[ key ] ===\n\t\t\t\t\t\t\t\tpreviousRootAttributes[ key ]\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tdispatch.moveBlocksToPosition(\n\t\t\t\t\t\t\tselect.getBlockOrder( nextBlockClientId ),\n\t\t\t\t\t\t\tnextBlockClientId,\n\t\t\t\t\t\t\tclientIdA\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdispatch.removeBlock( nextBlockClientId, false );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isUnmodifiedDefaultBlock( blockA ) ) {\n\t\t\tdispatch.removeBlock(\n\t\t\t\tclientIdA,\n\t\t\t\tselect.isBlockSelected( clientIdA )\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isUnmodifiedDefaultBlock( blockB ) ) {\n\t\t\tdispatch.removeBlock(\n\t\t\t\tclientIdB,\n\t\t\t\tselect.isBlockSelected( clientIdB )\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! blockAType.merge ) {\n\t\t\tdispatch.selectBlock( blockA.clientId );\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockBType = getBlockType( blockB.name );\n\t\tconst { clientId, attributeKey, offset } = select.getSelectionStart();\n\t\tconst selectedBlockType =\n\t\t\tclientId === clientIdA ? blockAType : blockBType;\n\t\tconst attributeDefinition =\n\t\t\tselectedBlockType.attributes[ attributeKey ];\n\t\tconst canRestoreTextSelection =\n\t\t\t( clientId === clientIdA || clientId === clientIdB ) &&\n\t\t\tattributeKey !== undefined &&\n\t\t\toffset !== undefined &&\n\t\t\t// We cannot restore text selection if the RichText identifier\n\t\t\t// is not a defined block attribute key. This can be the case if the\n\t\t\t// fallback instance ID is used to store selection (and no RichText\n\t\t\t// identifier is set), or when the identifier is wrong.\n\t\t\t!! attributeDefinition;\n\n\t\tif ( ! attributeDefinition ) {\n\t\t\tif ( typeof attributeKey === 'number' ) {\n\t\t\t\twindow.console.error(\n\t\t\t\t\t`RichText needs an identifier prop that is the block attribute key of the attribute it controls. Its type is expected to be a string, but was ${ typeof attributeKey }`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\twindow.console.error(\n\t\t\t\t\t'The RichText identifier prop does not match any attributes defined by the block.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Clone the blocks so we don't insert the character in a \"live\" block.\n\t\tconst cloneA = cloneBlock( blockA );\n\t\tconst cloneB = cloneBlock( blockB );\n\n\t\tif ( canRestoreTextSelection ) {\n\t\t\tconst selectedBlock = clientId === clientIdA ? cloneA : cloneB;\n\t\t\tconst html = selectedBlock.attributes[ attributeKey ];\n\t\t\tconst value = insert(\n\t\t\t\tcreate( { html } ),\n\t\t\t\tSTART_OF_SELECTED_AREA,\n\t\t\t\toffset,\n\t\t\t\toffset\n\t\t\t);\n\n\t\t\tselectedBlock.attributes[ attributeKey ] = toHTMLString( {\n\t\t\t\tvalue,\n\t\t\t} );\n\t\t}\n\n\t\t// We can only merge blocks with similar types\n\t\t// thus, we transform the block to merge first.\n\t\tconst blocksWithTheSameType =\n\t\t\tblockA.name === blockB.name\n\t\t\t\t? [ cloneB ]\n\t\t\t\t: switchToBlockType( cloneB, blockA.name );\n\n\t\t// If the block types can not match, do nothing.\n\t\tif ( ! blocksWithTheSameType || ! blocksWithTheSameType.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calling the merge to update the attributes and remove the block to be merged.\n\t\tconst updatedAttributes = blockAType.merge(\n\t\t\tcloneA.attributes,\n\t\t\tblocksWithTheSameType[ 0 ].attributes\n\t\t);\n\n\t\tif ( canRestoreTextSelection ) {\n\t\t\tconst newAttributeKey =\n\t\t\t\tretrieveSelectedAttribute( updatedAttributes );\n\t\t\tconst convertedHtml = updatedAttributes[ newAttributeKey ];\n\t\t\tconst convertedValue = create( { html: convertedHtml } );\n\t\t\tconst newOffset = convertedValue.text.indexOf(\n\t\t\t\tSTART_OF_SELECTED_AREA\n\t\t\t);\n\t\t\tconst newValue = remove( convertedValue, newOffset, newOffset + 1 );\n\t\t\tconst newHtml = toHTMLString( { value: newValue } );\n\n\t\t\tupdatedAttributes[ newAttributeKey ] = newHtml;\n\n\t\t\tdispatch.selectionChange(\n\t\t\t\tblockA.clientId,\n\t\t\t\tnewAttributeKey,\n\t\t\t\tnewOffset,\n\t\t\t\tnewOffset\n\t\t\t);\n\t\t}\n\n\t\tdispatch.replaceBlocks(\n\t\t\t[ blockA.clientId, blockB.clientId ],\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t...blockA,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\t...blockA.attributes,\n\t\t\t\t\t\t...updatedAttributes,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t...blocksWithTheSameType.slice( 1 ),\n\t\t\t],\n\t\t\t0 // If we don't pass the `indexToSelect` it will default to the last block.\n\t\t);\n\t};\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block\n *                                         or the immediate parent\n *                                         (if no previous block exists)\n *                                         should be selected\n *                                         when a block is removed.\n */\nexport const removeBlocks = ( clientIds, selectPrevious = true ) =>\n\tprivateRemoveBlocks( clientIds, selectPrevious );\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID is to be removed.\n *\n * @param {string}  clientId       Client ID of block to remove.\n * @param {boolean} selectPrevious True if the previous block should be\n *                                 selected when a block is removed.\n *\n * @return {Object} Action object.\n */\nexport function removeBlock( clientId, selectPrevious ) {\n\treturn removeBlocks( [ clientId ], selectPrevious );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that the inner blocks with the\n * specified client ID should be replaced.\n *\n * @param {string}    rootClientId    Client ID of the block whose InnerBlocks will re replaced.\n * @param {Object[]}  blocks          Block objects to insert as new InnerBlocks\n * @param {?boolean}  updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to false.\n * @param {0|-1|null} initialPosition Initial block position.\n * @return {Object} Action object.\n */\nexport function replaceInnerBlocks(\n\trootClientId,\n\tblocks,\n\tupdateSelection = false,\n\tinitialPosition = 0\n) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn {\n\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\trootClientId,\n\t\tblocks,\n\t\tupdateSelection,\n\t\tinitialPosition: updateSelection ? initialPosition : null,\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object used to toggle the block editing mode between\n * visual and HTML modes.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Action object.\n */\nexport function toggleBlockMode( clientId ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_MODE',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to type.\n *\n * @return {Object} Action object.\n */\nexport function startTyping() {\n\treturn {\n\t\ttype: 'START_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped typing.\n *\n * @return {Object} Action object.\n */\nexport function stopTyping() {\n\treturn {\n\t\ttype: 'STOP_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to drag blocks.\n *\n * @param {string[]} clientIds An array of client ids being dragged\n *\n * @return {Object} Action object.\n */\nexport function startDraggingBlocks( clientIds = [] ) {\n\treturn {\n\t\ttype: 'START_DRAGGING_BLOCKS',\n\t\tclientIds,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped dragging blocks.\n *\n * @return {Object} Action object.\n */\nexport function stopDraggingBlocks() {\n\treturn {\n\t\ttype: 'STOP_DRAGGING_BLOCKS',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the caret has entered formatted text.\n *\n * @deprecated\n *\n * @return {Object} Action object.\n */\nexport function enterFormattedText() {\n\tdeprecated( 'wp.data.dispatch( \"core/block-editor\" ).enterFormattedText', {\n\t\tsince: '6.1',\n\t\tversion: '6.3',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has exited formatted text.\n *\n * @deprecated\n *\n * @return {Object} Action object.\n */\nexport function exitFormattedText() {\n\tdeprecated( 'wp.data.dispatch( \"core/block-editor\" ).exitFormattedText', {\n\t\tsince: '6.1',\n\t\tversion: '6.3',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Action that changes the position of the user caret.\n *\n * @param {string|WPSelection} clientId     The selected block client ID.\n * @param {string}             attributeKey The selected block attribute key.\n * @param {number}             startOffset  The start offset.\n * @param {number}             endOffset    The end offset.\n *\n * @return {Object} Action object.\n */\nexport function selectionChange(\n\tclientId,\n\tattributeKey,\n\tstartOffset,\n\tendOffset\n) {\n\tif ( typeof clientId === 'string' ) {\n\t\treturn {\n\t\t\ttype: 'SELECTION_CHANGE',\n\t\t\tclientId,\n\t\t\tattributeKey,\n\t\t\tstartOffset,\n\t\t\tendOffset,\n\t\t};\n\t}\n\n\treturn { type: 'SELECTION_CHANGE', ...clientId };\n}\n\n/**\n * Action that adds a new block of the default type to the block list.\n *\n * @param {?Object} attributes   Optional attributes of the block to assign.\n * @param {?string} rootClientId Optional root client ID of block list on which\n *                               to append.\n * @param {?number} index        Optional index where to insert the default block.\n */\nexport const insertDefaultBlock =\n\t( attributes, rootClientId, index ) =>\n\t( { dispatch } ) => {\n\t\t// Abort if there is no default block type (if it has been unregistered).\n\t\tconst defaultBlockName = getDefaultBlockName();\n\t\tif ( ! defaultBlockName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst block = createBlock( defaultBlockName, attributes );\n\n\t\treturn dispatch.insertBlock( block, index, rootClientId );\n\t};\n\n/**\n * @typedef {Object< string, Object >} SettingsByClientId\n */\n\n/**\n * Action that changes the nested settings of the given block(s).\n *\n * @param {string | SettingsByClientId} clientId Client ID of the block whose\n *                                               nested setting are being\n *                                               received, or object of settings\n *                                               by client ID.\n * @param {Object}                      settings Object with the new settings\n *                                               for the nested block.\n *\n * @return {Object} Action object\n */\nexport function updateBlockListSettings( clientId, settings ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_LIST_SETTINGS',\n\t\tclientId,\n\t\tsettings,\n\t};\n}\n\n/**\n * Action that updates the block editor settings.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateSettings( settings ) {\n\treturn __experimentalUpdateSettings( settings, {\n\t\tstripExperimentalSettings: true,\n\t} );\n}\n\n/**\n * Action that signals that a temporary reusable block has been saved\n * in order to switch its temporary id with the real id.\n *\n * @param {string} id        Reusable block's id.\n * @param {string} updatedId Updated block's id.\n *\n * @return {Object} Action object.\n */\nexport function __unstableSaveReusableBlock( id, updatedId ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\tid,\n\t\tupdatedId,\n\t};\n}\n\n/**\n * Action that marks the last block change explicitly as persistent.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkLastChangeAsPersistent() {\n\treturn { type: 'MARK_LAST_CHANGE_AS_PERSISTENT' };\n}\n\n/**\n * Action that signals that the next block change should be marked explicitly as not persistent.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkNextChangeAsNotPersistent() {\n\treturn { type: 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT' };\n}\n\n/**\n * Action that marks the last block change as an automatic change, meaning it was not\n * performed by the user, and can be undone using the `Escape` and `Backspace` keys.\n * This action must be called after the change was made, and any actions that are a\n * consequence of it, so it is recommended to be called at the next idle period to ensure all\n * selection changes have been recorded.\n */\nexport const __unstableMarkAutomaticChange =\n\t() =>\n\t( { dispatch } ) => {\n\t\tdispatch( { type: 'MARK_AUTOMATIC_CHANGE' } );\n\t\tconst { requestIdleCallback = ( cb ) => setTimeout( cb, 100 ) } =\n\t\t\twindow;\n\t\trequestIdleCallback( () => {\n\t\t\tdispatch( { type: 'MARK_AUTOMATIC_CHANGE_FINAL' } );\n\t\t} );\n\t};\n\n/**\n * Action that enables or disables the navigation mode.\n *\n * @param {boolean} isNavigationMode Enable/Disable navigation mode.\n */\nexport const setNavigationMode =\n\t( isNavigationMode = true ) =>\n\t( { dispatch } ) => {\n\t\tdispatch.__unstableSetEditorMode(\n\t\t\tisNavigationMode ? 'navigation' : 'edit'\n\t\t);\n\t};\n\n/**\n * Action that sets the editor mode\n *\n * @param {string} mode Editor mode\n */\nexport const __unstableSetEditorMode =\n\t( mode ) =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( preferencesStore ).set( 'core', 'editorTool', mode );\n\n\t\tif ( mode === 'navigation' ) {\n\t\t\tspeak( __( 'You are currently in Write mode.' ) );\n\t\t} else if ( mode === 'edit' ) {\n\t\t\tspeak( __( 'You are currently in Design mode.' ) );\n\t\t}\n\t};\n\n/**\n * Set the block moving client ID.\n *\n * @deprecated\n *\n * @return {Object} Action object.\n */\nexport function setBlockMovingClientId() {\n\tdeprecated(\n\t\t'wp.data.dispatch( \"core/block-editor\" ).setBlockMovingClientId',\n\t\t{\n\t\t\tsince: '6.7',\n\t\t\thint: 'Block moving mode feature has been removed',\n\t\t}\n\t);\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Action that duplicates a list of blocks.\n *\n * @param {string[]} clientIds\n * @param {boolean}  updateSelection\n */\nexport const duplicateBlocks =\n\t( clientIds, updateSelection = true ) =>\n\t( { select, dispatch } ) => {\n\t\tif ( ! clientIds || ! clientIds.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return early if blocks don't exist.\n\t\tconst blocks = select.getBlocksByClientId( clientIds );\n\t\tif ( blocks.some( ( block ) => ! block ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return early if blocks don't support multiple usage.\n\t\tconst blockNames = blocks.map( ( block ) => block.name );\n\t\tif (\n\t\t\tblockNames.some(\n\t\t\t\t( blockName ) =>\n\t\t\t\t\t! hasBlockSupport( blockName, 'multiple', true )\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootClientId = select.getBlockRootClientId( clientIds[ 0 ] );\n\t\tconst clientIdsArray = castArray( clientIds );\n\t\tconst lastSelectedIndex = select.getBlockIndex(\n\t\t\tclientIdsArray[ clientIdsArray.length - 1 ]\n\t\t);\n\t\tconst clonedBlocks = blocks.map( ( block ) =>\n\t\t\t__experimentalCloneSanitizedBlock( block )\n\t\t);\n\t\tdispatch.insertBlocks(\n\t\t\tclonedBlocks,\n\t\t\tlastSelectedIndex + 1,\n\t\t\trootClientId,\n\t\t\tupdateSelection\n\t\t);\n\t\tif ( clonedBlocks.length > 1 && updateSelection ) {\n\t\t\tdispatch.multiSelect(\n\t\t\t\tclonedBlocks[ 0 ].clientId,\n\t\t\t\tclonedBlocks[ clonedBlocks.length - 1 ].clientId\n\t\t\t);\n\t\t}\n\t\treturn clonedBlocks.map( ( block ) => block.clientId );\n\t};\n\n/**\n * Action that inserts a default block before a given block.\n *\n * @param {string} clientId\n */\nexport const insertBeforeBlock =\n\t( clientId ) =>\n\t( { select, dispatch } ) => {\n\t\tif ( ! clientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst rootClientId = select.getBlockRootClientId( clientId );\n\t\tconst isLocked = select.getTemplateLock( rootClientId );\n\t\tif ( isLocked ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockIndex = select.getBlockIndex( clientId );\n\t\tconst directInsertBlock = rootClientId\n\t\t\t? select.getDirectInsertBlock( rootClientId )\n\t\t\t: null;\n\n\t\tif ( ! directInsertBlock ) {\n\t\t\treturn dispatch.insertDefaultBlock( {}, rootClientId, blockIndex );\n\t\t}\n\n\t\tconst copiedAttributes = {};\n\t\tif ( directInsertBlock.attributesToCopy ) {\n\t\t\tconst attributes = select.getBlockAttributes( clientId );\n\t\t\tdirectInsertBlock.attributesToCopy.forEach( ( key ) => {\n\t\t\t\tif ( attributes[ key ] ) {\n\t\t\t\t\tcopiedAttributes[ key ] = attributes[ key ];\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tconst block = createBlock( directInsertBlock.name, {\n\t\t\t...directInsertBlock.attributes,\n\t\t\t...copiedAttributes,\n\t\t} );\n\t\treturn dispatch.insertBlock( block, blockIndex, rootClientId );\n\t};\n\n/**\n * Action that inserts a default block after a given block.\n *\n * @param {string} clientId\n */\nexport const insertAfterBlock =\n\t( clientId ) =>\n\t( { select, dispatch } ) => {\n\t\tif ( ! clientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst rootClientId = select.getBlockRootClientId( clientId );\n\t\tconst isLocked = select.getTemplateLock( rootClientId );\n\t\tif ( isLocked ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockIndex = select.getBlockIndex( clientId );\n\t\tconst directInsertBlock = rootClientId\n\t\t\t? select.getDirectInsertBlock( rootClientId )\n\t\t\t: null;\n\n\t\tif ( ! directInsertBlock ) {\n\t\t\treturn dispatch.insertDefaultBlock(\n\t\t\t\t{},\n\t\t\t\trootClientId,\n\t\t\t\tblockIndex + 1\n\t\t\t);\n\t\t}\n\n\t\tconst copiedAttributes = {};\n\t\tif ( directInsertBlock.attributesToCopy ) {\n\t\t\tconst attributes = select.getBlockAttributes( clientId );\n\t\t\tdirectInsertBlock.attributesToCopy.forEach( ( key ) => {\n\t\t\t\tif ( attributes[ key ] ) {\n\t\t\t\t\tcopiedAttributes[ key ] = attributes[ key ];\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tconst block = createBlock( directInsertBlock.name, {\n\t\t\t...directInsertBlock.attributes,\n\t\t\t...copiedAttributes,\n\t\t} );\n\t\treturn dispatch.insertBlock( block, blockIndex + 1, rootClientId );\n\t};\n\n/**\n * Action that toggles the highlighted block state.\n *\n * @param {string}  clientId      The block's clientId.\n * @param {boolean} isHighlighted The highlight state.\n */\nexport function toggleBlockHighlight( clientId, isHighlighted ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_HIGHLIGHT',\n\t\tclientId,\n\t\tisHighlighted,\n\t};\n}\n\n/**\n * Action that \"flashes\" the block with a given `clientId` by rhythmically highlighting it.\n *\n * @param {string} clientId Target block client ID.\n */\nexport const flashBlock =\n\t( clientId ) =>\n\tasync ( { dispatch } ) => {\n\t\tdispatch( toggleBlockHighlight( clientId, true ) );\n\t\tawait new Promise( ( resolve ) => setTimeout( resolve, 150 ) );\n\t\tdispatch( toggleBlockHighlight( clientId, false ) );\n\t};\n\n/**\n * Action that sets whether a block has controlled inner blocks.\n *\n * @param {string}  clientId                 The block's clientId.\n * @param {boolean} hasControlledInnerBlocks True if the block's inner blocks are controlled.\n */\nexport function setHasControlledInnerBlocks(\n\tclientId,\n\thasControlledInnerBlocks\n) {\n\treturn {\n\t\ttype: 'SET_HAS_CONTROLLED_INNER_BLOCKS',\n\t\thasControlledInnerBlocks,\n\t\tclientId,\n\t};\n}\n\n/**\n * Action that sets whether given blocks are visible on the canvas.\n *\n * @param {Record<string,boolean>} updates For each block's clientId, its new visibility setting.\n */\nexport function setBlockVisibility( updates ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_VISIBILITY',\n\t\tupdates,\n\t};\n}\n\n/**\n * Action that sets whether a block is being temporarily edited as blocks.\n *\n * DO-NOT-USE in production.\n * This action is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @param {?string} temporarilyEditingAsBlocks The block's clientId being temporarily edited as blocks.\n * @param {?string} focusModeToRevert          The focus mode to revert after temporarily edit as blocks finishes.\n */\nexport function __unstableSetTemporarilyEditingAsBlocks(\n\ttemporarilyEditingAsBlocks,\n\tfocusModeToRevert\n) {\n\treturn {\n\t\ttype: 'SET_TEMPORARILY_EDITING_AS_BLOCKS',\n\t\ttemporarilyEditingAsBlocks,\n\t\tfocusModeToRevert,\n\t};\n}\n\n/**\n * Interface for inserter media requests.\n *\n * @typedef {Object} InserterMediaRequest\n * @property {number} per_page How many items to fetch per page.\n * @property {string} search   The search term to use for filtering the results.\n */\n\n/**\n * Interface for inserter media responses. Any media resource should\n * map their response to this interface, in order to create the core\n * WordPress media blocks (image, video, audio).\n *\n * @typedef {Object} InserterMediaItem\n * @property {string}        title        The title of the media item.\n * @property {string}        url          The source url of the media item.\n * @property {string}        [previewUrl] The preview source url of the media item to display in the media list.\n * @property {number}        [id]         The WordPress id of the media item.\n * @property {number|string} [sourceId]   The id of the media item from external source.\n * @property {string}        [alt]        The alt text of the media item.\n * @property {string}        [caption]    The caption of the media item.\n */\n\n/**\n * Registers a new inserter media category. Once registered, the media category is\n * available in the inserter's media tab.\n *\n * The following interfaces are used:\n *\n * _Type Definition_\n *\n * - _InserterMediaRequest_ `Object`: Interface for inserter media requests.\n *\n * _Properties_\n *\n * - _per_page_ `number`: How many items to fetch per page.\n * - _search_ `string`: The search term to use for filtering the results.\n *\n * _Type Definition_\n *\n * - _InserterMediaItem_ `Object`: Interface for inserter media responses. Any media resource should\n * map their response to this interface, in order to create the core\n * WordPress media blocks (image, video, audio).\n *\n * _Properties_\n *\n * - _title_ `string`: The title of the media item.\n * - _url_ `string: The source url of the media item.\n * - _previewUrl_ `[string]`: The preview source url of the media item to display in the media list.\n * - _id_ `[number]`: The WordPress id of the media item.\n * - _sourceId_ `[number|string]`: The id of the media item from external source.\n * - _alt_ `[string]`: The alt text of the media item.\n * - _caption_ `[string]`: The caption of the media item.\n *\n * @param    {InserterMediaCategory}                                  category                       The inserter media category to register.\n *\n * @example\n * ```js\n *\n * wp.data.dispatch('core/block-editor').registerInserterMediaCategory( {\n * \t name: 'openverse',\n * \t labels: {\n * \t \tname: 'Openverse',\n * \t \tsearch_items: 'Search Openverse',\n * \t },\n * \t mediaType: 'image',\n * \t async fetch( query = {} ) {\n * \t \tconst defaultArgs = {\n * \t \t\tmature: false,\n * \t \t\texcluded_source: 'flickr,inaturalist,wikimedia',\n * \t \t\tlicense: 'pdm,cc0',\n * \t \t};\n * \t \tconst finalQuery = { ...query, ...defaultArgs };\n * \t \t// Sometimes you might need to map the supported request params according to `InserterMediaRequest`.\n * \t \t// interface. In this example the `search` query param is named `q`.\n * \t \tconst mapFromInserterMediaRequest = {\n * \t \t\tper_page: 'page_size',\n * \t \t\tsearch: 'q',\n * \t \t};\n * \t \tconst url = new URL( 'https://api.openverse.org/v1/images/' );\n * \t \tObject.entries( finalQuery ).forEach( ( [ key, value ] ) => {\n * \t \t\tconst queryKey = mapFromInserterMediaRequest[ key ] || key;\n * \t \t\turl.searchParams.set( queryKey, value );\n * \t \t} );\n * \t \tconst response = await window.fetch( url, {\n * \t \t\theaders: {\n * \t \t\t\t'User-Agent': 'WordPress/inserter-media-fetch',\n * \t \t\t},\n * \t \t} );\n * \t \tconst jsonResponse = await response.json();\n * \t \tconst results = jsonResponse.results;\n * \t \treturn results.map( ( result ) => ( {\n * \t \t\t...result,\n * \t \t\t// If your response result includes an `id` prop that you want to access later, it should\n * \t \t\t// be mapped to `InserterMediaItem`'s `sourceId` prop. This can be useful if you provide\n * \t \t\t// a report URL getter.\n * \t \t\t// Additionally you should always clear the `id` value of your response results because\n * \t \t\t// it is used to identify WordPress media items.\n * \t \t\tsourceId: result.id,\n * \t \t\tid: undefined,\n * \t \t\tcaption: result.caption,\n * \t \t\tpreviewUrl: result.thumbnail,\n * \t \t} ) );\n * \t },\n * \t getReportUrl: ( { sourceId } ) =>\n * \t \t`https://wordpress.org/openverse/image/${ sourceId }/report/`,\n * \t isExternalResource: true,\n * } );\n * ```\n *\n * @typedef {Object} InserterMediaCategory Interface for inserter media category.\n * @property {string}                                                 name                           The name of the media category, that should be unique among all media categories.\n * @property {Object}                                                 labels                         Labels for the media category.\n * @property {string}                                                 labels.name                    General name of the media category. It's used in the inserter media items list.\n * @property {string}                                                 [labels.search_items='Search'] Label for searching items. Default is ‘Search Posts’ / ‘Search Pages’.\n * @property {('image'|'audio'|'video')}                              mediaType                      The media type of the media category.\n * @property {(InserterMediaRequest) => Promise<InserterMediaItem[]>} fetch                          The function to fetch media items for the category.\n * @property {(InserterMediaItem) => string}                          [getReportUrl]                 If the media category supports reporting media items, this function should return\n *                                                                                                   the report url for the media item. It accepts the `InserterMediaItem` as an argument.\n * @property {boolean}                                                [isExternalResource]           If the media category is an external resource, this should be set to true.\n *                                                                                                   This is used to avoid making a request to the external resource when the user\n */\nexport const registerInserterMediaCategory =\n\t( category ) =>\n\t( { select, dispatch } ) => {\n\t\tif ( ! category || typeof category !== 'object' ) {\n\t\t\tconsole.error(\n\t\t\t\t'Category should be an `InserterMediaCategory` object.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif ( ! category.name ) {\n\t\t\tconsole.error(\n\t\t\t\t'Category should have a `name` that should be unique among all media categories.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif ( ! category.labels?.name ) {\n\t\t\tconsole.error( 'Category should have a `labels.name`.' );\n\t\t\treturn;\n\t\t}\n\t\tif ( ! [ 'image', 'audio', 'video' ].includes( category.mediaType ) ) {\n\t\t\tconsole.error(\n\t\t\t\t'Category should have `mediaType` property that is one of `image|audio|video`.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif ( ! category.fetch || typeof category.fetch !== 'function' ) {\n\t\t\tconsole.error(\n\t\t\t\t'Category should have a `fetch` function defined with the following signature `(InserterMediaRequest) => Promise<InserterMediaItem[]>`.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tconst registeredInserterMediaCategories =\n\t\t\tselect.getRegisteredInserterMediaCategories();\n\t\tif (\n\t\t\tregisteredInserterMediaCategories.some(\n\t\t\t\t( { name } ) => name === category.name\n\t\t\t)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`A category is already registered with the same name: \"${ category.name }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tregisteredInserterMediaCategories.some(\n\t\t\t\t( { labels: { name } = {} } ) => name === category.labels?.name\n\t\t\t)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`A category is already registered with the same labels.name: \"${ category.labels.name }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\t// `inserterMediaCategories` is a private block editor setting, which means it cannot\n\t\t// be updated through the public `updateSettings` action. We preserve this setting as\n\t\t// private, so extenders can only add new inserter media categories and don't have any\n\t\t// control over the core media categories.\n\t\tdispatch( {\n\t\t\ttype: 'REGISTER_INSERTER_MEDIA_CATEGORY',\n\t\t\tcategory: { ...category, isExternalResource: true },\n\t\t} );\n\t};\n\n/**\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\n */\n\n/**\n * Sets the block editing mode for a given block.\n *\n * @see useBlockEditingMode\n *\n * @param {string}           clientId The block client ID, or `''` for the root container.\n * @param {BlockEditingMode} mode     The block editing mode. One of `'disabled'`,\n *                                    `'contentOnly'`, or `'default'`.\n *\n * @return {Object} Action object.\n */\nexport function setBlockEditingMode( clientId = '', mode ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_EDITING_MODE',\n\t\tclientId,\n\t\tmode,\n\t};\n}\n\n/**\n * Clears the block editing mode for a given block.\n *\n * @see useBlockEditingMode\n *\n * @param {string} clientId The block client ID, or `''` for the root container.\n *\n * @return {Object} Action object.\n */\nexport function unsetBlockEditingMode( clientId = '' ) {\n\treturn {\n\t\ttype: 'UNSET_BLOCK_EDITING_MODE',\n\t\tclientId,\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAAA,OAAA,GAAAC,OAAA;AAcA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AACA,IAAAI,SAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAC,sBAAA,CAAAN,OAAA;AACA,IAAAO,YAAA,GAAAP,OAAA;AAKA,IAAAQ,UAAA,GAAAR,OAAA;AAKA,IAAAS,eAAA,GAAAT,OAAA;AAjCA;AACA;AACA;AACA;;AAsBA;AACA;AACA;;AAWA;;AAEA,MAAMU,SAAS,GAAKC,UAAU,IAC7BC,KAAK,CAACC,OAAO,CAAEF,UAAW,CAAC,GAAGA,UAAU,GAAG,CAAEA,UAAU,CAAE;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,WAAW,GACrBC,MAAM,IACR,CAAE;EAAEC;AAAS,CAAC,KAAM;EACnBA,QAAQ,CAAE;IAAEC,IAAI,EAAE,cAAc;IAAEF;EAAO,CAAE,CAAC;EAC5CC,QAAQ,CAAEE,wBAAwB,CAAEH,MAAO,CAAE,CAAC;AAC/C,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPAI,OAAA,CAAAL,WAAA,GAAAA,WAAA;AAQO,MAAMI,wBAAwB,GAClCH,MAAM,IACR,CAAE;EAAEK,MAAM;EAAEJ;AAAS,CAAC,KAAM;EAC3B,MAAMK,QAAQ,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC;EACrC,MAAMC,YAAY,GAAGH,MAAM,CAACI,eAAe,CAAC,CAAC;;EAE7C;EACA;EACA,MAAMC,uBAAuB,GAC5B,CAAEJ,QAAQ,IACVE,YAAY,KAAK,KAAK,IACtB,IAAAG,6BAAqB,EAAEX,MAAM,EAAEM,QAAS,CAAC;;EAE1C;EACA,MAAMM,eAAe,GAAGP,MAAM,CAACO,eAAe,CAAC,CAAC;EAEhD,IAAKF,uBAAuB,KAAKE,eAAe,EAAG;IAClDX,QAAQ,CAACY,mBAAmB,CAAEH,uBAAwB,CAAC;IACvD,OAAOA,uBAAuB;EAC/B;AACD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATAN,OAAA,CAAAD,wBAAA,GAAAA,wBAAA;AAUO,SAASW,cAAcA,CAC7BC,cAAc,EACdC,YAAY,EACZC,eAAe,EACd;EACD;EACA,OAAO;IACNf,IAAI,EAAE,iBAAiB;IACvBa,cAAc;IACdC,YAAY;IACZC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAAElB,MAAM,EAAG;EACvC,IAAAmB,mBAAU,EAAE,uDAAuD,EAAE;IACpEC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE;EACd,CAAE,CAAC;EAEH,OAAO;IACNnB,IAAI,EAAE,gBAAgB;IACtBF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASsB,qBAAqBA,CACpCC,SAAS,EACTC,UAAU,EACVC,aAAa,GAAG,KAAK,EACpB;EACD,OAAO;IACNvB,IAAI,EAAE,yBAAyB;IAC/BqB,SAAS,EAAE5B,SAAS,CAAE4B,SAAU,CAAC;IACjCC,UAAU;IACVC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,WAAWA,CAAEC,QAAQ,EAAEC,OAAO,EAAG;EAChD,OAAO;IACN1B,IAAI,EAAE,cAAc;IACpByB,QAAQ;IACRC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,WAAWA,CAAEF,QAAQ,EAAEV,eAAe,GAAG,CAAC,EAAG;EAC5D;EACA,OAAO;IACNf,IAAI,EAAE,cAAc;IACpBe,eAAe;IACfU;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,UAAUA,CAAEH,QAAQ,EAAG;EACtC,OAAO;IA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CAAE,CAAC;AACpD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AALAvB,OAAA,CAAAmR,UAAA,GAAAA,UAAA;AAMO,SAASG,2BAA2BA,CAC1C/P,QAAQ,EACRgQ,wBAAwB,EACvB;EACD,OAAO;IACNzR,IAAI,EAAE,iCAAiC;IACvCyR,wBAAwB;IACxBhQ;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASiQ,kBAAkBA,CAAEhQ,OAAO,EAAG;EAC7C,OAAO;IACN1B,IAAI,EAAE,sBAAsB;IAC5B0B;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASiQ,uCAAuCA,CACtDC,0BAA0B,EAC1BC,iBAAiB,EAChB;EACD,OAAO;IACN7R,IAAI,EAAE,mCAAmC;IACzC4R,0BAA0B;IAC1BC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,6BAA6B,GACvCC,QAAQ,IACV,CAAE;EAAE5R,MAAM;EAAEJ;AAAS,CAAC,KAAM;EAC3B,IAAK,CAAEgS,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAG;IACjDtE,OAAO,CAACC,KAAK,CACZ,uDACD,CAAC;IACD;EACD;EACA,IAAK,CAAEqE,QAAQ,CAAC/N,IAAI,EAAG;IACtByJ,OAAO,CAACC,KAAK,CACZ,iFACD,CAAC;IACD;EACD;EACA,IAAK,CAAEqE,QAAQ,CAACC,MAAM,EAAEhO,IAAI,EAAG;IAC9ByJ,OAAO,CAACC,KAAK,CAAE,uCAAwC,CAAC;IACxD;EACD;EACA,IAAK,CAAE,CAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAE,CAACuE,QAAQ,CAAEF,QAAQ,CAACG,SAAU,CAAC,EAAG;IACrEzE,OAAO,CAACC,KAAK,CACZ,+EACD,CAAC;IACD;EACD;EACA,IAAK,CAAEqE,QAAQ,CAACI,KAAK,IAAI,OAAOJ,QAAQ,CAACI,KAAK,KAAK,UAAU,EAAG;IAC/D1E,OAAO,CAACC,KAAK,CACZ,wIACD,CAAC;IACD;EACD;EACA,MAAM0E,iCAAiC,GACtCjS,MAAM,CAACkS,oCAAoC,CAAC,CAAC;EAC9C,IACCD,iCAAiC,CAACjC,IAAI,CACrC,CAAE;IAAEnM;EAAK,CAAC,KAAMA,IAAI,KAAK+N,QAAQ,CAAC/N,IACnC,CAAC,EACA;IACDyJ,OAAO,CAACC,KAAK,CACZ,yDAA0DqE,QAAQ,CAAC/N,IAAI,IACxE,CAAC;IACD;EACD;EACA,IACCoO,iCAAiC,CAACjC,IAAI,CACrC,CAAE;IAAE6B,MAAM,EAAE;MAAEhO;IAAK,CAAC,GAAG,CAAC;EAAE,CAAC,KAAMA,IAAI,KAAK+N,QAAQ,CAACC,MAAM,EAAEhO,IAC5D,CAAC,EACA;IACDyJ,OAAO,CAACC,KAAK,CACZ,gEAAiEqE,QAAQ,CAACC,MAAM,CAAChO,IAAI,IACtF,CAAC;IACD;EACD;EACA;EACA;EACA;EACA;EACAjE,QAAQ,CAAE;IACTC,IAAI,EAAE,kCAAkC;IACxC+R,QAAQ,EAAE;MAAE,GAAGA,QAAQ;MAAEO,kBAAkB,EAAE;IAAK;EACnD,CAAE,CAAC;AACJ,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVApS,OAAA,CAAA4R,6BAAA,GAAAA,6BAAA;AAWO,SAASS,mBAAmBA,CAAE9Q,QAAQ,GAAG,EAAE,EAAEoO,IAAI,EAAG;EAC1D,OAAO;IACN7P,IAAI,EAAE,wBAAwB;IAC9ByB,QAAQ;IACRoO;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS2C,qBAAqBA,CAAE/Q,QAAQ,GAAG,EAAE,EAAG;EACtD,OAAO;IACNzB,IAAI,EAAE,0BAA0B;IAChCyB;EACD,CAAC;AACF","ignoreList":[]}