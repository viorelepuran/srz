{"version":3,"names":["_element","require","_blocks","_data","_i18n","_notices","_store","useNotifyCopy","getBlockName","useSelect","blockEditorStore","getBlockType","blocksStore","createSuccessNotice","useDispatch","noticesStore","useCallback","eventType","selectedBlockClientIds","notice","__","length","clientId","title","sprintf","_n","type"],"sources":["@wordpress/block-editor/src/utils/use-notify-copy.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../store';\n\nexport function useNotifyCopy() {\n\tconst { getBlockName } = useSelect( blockEditorStore );\n\tconst { getBlockType } = useSelect( blocksStore );\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\n\treturn useCallback(\n\t\t( eventType, selectedBlockClientIds ) => {\n\t\t\tlet notice = '';\n\n\t\t\tif ( eventType === 'copyStyles' ) {\n\t\t\t\tnotice = __( 'Styles copied to clipboard.' );\n\t\t\t} else if ( selectedBlockClientIds.length === 1 ) {\n\t\t\t\tconst clientId = selectedBlockClientIds[ 0 ];\n\t\t\t\tconst title = getBlockType( getBlockName( clientId ) )?.title;\n\n\t\t\t\tif ( eventType === 'copy' ) {\n\t\t\t\t\tnotice = sprintf(\n\t\t\t\t\t\t// Translators: Name of the block being copied, e.g. \"Paragraph\".\n\t\t\t\t\t\t__( 'Copied \"%s\" to clipboard.' ),\n\t\t\t\t\t\ttitle\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tnotice = sprintf(\n\t\t\t\t\t\t// Translators: Name of the block being cut, e.g. \"Paragraph\".\n\t\t\t\t\t\t__( 'Moved \"%s\" to clipboard.' ),\n\t\t\t\t\t\ttitle\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if ( eventType === 'copy' ) {\n\t\t\t\tnotice = sprintf(\n\t\t\t\t\t// Translators: %d: Number of blocks being copied.\n\t\t\t\t\t_n(\n\t\t\t\t\t\t'Copied %d block to clipboard.',\n\t\t\t\t\t\t'Copied %d blocks to clipboard.',\n\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t),\n\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tnotice = sprintf(\n\t\t\t\t\t// Translators: %d: Number of blocks being moved.\n\t\t\t\t\t_n(\n\t\t\t\t\t\t'Moved %d block to clipboard.',\n\t\t\t\t\t\t'Moved %d blocks to clipboard.',\n\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t),\n\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcreateSuccessNotice( notice, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t},\n\t\t[ createSuccessNotice, getBlockName, getBlockType ]\n\t);\n}\n"],"mappings":";;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AAKA,IAAAK,MAAA,GAAAL,OAAA;AAZA;AACA;AACA;;AAOA;AACA;AACA;;AAGO,SAASM,aAAaA,CAAA,EAAG;EAC/B,MAAM;IAAEC;EAAa,CAAC,GAAG,IAAAC,eAAS,EAAEC,YAAiB,CAAC;EACtD,MAAM;IAAEC;EAAa,CAAC,GAAG,IAAAF,eAAS,EAAEG,aAAY,CAAC;EACjD,MAAM;IAAEC;EAAoB,CAAC,GAAG,IAAAC,iBAAW,EAAEC,cAAa,CAAC;EAE3D,OAAO,IAAAC,oBAAW,EACjB,CAAEC,SAAS,EAAEC,sBAAsB,KAAM;IACxC,IAAIC,MAAM,GAAG,EAAE;IAEf,IAAKF,SAAS,KAAK,YAAY,EAAG;MACjCE,MAAM,GAAG,IAAAC,QAAE,EAAE,6BAA8B,CAAC;IAC7C,CAAC,MAAM,IAAKF,sBAAsB,CAACG,MAAM,KAAK,CAAC,EAAG;MACjD,MAAMC,QAAQ,GAAGJ,sBAAsB,CAAE,CAAC,CAAE;MAC5C,MAAMK,KAAK,GAAGZ,YAAY,CAAEH,YAAY,CAAEc,QAAS,CAAE,CAAC,EAAEC,KAAK;MAE7D,IAAKN,SAAS,KAAK,MAAM,EAAG;QAC3BE,MAAM,GAAG,IAAAK,aAAO;QACf;QACA,IAAAJ,QAAE,EAAE,2BAA4B,CAAC,EACjCG,KACD,CAAC;MACF,CAAC,MAAM;QACNJ,MAAM,GAAG,IAAAK,aAAO;QACf;QACA,IAAAJ,QAAE,EAAE,0BAA2B,CAAC,EAChCG,KACD,CAAC;MACF;IACD,CAAC,MAAM,IAAKN,SAAS,KAAK,MAAM,EAAG;MAClCE,MAAM,GAAG,IAAAK,aAAO;MACf;MACA,IAAAC,QAAE,EACD,+BAA+B,EAC/B,gCAAgC,EAChCP,sBAAsB,CAACG,MACxB,CAAC,EACDH,sBAAsB,CAACG,MACxB,CAAC;IACF,CAAC,MAAM;MACNF,MAAM,GAAG,IAAAK,aAAO;MACf;MACA,IAAAC,QAAE,EACD,8BAA8B,EAC9B,+BAA+B,EAC/BP,sBAAsB,CAACG,MACxB,CAAC,EACDH,sBAAsB,CAACG,MACxB,CAAC;IACF;IAEAR,mBAAmB,CAAEM,MAAM,EAAE;MAC5BO,IAAI,EAAE;IACP,CAAE,CAAC;EACJ,CAAC,EACD,CAAEb,mBAAmB,EAAEL,YAAY,EAAEG,YAAY,CAClD,CAAC;AACF","ignoreList":[]}