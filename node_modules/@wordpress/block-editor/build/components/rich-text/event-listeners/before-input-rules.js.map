{"version":3,"names":["_richText","require","_hooks","_store","wrapSelectionSettings","_default","props","element","onInput","event","inputType","data","value","onChange","registry","current","isCollapsed","pair","applyFilters","find","startChar","endChar","start","end","length","newValue","insert","__unstableMarkLastChangeAsPersistent","__unstableMarkAutomaticChange","dispatch","blockEditorStore","init","key","ownerDocument","defaultView","newEvent","InputEvent","window","queueMicrotask","target","dispatchEvent","preventDefault","addEventListener","removeEventListener","exports","default"],"sources":["@wordpress/block-editor/src/components/rich-text/event-listeners/before-input-rules.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { insert, isCollapsed } from '@wordpress/rich-text';\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../../store';\n\n/**\n * When typing over a selection, the selection will we wrapped by a matching\n * character pair. The second character is optional, it defaults to the first\n * character.\n *\n * @type {string[]} Array of character pairs.\n */\nconst wrapSelectionSettings = [ '`', '\"', \"'\", '“”', '‘’' ];\n\nexport default ( props ) => ( element ) => {\n\tfunction onInput( event ) {\n\t\tconst { inputType, data } = event;\n\t\tconst { value, onChange, registry } = props.current;\n\n\t\t// Only run the rules when inserting text.\n\t\tif ( inputType !== 'insertText' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isCollapsed( value ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst pair = applyFilters(\n\t\t\t'blockEditor.wrapSelectionSettings',\n\t\t\twrapSelectionSettings\n\t\t).find(\n\t\t\t( [ startChar, endChar ] ) => startChar === data || endChar === data\n\t\t);\n\n\t\tif ( ! pair ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [ startChar, endChar = startChar ] = pair;\n\t\tconst start = value.start;\n\t\tconst end = value.end + startChar.length;\n\n\t\tlet newValue = insert( value, startChar, start, start );\n\t\tnewValue = insert( newValue, endChar, end, end );\n\n\t\tconst {\n\t\t\t__unstableMarkLastChangeAsPersistent,\n\t\t\t__unstableMarkAutomaticChange,\n\t\t} = registry.dispatch( blockEditorStore );\n\n\t\t__unstableMarkLastChangeAsPersistent();\n\t\tonChange( newValue );\n\t\t__unstableMarkAutomaticChange();\n\n\t\tconst init = {};\n\n\t\tfor ( const key in event ) {\n\t\t\tinit[ key ] = event[ key ];\n\t\t}\n\n\t\tinit.data = endChar;\n\n\t\tconst { ownerDocument } = element;\n\t\tconst { defaultView } = ownerDocument;\n\t\tconst newEvent = new defaultView.InputEvent( 'input', init );\n\n\t\t// Dispatch an `input` event with the new data. This will trigger the\n\t\t// input rules.\n\t\t// Postpone the `input` to the next event loop tick so that the dispatch\n\t\t// doesn't happen synchronously in the middle of `beforeinput` dispatch.\n\t\t// This is closer to how native `input` event would be timed, and also\n\t\t// makes sure that the `input` event is dispatched only after the `onChange`\n\t\t// call few lines above has fully updated the data store state and rerendered\n\t\t// all affected components.\n\t\twindow.queueMicrotask( () => {\n\t\t\tevent.target.dispatchEvent( newEvent );\n\t\t} );\n\t\tevent.preventDefault();\n\t}\n\n\telement.addEventListener( 'beforeinput', onInput );\n\treturn () => {\n\t\telement.removeEventListener( 'beforeinput', onInput );\n\t};\n};\n"],"mappings":";;;;;;AAGA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAKA,IAAAE,MAAA,GAAAF,OAAA;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,qBAAqB,GAAG,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAE;AAAC,IAAAC,QAAA,GAE3CC,KAAK,IAAQC,OAAO,IAAM;EAC1C,SAASC,OAAOA,CAAEC,KAAK,EAAG;IACzB,MAAM;MAAEC,SAAS;MAAEC;IAAK,CAAC,GAAGF,KAAK;IACjC,MAAM;MAAEG,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGR,KAAK,CAACS,OAAO;;IAEnD;IACA,IAAKL,SAAS,KAAK,YAAY,EAAG;MACjC;IACD;IAEA,IAAK,IAAAM,qBAAW,EAAEJ,KAAM,CAAC,EAAG;MAC3B;IACD;IAEA,MAAMK,IAAI,GAAG,IAAAC,mBAAY,EACxB,mCAAmC,EACnCd,qBACD,CAAC,CAACe,IAAI,CACL,CAAE,CAAEC,SAAS,EAAEC,OAAO,CAAE,KAAMD,SAAS,KAAKT,IAAI,IAAIU,OAAO,KAAKV,IACjE,CAAC;IAED,IAAK,CAAEM,IAAI,EAAG;MACb;IACD;IAEA,MAAM,CAAEG,SAAS,EAAEC,OAAO,GAAGD,SAAS,CAAE,GAAGH,IAAI;IAC/C,MAAMK,KAAK,GAAGV,KAAK,CAACU,KAAK;IACzB,MAAMC,GAAG,GAAGX,KAAK,CAACW,GAAG,GAAGH,SAAS,CAACI,MAAM;IAExC,IAAIC,QAAQ,GAAG,IAAAC,gBAAM,EAAEd,KAAK,EAAEQ,SAAS,EAAEE,KAAK,EAAEA,KAAM,CAAC;IACvDG,QAAQ,GAAG,IAAAC,gBAAM,EAAED,QAAQ,EAAEJ,OAAO,EAAEE,GAAG,EAAEA,GAAI,CAAC;IAEhD,MAAM;MACLI,oCAAoC;MACpCC;IACD,CAAC,GAAGd,QAAQ,CAACe,QAAQ,CAAEC,YAAiB,CAAC;IAEzCH,oCAAoC,CAAC,CAAC;IACtCd,QAAQ,CAAEY,QAAS,CAAC;IACpBG,6BAA6B,CAAC,CAAC;IAE/B,MAAMG,IAAI,GAAG,CAAC,CAAC;IAEf,KAAM,MAAMC,GAAG,IAAIvB,KAAK,EAAG;MAC1BsB,IAAI,CAAEC,GAAG,CAAE,GAAGvB,KAAK,CAAEuB,GAAG,CAAE;IAC3B;IAEAD,IAAI,CAACpB,IAAI,GAAGU,OAAO;IAEnB,MAAM;MAAEY;IAAc,CAAC,GAAG1B,OAAO;IACjC,MAAM;MAAE2B;IAAY,CAAC,GAAGD,aAAa;IACrC,MAAME,QAAQ,GAAG,IAAID,WAAW,CAACE,UAAU,CAAE,OAAO,EAAEL,IAAK,CAAC;;IAE5D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAM,MAAM,CAACC,cAAc,CAAE,MAAM;MAC5B7B,KAAK,CAAC8B,MAAM,CAACC,aAAa,CAAEL,QAAS,CAAC;IACvC,CAAE,CAAC;IACH1B,KAAK,CAACgC,cAAc,CAAC,CAAC;EACvB;EAEAlC,OAAO,CAACmC,gBAAgB,CAAE,aAAa,EAAElC,OAAQ,CAAC;EAClD,OAAO,MAAM;IACZD,OAAO,CAACoC,mBAAmB,CAAE,aAAa,EAAEnC,OAAQ,CAAC;EACtD,CAAC;AACF,CAAC;AAAAoC,OAAA,CAAAC,OAAA,GAAAxC,QAAA","ignoreList":[]}