"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

const BLOCK_ALIGNMENTS_CONTROLS = {
  top: {
    icon: _icons.justifyTop,
    title: (0, _i18n._x)('Align top', 'Block vertical alignment setting')
  },
  center: {
    icon: _icons.justifyCenterVertical,
    title: (0, _i18n._x)('Align middle', 'Block vertical alignment setting')
  },
  bottom: {
    icon: _icons.justifyBottom,
    title: (0, _i18n._x)('Align bottom', 'Block vertical alignment setting')
  },
  stretch: {
    icon: _icons.justifyStretchVertical,
    title: (0, _i18n._x)('Stretch to fill', 'Block vertical alignment setting')
  },
  'space-between': {
    icon: _icons.justifySpaceBetweenVertical,
    title: (0, _i18n._x)('Space between', 'Block vertical alignment setting')
  }
};
const DEFAULT_CONTROLS = ['top', 'center', 'bottom'];
const DEFAULT_CONTROL = 'top';
function BlockVerticalAlignmentUI({
  value,
  onChange,
  controls = DEFAULT_CONTROLS,
  isCollapsed = true,
  isToolbar
}) {
  function applyOrUnset(align) {
    return () => onChange(value === align ? undefined : align);
  }
  const activeAlignment = BLOCK_ALIGNMENTS_CONTROLS[value];
  const defaultAlignmentControl = BLOCK_ALIGNMENTS_CONTROLS[DEFAULT_CONTROL];
  const UIComponent = isToolbar ? _components.ToolbarGroup : _components.ToolbarDropdownMenu;
  const extraProps = isToolbar ? {
    isCollapsed
  } : {};
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(UIComponent, {
    icon: activeAlignment ? activeAlignment.icon : defaultAlignmentControl.icon,
    label: (0, _i18n._x)('Change vertical alignment', 'Block vertical alignment setting label'),
    controls: controls.map(control => {
      return {
        ...BLOCK_ALIGNMENTS_CONTROLS[control],
        isActive: value === control,
        role: isCollapsed ? 'menuitemradio' : undefined,
        onClick: applyOrUnset(control)
      };
    }),
    ...extraProps
  });
}

/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-vertical-alignment-toolbar/README.md
 */
var _default = exports.default = BlockVerticalAlignmentUI;
//# sourceMappingURL=ui.js.map