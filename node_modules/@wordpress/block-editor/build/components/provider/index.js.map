{"version":3,"names":["_data","require","_element","_components","_uploadMedia","_withRegistryProvider","_interopRequireDefault","_useBlockSync","_store","_blockRefsProvider","_lockUnlock","_keyboardShortcuts","_useMediaUploadSettings","_jsxRuntime","noop","mediaUpload","registry","allowedTypes","additionalData","filesList","onError","onFileChange","onSuccess","onBatchSuccess","dispatch","uploadStore","addItems","files","onChange","message","ExperimentalBlockEditorProvider","exports","withRegistryProvider","props","settings","_settings","stripExperimentalSettings","mediaUploadSettings","useMediaUploadSettings","window","__experimentalMediaProcessing","useMemo","bind","__experimentalUpdateSettings","unlock","useDispatch","blockEditorStore","useEffect","__internalIsInitialized","reset","useBlockSync","children","jsxs","SlotFillProvider","passthrough","isPreviewMode","jsx","default","Register","BlockRefsProvider","MediaUploadProvider","useSubRegistry","BlockEditorProvider","_default"],"sources":["@wordpress/block-editor/src/components/provider/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useDispatch } from '@wordpress/data';\nimport { useEffect, useMemo } from '@wordpress/element';\nimport { SlotFillProvider } from '@wordpress/components';\nimport {\n\tMediaUploadProvider,\n\tstore as uploadStore,\n} from '@wordpress/upload-media';\n\n/**\n * Internal dependencies\n */\nimport withRegistryProvider from './with-registry-provider';\nimport useBlockSync from './use-block-sync';\nimport { store as blockEditorStore } from '../../store';\nimport { BlockRefsProvider } from './block-refs-provider';\nimport { unlock } from '../../lock-unlock';\nimport KeyboardShortcuts from '../keyboard-shortcuts';\nimport useMediaUploadSettings from './use-media-upload-settings';\n\n/** @typedef {import('@wordpress/data').WPDataRegistry} WPDataRegistry */\n\nconst noop = () => {};\n\n/**\n * Upload a media file when the file upload button is activated\n * or when adding a file to the editor via drag & drop.\n *\n * @param {WPDataRegistry} registry\n * @param {Object}         $3                Parameters object passed to the function.\n * @param {Array}          $3.allowedTypes   Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param {Object}         $3.additionalData Additional data to include in the request.\n * @param {Array<File>}    $3.filesList      List of files.\n * @param {Function}       $3.onError        Function called when an error happens.\n * @param {Function}       $3.onFileChange   Function called each time a file or a temporary representation of the file is available.\n * @param {Function}       $3.onSuccess      Function called once a file has completely finished uploading, including thumbnails.\n * @param {Function}       $3.onBatchSuccess Function called once all files in a group have completely finished uploading, including thumbnails.\n */\nfunction mediaUpload(\n\tregistry,\n\t{\n\t\tallowedTypes,\n\t\tadditionalData = {},\n\t\tfilesList,\n\t\tonError = noop,\n\t\tonFileChange,\n\t\tonSuccess,\n\t\tonBatchSuccess,\n\t}\n) {\n\tvoid registry.dispatch( uploadStore ).addItems( {\n\t\tfiles: filesList,\n\t\tonChange: onFileChange,\n\t\tonSuccess,\n\t\tonBatchSuccess,\n\t\tonError: ( { message } ) => onError( message ),\n\t\tadditionalData,\n\t\tallowedTypes,\n\t} );\n}\n\nexport const ExperimentalBlockEditorProvider = withRegistryProvider(\n\t( props ) => {\n\t\tconst {\n\t\t\tsettings: _settings,\n\t\t\tregistry,\n\t\t\tstripExperimentalSettings = false,\n\t\t} = props;\n\n\t\tconst mediaUploadSettings = useMediaUploadSettings( _settings );\n\n\t\tlet settings = _settings;\n\n\t\tif ( window.__experimentalMediaProcessing && _settings.mediaUpload ) {\n\t\t\t// Create a new variable so that the original props.settings.mediaUpload is not modified.\n\t\t\tsettings = useMemo(\n\t\t\t\t() => ( {\n\t\t\t\t\t..._settings,\n\t\t\t\t\tmediaUpload: mediaUpload.bind( null, registry ),\n\t\t\t\t} ),\n\t\t\t\t[ _settings, registry ]\n\t\t\t);\n\t\t}\n\n\t\tconst { __experimentalUpdateSettings } = unlock(\n\t\t\tuseDispatch( blockEditorStore )\n\t\t);\n\t\tuseEffect( () => {\n\t\t\t__experimentalUpdateSettings(\n\t\t\t\t{\n\t\t\t\t\t...settings,\n\t\t\t\t\t__internalIsInitialized: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tstripExperimentalSettings,\n\t\t\t\t\treset: true,\n\t\t\t\t}\n\t\t\t);\n\t\t}, [\n\t\t\tsettings,\n\t\t\tstripExperimentalSettings,\n\t\t\t__experimentalUpdateSettings,\n\t\t] );\n\n\t\t// Syncs the entity provider with changes in the block-editor store.\n\t\tuseBlockSync( props );\n\n\t\tconst children = (\n\t\t\t<SlotFillProvider passthrough>\n\t\t\t\t{ ! settings?.isPreviewMode && <KeyboardShortcuts.Register /> }\n\t\t\t\t<BlockRefsProvider>{ props.children }</BlockRefsProvider>\n\t\t\t</SlotFillProvider>\n\t\t);\n\n\t\tif ( window.__experimentalMediaProcessing ) {\n\t\t\treturn (\n\t\t\t\t<MediaUploadProvider\n\t\t\t\t\tsettings={ mediaUploadSettings }\n\t\t\t\t\tuseSubRegistry={ false }\n\t\t\t\t>\n\t\t\t\t\t{ children }\n\t\t\t\t</MediaUploadProvider>\n\t\t\t);\n\t\t}\n\n\t\treturn children;\n\t}\n);\n\nexport const BlockEditorProvider = ( props ) => {\n\treturn (\n\t\t<ExperimentalBlockEditorProvider { ...props } stripExperimentalSettings>\n\t\t\t{ props.children }\n\t\t</ExperimentalBlockEditorProvider>\n\t);\n};\n\nexport default BlockEditorProvider;\n"],"mappings":"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","ignoreList":[]}