"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _blocks = require("@wordpress/blocks");
var _compose = require("@wordpress/compose");
var _inserterListItem = _interopRequireDefault(require("../inserter-list-item"));
var _inserterListbox = require("../inserter-listbox");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function chunk(array, size) {
  const chunks = [];
  for (let i = 0, j = array.length; i < j; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  return chunks;
}
function BlockTypesList({
  items = [],
  onSelect,
  onHover = () => {},
  children,
  label,
  isDraggable = true
}) {
  const className = 'block-editor-block-types-list';
  const listId = (0, _compose.useInstanceId)(BlockTypesList, className);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_inserterListbox.InserterListboxGroup, {
    className: className,
    "aria-label": label,
    children: [chunk(items, 3).map((row, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_inserterListbox.InserterListboxRow, {
      children: row.map((item, j) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_inserterListItem.default, {
        item: item,
        className: (0, _blocks.getBlockMenuDefaultClassName)(item.id),
        onSelect: onSelect,
        onHover: onHover,
        isDraggable: isDraggable && !item.isDisabled,
        isFirst: i === 0 && j === 0,
        rowId: `${listId}-${i}`
      }, item.id))
    }, i)), children]
  });
}
var _default = exports.default = BlockTypesList;
//# sourceMappingURL=index.js.map