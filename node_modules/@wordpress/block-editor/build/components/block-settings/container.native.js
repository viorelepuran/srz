"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockSettingsScreens = void 0;
exports.default = BottomSheetSettings;
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _containerNative = _interopRequireDefault(require("./container.native.scss"));
var _inspectorControls = _interopRequireDefault(require("../inspector-controls"));
var _imageLinkDestinations = _interopRequireDefault(require("../image-link-destinations"));
var _useMultipleOriginColorsAndGradients = _interopRequireDefault(require("../colors-gradients/use-multiple-origin-colors-and-gradients"));
var _useGlobalStylesContext = require("../global-styles/use-global-styles-context");
var _advancedControlsPanel = _interopRequireDefault(require("../inspector-controls-tabs/advanced-controls-panel"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const blockSettingsScreens = exports.blockSettingsScreens = {
  settings: 'Settings',
  color: 'Color',
  focalPoint: 'FocalPoint',
  linkPicker: 'linkPicker',
  imageLinkDestinations: 'imageLinkDestinations'
};
function BottomSheetSettings(props) {
  const colorSettings = (0, _useMultipleOriginColorsAndGradients.default)();
  colorSettings.allAvailableColors = (0, _useGlobalStylesContext.useMobileGlobalStylesColors)();
  const {
    closeGeneralSidebar
  } = (0, _data.useDispatch)('core/edit-post');
  const editorSidebarOpened = (0, _data.useSelect)(select => select('core/edit-post').isEditorSidebarOpened());
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet, {
    isVisible: editorSidebarOpened,
    onClose: closeGeneralSidebar,
    hideHeader: true,
    contentStyle: _containerNative.default.content,
    hasNavigation: true,
    testID: "block-settings-modal",
    ...props,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.BottomSheet.NavigationContainer, {
      animate: true,
      main: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.NavigationScreen, {
        name: blockSettingsScreens.settings,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_inspectorControls.default.Slot, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_advancedControlsPanel.default, {})]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.NavigationScreen, {
        name: _components.BottomSheet.SubSheet.screenName,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.SubSheet.Slot, {})
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.NavigationScreen, {
        name: blockSettingsScreens.color,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ColorSettings, {
          defaultSettings: colorSettings
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.NavigationScreen, {
        name: blockSettingsScreens.focalPoint,
        fullScreen: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.FocalPointSettingsPanel, {})
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.NavigationScreen, {
        name: blockSettingsScreens.linkPicker,
        fullScreen: true,
        isScrollable: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.LinkPickerScreen, {
          returnScreenName: blockSettingsScreens.settings
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BottomSheet.NavigationScreen, {
        name: blockSettingsScreens.imageLinkDestinations,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_imageLinkDestinations.default, {
          ...props
        })
      })]
    })
  });
}
//# sourceMappingURL=container.native.js.map