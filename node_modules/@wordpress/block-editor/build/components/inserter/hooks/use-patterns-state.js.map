{"version":3,"names":["_element","require","_blocks","_data","_i18n","_notices","_store","_lockUnlock","_utils","_utils2","usePatternsState","onInsert","rootClientId","selectedCategory","isQuick","options","useMemo","isFiltered","patternCategories","patterns","userPatternCategories","useSelect","select","getSettings","__experimentalGetAllowedPatterns","unlock","blockEditorStore","__experimentalUserPatternCategories","__experimentalBlockPatternCategories","getClosestAllowedInsertionPointForPattern","allCategories","categories","forEach","userCategory","find","existingCategory","name","push","createSuccessNotice","useDispatch","noticesStore","onClickPattern","useCallback","pattern","blocks","destinationRootClientId","patternBlocks","type","INSERTER_PATTERN_TYPES","user","syncStatus","createBlock","ref","id","map","block","clonedBlock","cloneBlock","attributes","metadata","includes","sprintf","__","title","_default","exports","default"],"sources":["@wordpress/block-editor/src/components/inserter/hooks/use-patterns-state.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback, useMemo } from '@wordpress/element';\nimport { cloneBlock, createBlock } from '@wordpress/blocks';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../../store';\nimport { unlock } from '../../../lock-unlock';\nimport { INSERTER_PATTERN_TYPES } from '../block-patterns-tab/utils';\nimport { isFiltered } from '../../../store/utils';\n\n/**\n * Retrieves the block patterns inserter state.\n *\n * @param {Function} onInsert         function called when inserter a list of blocks.\n * @param {string=}  rootClientId     Insertion's root client ID.\n * @param {string}   selectedCategory The selected pattern category.\n * @param {boolean}  isQuick          For the quick inserter render only allowed patterns.\n *\n * @return {Array} Returns the patterns state. (patterns, categories, onSelect handler)\n */\nconst usePatternsState = (\n\tonInsert,\n\trootClientId,\n\tselectedCategory,\n\tisQuick\n) => {\n\tconst options = useMemo(\n\t\t() => ( { [ isFiltered ]: !! isQuick } ),\n\t\t[ isQuick ]\n\t);\n\tconst { patternCategories, patterns, userPatternCategories } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getSettings, __experimentalGetAllowedPatterns } = unlock(\n\t\t\t\tselect( blockEditorStore )\n\t\t\t);\n\t\t\tconst {\n\t\t\t\t__experimentalUserPatternCategories,\n\t\t\t\t__experimentalBlockPatternCategories,\n\t\t\t} = getSettings();\n\t\t\treturn {\n\t\t\t\tpatterns: __experimentalGetAllowedPatterns(\n\t\t\t\t\trootClientId,\n\t\t\t\t\toptions\n\t\t\t\t),\n\t\t\t\tuserPatternCategories: __experimentalUserPatternCategories,\n\t\t\t\tpatternCategories: __experimentalBlockPatternCategories,\n\t\t\t};\n\t\t},\n\t\t[ rootClientId, options ]\n\t);\n\tconst { getClosestAllowedInsertionPointForPattern } = unlock(\n\t\tuseSelect( blockEditorStore )\n\t);\n\n\tconst allCategories = useMemo( () => {\n\t\tconst categories = [ ...patternCategories ];\n\t\tuserPatternCategories?.forEach( ( userCategory ) => {\n\t\t\tif (\n\t\t\t\t! categories.find(\n\t\t\t\t\t( existingCategory ) =>\n\t\t\t\t\t\texistingCategory.name === userCategory.name\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcategories.push( userCategory );\n\t\t\t}\n\t\t} );\n\t\treturn categories;\n\t}, [ patternCategories, userPatternCategories ] );\n\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\tconst onClickPattern = useCallback(\n\t\t( pattern, blocks ) => {\n\t\t\tconst destinationRootClientId = isQuick\n\t\t\t\t? rootClientId\n\t\t\t\t: getClosestAllowedInsertionPointForPattern(\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\trootClientId\n\t\t\t\t  );\n\t\t\tif ( destinationRootClientId === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst patternBlocks =\n\t\t\t\tpattern.type === INSERTER_PATTERN_TYPES.user &&\n\t\t\t\tpattern.syncStatus !== 'unsynced'\n\t\t\t\t\t? [ createBlock( 'core/block', { ref: pattern.id } ) ]\n\t\t\t\t\t: blocks;\n\t\t\tonInsert(\n\t\t\t\t( patternBlocks ?? [] ).map( ( block ) => {\n\t\t\t\t\tconst clonedBlock = cloneBlock( block );\n\t\t\t\t\tif (\n\t\t\t\t\t\tclonedBlock.attributes.metadata?.categories?.includes(\n\t\t\t\t\t\t\tselectedCategory\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tclonedBlock.attributes.metadata.categories = [\n\t\t\t\t\t\t\tselectedCategory,\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t\treturn clonedBlock;\n\t\t\t\t} ),\n\t\t\t\tpattern.name,\n\t\t\t\tfalse,\n\t\t\t\tdestinationRootClientId\n\t\t\t);\n\t\t\tcreateSuccessNotice(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %s: block pattern title. */\n\t\t\t\t\t__( 'Block pattern \"%s\" inserted.' ),\n\t\t\t\t\tpattern.title\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\tid: 'inserter-notice',\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t\t[\n\t\t\tcreateSuccessNotice,\n\t\t\tonInsert,\n\t\t\tselectedCategory,\n\t\t\trootClientId,\n\t\t\tgetClosestAllowedInsertionPointForPattern,\n\t\t\tisQuick,\n\t\t]\n\t);\n\n\treturn [ patterns, allCategories, onClickPattern ];\n};\n\nexport default usePatternsState;\n"],"mappings":";;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AAKA,IAAAK,MAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,MAAA,GAAAP,OAAA;AACA,IAAAQ,OAAA,GAAAR,OAAA;AAfA;AACA;AACA;;AAOA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,gBAAgB,GAAGA,CACxBC,QAAQ,EACRC,YAAY,EACZC,gBAAgB,EAChBC,OAAO,KACH;EACJ,MAAMC,OAAO,GAAG,IAAAC,gBAAO,EACtB,OAAQ;IAAE,CAAEC,kBAAU,GAAI,CAAC,CAAEH;EAAQ,CAAC,CAAE,EACxC,CAAEA,OAAO,CACV,CAAC;EACD,MAAM;IAAEI,iBAAiB;IAAEC,QAAQ;IAAEC;EAAsB,CAAC,GAAG,IAAAC,eAAS,EACrEC,MAAM,IAAM;IACb,MAAM;MAAEC,WAAW;MAAEC;IAAiC,CAAC,GAAG,IAAAC,kBAAM,EAC/DH,MAAM,CAAEI,YAAiB,CAC1B,CAAC;IACD,MAAM;MACLC,mCAAmC;MACnCC;IACD,CAAC,GAAGL,WAAW,CAAC,CAAC;IACjB,OAAO;MACNJ,QAAQ,EAAEK,gCAAgC,CACzCZ,YAAY,EACZG,OACD,CAAC;MACDK,qBAAqB,EAAEO,mCAAmC;MAC1DT,iBAAiB,EAAEU;IACpB,CAAC;EACF,CAAC,EACD,CAAEhB,YAAY,EAAEG,OAAO,CACxB,CAAC;EACD,MAAM;IAAEc;EAA0C,CAAC,GAAG,IAAAJ,kBAAM,EAC3D,IAAAJ,eAAS,EAAEK,YAAiB,CAC7B,CAAC;EAED,MAAMI,aAAa,GAAG,IAAAd,gBAAO,EAAE,MAAM;IACpC,MAAMe,UAAU,GAAG,CAAE,GAAGb,iBAAiB,CAAE;IAC3CE,qBAAqB,EAAEY,OAAO,CAAIC,YAAY,IAAM;MACnD,IACC,CAAEF,UAAU,CAACG,IAAI,CACdC,gBAAgB,IACjBA,gBAAgB,CAACC,IAAI,KAAKH,YAAY,CAACG,IACzC,CAAC,EACA;QACDL,UAAU,CAACM,IAAI,CAAEJ,YAAa,CAAC;MAChC;IACD,CAAE,CAAC;IACH,OAAOF,UAAU;EAClB,CAAC,EAAE,CAAEb,iBAAiB,EAAEE,qBAAqB,CAAG,CAAC;EAEjD,MAAM;IAAEkB;EAAoB,CAAC,GAAG,IAAAC,iBAAW,EAAEC,cAAa,CAAC;EAC3D,MAAMC,cAAc,GAAG,IAAAC,oBAAW,EACjC,CAAEC,OAAO,EAAEC,MAAM,KAAM;IACtB,MAAMC,uBAAuB,GAAG/B,OAAO,GACpCF,YAAY,GACZiB,yCAAyC,CACzCc,OAAO,EACP/B,YACA,CAAC;IACJ,IAAKiC,uBAAuB,KAAK,IAAI,EAAG;MACvC;IACD;IACA,MAAMC,aAAa,GAClBH,OAAO,CAACI,IAAI,KAAKC,6BAAsB,CAACC,IAAI,IAC5CN,OAAO,CAACO,UAAU,KAAK,UAAU,GAC9B,CAAE,IAAAC,mBAAW,EAAE,YAAY,EAAE;MAAEC,GAAG,EAAET,OAAO,CAACU;IAAG,CAAE,CAAC,CAAE,GACpDT,MAAM;IACVjC,QAAQ,CACP,CAAEmC,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,EAAE,EAAGQ,GAAG,CAAIC,KAAK,IAAM;MACzC,MAAMC,WAAW,GAAG,IAAAC,kBAAU,EAAEF,KAAM,CAAC;MACvC,IACCC,WAAW,CAACE,UAAU,CAACC,QAAQ,EAAE5B,UAAU,EAAE6B,QAAQ,CACpD/C,gBACD,CAAC,EACA;QACD2C,WAAW,CAACE,UAAU,CAACC,QAAQ,CAAC5B,UAAU,GAAG,CAC5ClB,gBAAgB,CAChB;MACF;MACA,OAAO2C,WAAW;IACnB,CAAE,CAAC,EACHb,OAAO,CAACP,IAAI,EACZ,KAAK,EACLS,uBACD,CAAC;IACDP,mBAAmB,CAClB,IAAAuB,aAAO,EACN;IACA,IAAAC,QAAE,EAAE,8BAA+B,CAAC,EACpCnB,OAAO,CAACoB,KACT,CAAC,EACD;MACChB,IAAI,EAAE,UAAU;MAChBM,EAAE,EAAE;IACL,CACD,CAAC;EACF,CAAC,EACD,CACCf,mBAAmB,EACnB3B,QAAQ,EACRE,gBAAgB,EAChBD,YAAY,EACZiB,yCAAyC,EACzCf,OAAO,CAET,CAAC;EAED,OAAO,CAAEK,QAAQ,EAAEW,aAAa,EAAEW,cAAc,CAAE;AACnD,CAAC;AAAC,IAAAuB,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEaxD,gBAAgB","ignoreList":[]}