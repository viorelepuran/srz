"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _notices = require("@wordpress/notices");
var _i18n = require("@wordpress/i18n");
var _store = require("../../../store");
var _utils = require("../../../store/utils");
var _lockUnlock = require("../../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Retrieves the block types inserter state.
 *
 * @param {string=}  rootClientId Insertion's root client ID.
 * @param {Function} onInsert     function called when inserter a list of blocks.
 * @param {boolean}  isQuick
 * @return {Array} Returns the block types state. (block types, categories, collections, onSelect handler)
 */
const useBlockTypesState = (rootClientId, onInsert, isQuick) => {
  const options = (0, _element.useMemo)(() => ({
    [_utils.isFiltered]: !!isQuick
  }), [isQuick]);
  const [items] = (0, _data.useSelect)(select => [select(_store.store).getInserterItems(rootClientId, options)], [rootClientId, options]);
  const {
    getClosestAllowedInsertionPoint
  } = (0, _lockUnlock.unlock)((0, _data.useSelect)(_store.store));
  const {
    createErrorNotice
  } = (0, _data.useDispatch)(_notices.store);
  const [categories, collections] = (0, _data.useSelect)(select => {
    const {
      getCategories,
      getCollections
    } = select(_blocks.store);
    return [getCategories(), getCollections()];
  }, []);
  const onSelectItem = (0, _element.useCallback)(({
    name,
    initialAttributes,
    innerBlocks,
    syncStatus,
    content
  }, shouldFocusBlock) => {
    const destinationClientId = getClosestAllowedInsertionPoint(name, rootClientId);
    if (destinationClientId === null) {
      var _getBlockType$title;
      const title = (_getBlockType$title = (0, _blocks.getBlockType)(name)?.title) !== null && _getBlockType$title !== void 0 ? _getBlockType$title : name;
      createErrorNotice((0, _i18n.sprintf)(/* translators: %s: block pattern title. */
      (0, _i18n.__)('Block "%s" can\'t be inserted.'), title), {
        type: 'snackbar',
        id: 'inserter-notice'
      });
      return;
    }
    const insertedBlock = syncStatus === 'unsynced' ? (0, _blocks.parse)(content, {
      __unstableSkipMigrationLogs: true
    }) : (0, _blocks.createBlock)(name, initialAttributes, (0, _blocks.createBlocksFromInnerBlocksTemplate)(innerBlocks));
    onInsert(insertedBlock, undefined, shouldFocusBlock, destinationClientId);
  }, [getClosestAllowedInsertionPoint, rootClientId, onInsert, createErrorNotice]);
  return [items, categories, collections, onSelectItem];
};
var _default = exports.default = useBlockTypesState;
//# sourceMappingURL=use-block-types-state.js.map