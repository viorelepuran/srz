{"version":3,"names":["createSelector","createRegistrySelector","getBlockOrder","getBlockParents","getBlockEditingMode","getSettings","canInsertBlockType","getBlockName","getTemplateLock","getClientIdsWithDescendants","isNavigationMode","getBlockRootClientId","checkAllowListRecursive","getAllPatternsDependants","getInsertBlockTypeDependants","getGrammar","INSERTER_PATTERN_TYPES","STORE_NAME","unlock","selectBlockPatternsKey","reusableBlocksSelectKey","sectionRootClientIdKey","getBlockSettings","isBlockInterfaceHidden","state","getLastInsertedBlocksClientIds","lastBlockInserted","clientIds","getBlockWithoutAttributes","clientId","blocks","byClientId","get","isBlockSubtreeDisabled","isChildSubtreeDisabled","childClientId","every","getEnabledClientIdsTreeUnmemoized","rootClientId","blockOrder","result","innerBlocks","push","getEnabledClientIdsTree","select","order","derivedBlockEditingModes","derivedNavModeBlockEditingModes","blockEditingModes","settings","templateLock","blockListSettings","__unstableGetEditorMode","getEnabledBlockParents","ascending","filter","parent","parents","getRemovalPromptData","removalPromptData","getBlockRemovalRules","blockRemovalRules","getOpenedBlockSettingsMenu","openedBlockSettingsMenu","getStyleOverrides","clientIdMap","reduce","acc","index","styleOverrides","sort","overrideA","overrideB","_clientIdMap$clientId","_clientIdMap$clientId2","clientIdA","clientIdB","aIndex","bIndex","getRegisteredInserterMediaCategories","registeredInserterMediaCategories","getInserterMediaCategories","inserterMediaCategories","allowedMimeTypes","enableOpenverseMediaCategory","length","coreInserterMediaCategoriesNames","map","name","mergedCategories","includes","category","Object","values","some","mimeType","startsWith","mediaType","hasAllowedPatterns","getAllPatterns","patterns","allowedBlockTypes","pattern","inserter","grammar","blockName","mapUserPattern","userPattern","__experimentalUserPatternCategories","id","type","user","title","raw","categories","wp_pattern_category","catId","find","slug","content","syncStatus","wp_pattern_sync_status","getPatternBySlug","patternName","_state$settings$__exp","_state$settings$selec","_id","parseInt","slice","block","getReusableBlocks","__experimentalBlockPatterns","__experimentalReusableBlocks","_state$settings$__exp2","_state$settings$selec2","x","arr","findIndex","y","EMPTY_ARRAY","_ref","reusableBlocksSelect","getLastFocus","lastFocus","isDragging","getExpandedBlock","expandedBlock","getContentLockingParent","current","getParentSectionBlock","isSectionBlock","_isNavigationMode","sectionRootClientId","getSectionRootClientId","sectionClientIds","getTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","getTemporarilyEditingFocusModeToRevert","temporarilyEditingFocusModeRevert","getBlockStyles","styles","attributes","style","isZoomOut","zoomLevel","getZoomLevel","getClosestAllowedInsertionPoint","blockNames","Array","isArray","areBlockNamesAllowedInClientId","currentName","parentClientId","getClosestAllowedInsertionPointForPattern","isAllowed","names","getInsertionPoint","insertionPoint"],"sources":["@wordpress/block-editor/src/store/private-selectors.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockOrder,\n\tgetBlockParents,\n\tgetBlockEditingMode,\n\tgetSettings,\n\tcanInsertBlockType,\n\tgetBlockName,\n\tgetTemplateLock,\n\tgetClientIdsWithDescendants,\n\tisNavigationMode,\n\tgetBlockRootClientId,\n} from './selectors';\nimport {\n\tcheckAllowListRecursive,\n\tgetAllPatternsDependants,\n\tgetInsertBlockTypeDependants,\n\tgetGrammar,\n} from './utils';\nimport { INSERTER_PATTERN_TYPES } from '../components/inserter/block-patterns-tab/utils';\nimport { STORE_NAME } from './constants';\nimport { unlock } from '../lock-unlock';\nimport {\n\tselectBlockPatternsKey,\n\treusableBlocksSelectKey,\n\tsectionRootClientIdKey,\n} from './private-keys';\n\nexport { getBlockSettings } from './get-block-settings';\n\n/**\n * Returns true if the block interface is hidden, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the block toolbar is hidden.\n */\nexport function isBlockInterfaceHidden( state ) {\n\treturn state.isBlockInterfaceHidden;\n}\n\n/**\n * Gets the client ids of the last inserted blocks.\n *\n * @param {Object} state Global application state.\n * @return {Array|undefined} Client Ids of the last inserted block(s).\n */\nexport function getLastInsertedBlocksClientIds( state ) {\n\treturn state?.lastBlockInserted?.clientIds;\n}\n\nexport function getBlockWithoutAttributes( state, clientId ) {\n\treturn state.blocks.byClientId.get( clientId );\n}\n\n/**\n * Returns true if all of the descendants of a block with the given client ID\n * have an editing mode of 'disabled', or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID.\n *\n * @return {boolean} Whether the block descendants are disabled.\n */\nexport const isBlockSubtreeDisabled = ( state, clientId ) => {\n\tconst isChildSubtreeDisabled = ( childClientId ) => {\n\t\treturn (\n\t\t\tgetBlockEditingMode( state, childClientId ) === 'disabled' &&\n\t\t\tgetBlockOrder( state, childClientId ).every(\n\t\t\t\tisChildSubtreeDisabled\n\t\t\t)\n\t\t);\n\t};\n\treturn getBlockOrder( state, clientId ).every( isChildSubtreeDisabled );\n};\n\nfunction getEnabledClientIdsTreeUnmemoized( state, rootClientId ) {\n\tconst blockOrder = getBlockOrder( state, rootClientId );\n\tconst result = [];\n\n\tfor ( const clientId of blockOrder ) {\n\t\tconst innerBlocks = getEnabledClientIdsTreeUnmemoized(\n\t\t\tstate,\n\t\t\tclientId\n\t\t);\n\t\tif ( getBlockEditingMode( state, clientId ) !== 'disabled' ) {\n\t\t\tresult.push( { clientId, innerBlocks } );\n\t\t} else {\n\t\t\tresult.push( ...innerBlocks );\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Returns a tree of block objects with only clientID and innerBlocks set.\n * Blocks with a 'disabled' editing mode are not included.\n *\n * @param {Object}  state        Global application state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Tree of block objects with only clientID and innerBlocks set.\n */\nexport const getEnabledClientIdsTree = createRegistrySelector( ( select ) =>\n\tcreateSelector( getEnabledClientIdsTreeUnmemoized, ( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.derivedBlockEditingModes,\n\t\tstate.derivedNavModeBlockEditingModes,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t\tselect( STORE_NAME ).__unstableGetEditorMode( state ),\n\t] )\n);\n\n/**\n * Returns a list of a given block's ancestors, from top to bottom. Blocks with\n * a 'disabled' editing mode are excluded.\n *\n * @see getBlockParents\n *\n * @param {Object}  state     Global application state.\n * @param {string}  clientId  The block client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top\n *                            to bottom (false).\n */\nexport const getEnabledBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\treturn getBlockParents( state, clientId, ascending ).filter(\n\t\t\t( parent ) => getBlockEditingMode( state, parent ) !== 'disabled'\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blocks.parents,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Selector that returns the data needed to display a prompt when certain\n * blocks are removed, or `false` if no such prompt is requested.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object|false} Data for removal prompt display, if any.\n */\nexport function getRemovalPromptData( state ) {\n\treturn state.removalPromptData;\n}\n\n/**\n * Returns true if removal prompt exists, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether removal prompt exists.\n */\nexport function getBlockRemovalRules( state ) {\n\treturn state.blockRemovalRules;\n}\n\n/**\n * Returns the client ID of the block settings menu that is currently open.\n *\n * @param {Object} state Global application state.\n * @return {string|null} The client ID of the block menu that is currently open.\n */\nexport function getOpenedBlockSettingsMenu( state ) {\n\treturn state.openedBlockSettingsMenu;\n}\n\n/**\n * Returns all style overrides, intended to be merged with global editor styles.\n *\n * Overrides are sorted to match the order of the blocks they relate to. This\n * is useful to maintain correct CSS cascade order.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} An array of style ID to style override pairs.\n */\nexport const getStyleOverrides = createSelector(\n\t( state ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst clientIdMap = clientIds.reduce( ( acc, clientId, index ) => {\n\t\t\tacc[ clientId ] = index;\n\t\t\treturn acc;\n\t\t}, {} );\n\n\t\treturn [ ...state.styleOverrides ].sort( ( overrideA, overrideB ) => {\n\t\t\t// Once the overrides Map is spread to an array, the first element\n\t\t\t// is the key, while the second is the override itself including\n\t\t\t// the clientId to sort by.\n\t\t\tconst [ , { clientId: clientIdA } ] = overrideA;\n\t\t\tconst [ , { clientId: clientIdB } ] = overrideB;\n\n\t\t\tconst aIndex = clientIdMap[ clientIdA ] ?? -1;\n\t\t\tconst bIndex = clientIdMap[ clientIdB ] ?? -1;\n\n\t\t\treturn aIndex - bIndex;\n\t\t} );\n\t},\n\t( state ) => [ state.blocks.order, state.styleOverrides ]\n);\n\n/** @typedef {import('./actions').InserterMediaCategory} InserterMediaCategory */\n/**\n * Returns the registered inserter media categories through the public API.\n *\n * @param {Object} state Editor state.\n *\n * @return {InserterMediaCategory[]} Inserter media categories.\n */\nexport function getRegisteredInserterMediaCategories( state ) {\n\treturn state.registeredInserterMediaCategories;\n}\n\n/**\n * Returns an array containing the allowed inserter media categories.\n * It merges the registered media categories from extenders with the\n * core ones. It also takes into account the allowed `mime_types`, which\n * can be altered by `upload_mimes` filter and restrict some of them.\n *\n * @param {Object} state Global application state.\n *\n * @return {InserterMediaCategory[]} Client IDs of descendants.\n */\nexport const getInserterMediaCategories = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tsettings: {\n\t\t\t\tinserterMediaCategories,\n\t\t\t\tallowedMimeTypes,\n\t\t\t\tenableOpenverseMediaCategory,\n\t\t\t},\n\t\t\tregisteredInserterMediaCategories,\n\t\t} = state;\n\t\t// The allowed `mime_types` can be altered by `upload_mimes` filter and restrict\n\t\t// some of them. In this case we shouldn't add the category to the available media\n\t\t// categories list in the inserter.\n\t\tif (\n\t\t\t( ! inserterMediaCategories &&\n\t\t\t\t! registeredInserterMediaCategories.length ) ||\n\t\t\t! allowedMimeTypes\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst coreInserterMediaCategoriesNames =\n\t\t\tinserterMediaCategories?.map( ( { name } ) => name ) || [];\n\t\tconst mergedCategories = [\n\t\t\t...( inserterMediaCategories || [] ),\n\t\t\t...( registeredInserterMediaCategories || [] ).filter(\n\t\t\t\t( { name } ) =>\n\t\t\t\t\t! coreInserterMediaCategoriesNames.includes( name )\n\t\t\t),\n\t\t];\n\t\treturn mergedCategories.filter( ( category ) => {\n\t\t\t// Check if Openverse category is enabled.\n\t\t\tif (\n\t\t\t\t! enableOpenverseMediaCategory &&\n\t\t\t\tcategory.name === 'openverse'\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Object.values( allowedMimeTypes ).some( ( mimeType ) =>\n\t\t\t\tmimeType.startsWith( `${ category.mediaType }/` )\n\t\t\t);\n\t\t} );\n\t},\n\t( state ) => [\n\t\tstate.settings.inserterMediaCategories,\n\t\tstate.settings.allowedMimeTypes,\n\t\tstate.settings.enableOpenverseMediaCategory,\n\t\tstate.registeredInserterMediaCategories,\n\t]\n);\n\n/**\n * Returns whether there is at least one allowed pattern for inner blocks children.\n * This is useful for deferring the parsing of all patterns until needed.\n *\n * @param {Object} state               Editor state.\n * @param {string} [rootClientId=null] Target root client ID.\n *\n * @return {boolean} If there is at least one allowed pattern.\n */\nexport const hasAllowedPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null ) => {\n\t\t\tconst { getAllPatterns } = unlock( select( STORE_NAME ) );\n\t\t\tconst patterns = getAllPatterns();\n\t\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\t\treturn patterns.some( ( pattern ) => {\n\t\t\t\tconst { inserter = true } = pattern;\n\t\t\t\tif ( ! inserter ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst grammar = getGrammar( pattern );\n\t\t\t\treturn (\n\t\t\t\t\tcheckAllowListRecursive( grammar, allowedBlockTypes ) &&\n\t\t\t\t\tgrammar.every( ( { name: blockName } ) =>\n\t\t\t\t\t\tcanInsertBlockType( state, blockName, rootClientId )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} );\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\t...getAllPatternsDependants( select )( state ),\n\t\t\t...getInsertBlockTypeDependants( select )( state, rootClientId ),\n\t\t]\n\t)\n);\n\nfunction mapUserPattern(\n\tuserPattern,\n\t__experimentalUserPatternCategories = []\n) {\n\treturn {\n\t\tname: `core/block/${ userPattern.id }`,\n\t\tid: userPattern.id,\n\t\ttype: INSERTER_PATTERN_TYPES.user,\n\t\ttitle: userPattern.title.raw,\n\t\tcategories: userPattern.wp_pattern_category?.map( ( catId ) => {\n\t\t\tconst category = __experimentalUserPatternCategories.find(\n\t\t\t\t( { id } ) => id === catId\n\t\t\t);\n\t\t\treturn category ? category.slug : catId;\n\t\t} ),\n\t\tcontent: userPattern.content.raw,\n\t\tsyncStatus: userPattern.wp_pattern_sync_status,\n\t};\n}\n\nexport const getPatternBySlug = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, patternName ) => {\n\t\t\t// Only fetch reusable blocks if we know we need them. To do: maybe\n\t\t\t// use the entity record API to retrieve the block by slug.\n\t\t\tif ( patternName?.startsWith( 'core/block/' ) ) {\n\t\t\t\tconst _id = parseInt(\n\t\t\t\t\tpatternName.slice( 'core/block/'.length ),\n\t\t\t\t\t10\n\t\t\t\t);\n\t\t\t\tconst block = unlock( select( STORE_NAME ) )\n\t\t\t\t\t.getReusableBlocks()\n\t\t\t\t\t.find( ( { id } ) => id === _id );\n\n\t\t\t\tif ( ! block ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn mapUserPattern(\n\t\t\t\t\tblock,\n\t\t\t\t\tstate.settings.__experimentalUserPatternCategories\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn [\n\t\t\t\t// This setting is left for back compat.\n\t\t\t\t...( state.settings.__experimentalBlockPatterns ?? [] ),\n\t\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ??\n\t\t\t\t\t[] ),\n\t\t\t].find( ( { name } ) => name === patternName );\n\t\t},\n\t\t( state, patternName ) =>\n\t\t\tpatternName?.startsWith( 'core/block/' )\n\t\t\t\t? [\n\t\t\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\n\t\t\t\t\t\tstate.settings.__experimentalReusableBlocks,\n\t\t\t\t  ]\n\t\t\t\t: [\n\t\t\t\t\t\tstate.settings.__experimentalBlockPatterns,\n\t\t\t\t\t\tstate.settings[ selectBlockPatternsKey ]?.( select ),\n\t\t\t\t  ]\n\t)\n);\n\nexport const getAllPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector( ( state ) => {\n\t\treturn [\n\t\t\t...unlock( select( STORE_NAME ) )\n\t\t\t\t.getReusableBlocks()\n\t\t\t\t.map( ( userPattern ) =>\n\t\t\t\t\tmapUserPattern(\n\t\t\t\t\t\tuserPattern,\n\t\t\t\t\t\tstate.settings.__experimentalUserPatternCategories\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t// This setting is left for back compat.\n\t\t\t...( state.settings.__experimentalBlockPatterns ?? [] ),\n\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ?? [] ),\n\t\t].filter(\n\t\t\t( x, index, arr ) =>\n\t\t\t\tindex === arr.findIndex( ( y ) => x.name === y.name )\n\t\t);\n\t}, getAllPatternsDependants( select ) )\n);\n\nconst EMPTY_ARRAY = [];\n\nexport const getReusableBlocks = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst reusableBlocksSelect = state.settings[ reusableBlocksSelectKey ];\n\t\treturn (\n\t\t\t( reusableBlocksSelect\n\t\t\t\t? reusableBlocksSelect( select )\n\t\t\t\t: state.settings.__experimentalReusableBlocks ) ?? EMPTY_ARRAY\n\t\t);\n\t}\n);\n\n/**\n * Returns the element of the last element that had focus when focus left the editor canvas.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object} Element.\n */\nexport function getLastFocus( state ) {\n\treturn state.lastFocus;\n}\n\n/**\n * Returns true if the user is dragging anything, or false otherwise. It is possible for a\n * user to be dragging data from outside of the editor, so this selector is separate from\n * the `isDraggingBlocks` selector which only returns true if the user is dragging blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging.\n */\nexport function isDragging( state ) {\n\treturn state.isDragging;\n}\n\n/**\n * Retrieves the expanded block from the state.\n *\n * @param {Object} state Block editor state.\n *\n * @return {string|null} The client ID of the expanded block, if set.\n */\nexport function getExpandedBlock( state ) {\n\treturn state.expandedBlock;\n}\n\n/**\n * Retrieves the client ID of the ancestor block that is content locking the block\n * with the provided client ID.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block.\n *\n * @return {?string} Client ID of the ancestor block that is content locking the block.\n */\nexport const getContentLockingParent = ( state, clientId ) => {\n\tlet current = clientId;\n\tlet result;\n\twhile ( ! result && ( current = state.blocks.parents.get( current ) ) ) {\n\t\tif ( getTemplateLock( state, current ) === 'contentOnly' ) {\n\t\t\tresult = current;\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * Retrieves the client ID of the parent section block.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block.\n *\n * @return {?string} Client ID of the ancestor block that is content locking the block.\n */\nexport const getParentSectionBlock = ( state, clientId ) => {\n\tlet current = clientId;\n\tlet result;\n\twhile ( ! result && ( current = state.blocks.parents.get( current ) ) ) {\n\t\tif ( isSectionBlock( state, current ) ) {\n\t\t\tresult = current;\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * Retrieves the client ID is a content locking parent\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block.\n *\n * @return {boolean} Whether the block is a content locking parent.\n */\nexport function isSectionBlock( state, clientId ) {\n\tconst blockName = getBlockName( state, clientId );\n\tif (\n\t\tblockName === 'core/block' ||\n\t\tgetTemplateLock( state, clientId ) === 'contentOnly'\n\t) {\n\t\treturn true;\n\t}\n\n\t// Template parts become sections in navigation mode.\n\tconst _isNavigationMode = isNavigationMode( state );\n\tif ( _isNavigationMode && blockName === 'core/template-part' ) {\n\t\treturn true;\n\t}\n\n\tconst sectionRootClientId = getSectionRootClientId( state );\n\tconst sectionClientIds = getBlockOrder( state, sectionRootClientId );\n\treturn _isNavigationMode && sectionClientIds.includes( clientId );\n}\n\n/**\n * Retrieves the client ID of the block that is content locked but is\n * currently being temporarily edited as a non-locked block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} The client ID of the block being temporarily edited as a non-locked block.\n */\nexport function getTemporarilyEditingAsBlocks( state ) {\n\treturn state.temporarilyEditingAsBlocks;\n}\n\n/**\n * Returns the focus mode that should be reapplied when the user stops editing\n * a content locked blocks as a block without locking.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} The focus mode that should be re-set when temporarily editing as blocks stops.\n */\nexport function getTemporarilyEditingFocusModeToRevert( state ) {\n\treturn state.temporarilyEditingFocusModeRevert;\n}\n\n/**\n * Returns the style attributes of multiple blocks.\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} clientIds An array of block client IDs.\n *\n * @return {Object} An object where keys are client IDs and values are the corresponding block styles or undefined.\n */\nexport const getBlockStyles = createSelector(\n\t( state, clientIds ) =>\n\t\tclientIds.reduce( ( styles, clientId ) => {\n\t\t\tstyles[ clientId ] = state.blocks.attributes.get( clientId )?.style;\n\t\t\treturn styles;\n\t\t}, {} ),\n\t( state, clientIds ) => [\n\t\t...clientIds.map(\n\t\t\t( clientId ) => state.blocks.attributes.get( clientId )?.style\n\t\t),\n\t]\n);\n\n/**\n * Retrieves the client ID of the block which contains the blocks\n * acting as \"sections\" in the editor. This is typically the \"main content\"\n * of the template/post.\n *\n * @param {Object} state Editor state.\n *\n * @return {string|undefined} The section root client ID or undefined if not set.\n */\nexport function getSectionRootClientId( state ) {\n\treturn state.settings?.[ sectionRootClientIdKey ];\n}\n\n/**\n * Returns whether the editor is considered zoomed out.\n *\n * @param {Object} state Global application state.\n * @return {boolean} Whether the editor is zoomed.\n */\nexport function isZoomOut( state ) {\n\treturn state.zoomLevel === 'auto-scaled' || state.zoomLevel < 100;\n}\n\n/**\n * Returns whether the zoom level.\n *\n * @param {Object} state Global application state.\n * @return {number|\"auto-scaled\"} Zoom level.\n */\nexport function getZoomLevel( state ) {\n\treturn state.zoomLevel;\n}\n\n/**\n * Finds the closest block where the block is allowed to be inserted.\n *\n * @param {Object}            state    Editor state.\n * @param {string[] | string} name     Block name or names.\n * @param {string}            clientId Default insertion point.\n *\n * @return {string} clientID of the closest container when the block name can be inserted.\n */\nexport function getClosestAllowedInsertionPoint( state, name, clientId = '' ) {\n\tconst blockNames = Array.isArray( name ) ? name : [ name ];\n\tconst areBlockNamesAllowedInClientId = ( id ) =>\n\t\tblockNames.every( ( currentName ) =>\n\t\t\tcanInsertBlockType( state, currentName, id )\n\t\t);\n\n\t// If we're trying to insert at the root level and it's not allowed\n\t// Try the section root instead.\n\tif ( ! clientId ) {\n\t\tif ( areBlockNamesAllowedInClientId( clientId ) ) {\n\t\t\treturn clientId;\n\t\t}\n\n\t\tconst sectionRootClientId = getSectionRootClientId( state );\n\t\tif (\n\t\t\tsectionRootClientId &&\n\t\t\tareBlockNamesAllowedInClientId( sectionRootClientId )\n\t\t) {\n\t\t\treturn sectionRootClientId;\n\t\t}\n\t\treturn null;\n\t}\n\n\t// Traverse the block tree up until we find a place where we can insert.\n\tlet current = clientId;\n\twhile ( current !== null && ! areBlockNamesAllowedInClientId( current ) ) {\n\t\tconst parentClientId = getBlockRootClientId( state, current );\n\t\tcurrent = parentClientId;\n\t}\n\n\treturn current;\n}\n\nexport function getClosestAllowedInsertionPointForPattern(\n\tstate,\n\tpattern,\n\tclientId\n) {\n\tconst { allowedBlockTypes } = getSettings( state );\n\tconst isAllowed = checkAllowListRecursive(\n\t\tgetGrammar( pattern ),\n\t\tallowedBlockTypes\n\t);\n\tif ( ! isAllowed ) {\n\t\treturn null;\n\t}\n\tconst names = getGrammar( pattern ).map( ( { blockName: name } ) => name );\n\treturn getClosestAllowedInsertionPoint( state, names, clientId );\n}\n\n/**\n * Where the point where the next block will be inserted into.\n *\n * @param {Object} state\n * @return {Object} where the insertion point in the block editor is or null if none is set.\n */\nexport function getInsertionPoint( state ) {\n\treturn state.insertionPoint;\n}\n"],"mappings":"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","ignoreList":[]}