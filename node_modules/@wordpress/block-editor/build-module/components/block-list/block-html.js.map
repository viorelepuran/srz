{"version":3,"names":["TextareaAutosize","useEffect","useState","useSelect","useDispatch","getBlockAttributes","getBlockContent","getBlockType","getSaveContent","validateBlock","store","blockEditorStore","jsx","_jsx","BlockHTML","clientId","html","setHtml","block","select","getBlock","updateBlock","onChange","blockType","name","attributes","content","isValid","originalContent","className","value","onBlur","event","target"],"sources":["@wordpress/block-editor/src/components/block-list/block-html.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport TextareaAutosize from 'react-autosize-textarea';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useState } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n\tgetBlockAttributes,\n\tgetBlockContent,\n\tgetBlockType,\n\tgetSaveContent,\n\tvalidateBlock,\n} from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\nfunction BlockHTML( { clientId } ) {\n\tconst [ html, setHtml ] = useState( '' );\n\tconst block = useSelect(\n\t\t( select ) => select( blockEditorStore ).getBlock( clientId ),\n\t\t[ clientId ]\n\t);\n\tconst { updateBlock } = useDispatch( blockEditorStore );\n\tconst onChange = () => {\n\t\tconst blockType = getBlockType( block.name );\n\n\t\tif ( ! blockType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attributes = getBlockAttributes(\n\t\t\tblockType,\n\t\t\thtml,\n\t\t\tblock.attributes\n\t\t);\n\n\t\t// If html is empty  we reset the block to the default HTML and mark it as valid to avoid triggering an error\n\t\tconst content = html ? html : getSaveContent( blockType, attributes );\n\t\tconst [ isValid ] = html\n\t\t\t? validateBlock( {\n\t\t\t\t\t...block,\n\t\t\t\t\tattributes,\n\t\t\t\t\toriginalContent: content,\n\t\t\t  } )\n\t\t\t: [ true ];\n\n\t\tupdateBlock( clientId, {\n\t\t\tattributes,\n\t\t\toriginalContent: content,\n\t\t\tisValid,\n\t\t} );\n\n\t\t// Ensure the state is updated if we reset so it displays the default content.\n\t\tif ( ! html ) {\n\t\t\tsetHtml( content );\n\t\t}\n\t};\n\n\tuseEffect( () => {\n\t\tsetHtml( getBlockContent( block ) );\n\t}, [ block ] );\n\n\treturn (\n\t\t<TextareaAutosize\n\t\t\tclassName=\"block-editor-block-list__block-html-textarea\"\n\t\t\tvalue={ html }\n\t\t\tonBlur={ onChange }\n\t\t\tonChange={ ( event ) => setHtml( event.target.value ) }\n\t\t/>\n\t);\n}\n\nexport default BlockHTML;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,gBAAgB,MAAM,yBAAyB;;AAEtD;AACA;AACA;AACA,SAASC,SAAS,EAAEC,QAAQ,QAAQ,oBAAoB;AACxD,SAASC,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AACxD,SACCC,kBAAkB,EAClBC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdC,aAAa,QACP,mBAAmB;;AAE1B;AACA;AACA;AACA,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAExD,SAASC,SAASA,CAAE;EAAEC;AAAS,CAAC,EAAG;EAClC,MAAM,CAAEC,IAAI,EAAEC,OAAO,CAAE,GAAGf,QAAQ,CAAE,EAAG,CAAC;EACxC,MAAMgB,KAAK,GAAGf,SAAS,CACpBgB,MAAM,IAAMA,MAAM,CAAER,gBAAiB,CAAC,CAACS,QAAQ,CAAEL,QAAS,CAAC,EAC7D,CAAEA,QAAQ,CACX,CAAC;EACD,MAAM;IAAEM;EAAY,CAAC,GAAGjB,WAAW,CAAEO,gBAAiB,CAAC;EACvD,MAAMW,QAAQ,GAAGA,CAAA,KAAM;IACtB,MAAMC,SAAS,GAAGhB,YAAY,CAAEW,KAAK,CAACM,IAAK,CAAC;IAE5C,IAAK,CAAED,SAAS,EAAG;MAClB;IACD;IAEA,MAAME,UAAU,GAAGpB,kBAAkB,CACpCkB,SAAS,EACTP,IAAI,EACJE,KAAK,CAACO,UACP,CAAC;;IAED;IACA,MAAMC,OAAO,GAAGV,IAAI,GAAGA,IAAI,GAAGR,cAAc,CAAEe,SAAS,EAAEE,UAAW,CAAC;IACrE,MAAM,CAAEE,OAAO,CAAE,GAAGX,IAAI,GACrBP,aAAa,CAAE;MACf,GAAGS,KAAK;MACRO,UAAU;MACVG,eAAe,EAAEF;IACjB,CAAE,CAAC,GACH,CAAE,IAAI,CAAE;IAEXL,WAAW,CAAEN,QAAQ,EAAE;MACtBU,UAAU;MACVG,eAAe,EAAEF,OAAO;MACxBC;IACD,CAAE,CAAC;;IAEH;IACA,IAAK,CAAEX,IAAI,EAAG;MACbC,OAAO,CAAES,OAAQ,CAAC;IACnB;EACD,CAAC;EAEDzB,SAAS,CAAE,MAAM;IAChBgB,OAAO,CAAEX,eAAe,CAAEY,KAAM,CAAE,CAAC;EACpC,CAAC,EAAE,CAAEA,KAAK,CAAG,CAAC;EAEd,oBACCL,IAAA,CAACb,gBAAgB;IAChB6B,SAAS,EAAC,8CAA8C;IACxDC,KAAK,EAAGd,IAAM;IACde,MAAM,EAAGT,QAAU;IACnBA,QAAQ,EAAKU,KAAK,IAAMf,OAAO,CAAEe,KAAK,CAACC,MAAM,CAACH,KAAM;EAAG,CACvD,CAAC;AAEJ;AAEA,eAAehB,SAAS","ignoreList":[]}