{"version":3,"names":["_data","require","_i18n","_warning","_interopRequireDefault","_store","_lockUnlock","i18nBlockSchema","title","description","keywords","styles","label","variations","isObject","object","unstable__bootstrapServerSideBlockDefinitions","definitions","addBootstrappedBlockType","unlock","dispatch","blocksStore","name","blockType","Object","entries","getBlockSettingsFromMetadata","textdomain","metadata","allowedFields","settings","fromEntries","filter","key","includes","keys","forEach","translateBlockSettingUsingI18nSchema","registerBlockType","blockNameOrMetadata","globalThis","SCRIPT_DEBUG","warning","test","select","getBlockType","addUnprocessedBlockType","i18nSchema","settingValue","_x","Array","isArray","length","map","value","reduce","accumulator","registerBlockCollection","namespace","icon","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","blockName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","isTemplatePart","getChildBlockNames","exports","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","blockNames","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","getBlockVariations","scope","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations","registerBlockBindingsSource","source","usesContext","getValues","setValues","canUserEditValue","getFieldsList","existingSource","getBlockBindingsSource","serverProps","prop","addBlockBindingsSource","unregisterBlockBindingsSource","oldSource","removeBlockBindingsSource","getBlockBindingsSources","getAllBlockBindingsSources"],"sources":["@wordpress/blocks/src/api/registration.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { select, dispatch } from '@wordpress/data';\nimport { _x } from '@wordpress/i18n';\nimport warning from '@wordpress/warning';\n\n/**\n * Internal dependencies\n */\nimport i18nBlockSchema from './i18n-block.json';\nimport { store as blocksStore } from '../store';\nimport { unlock } from '../lock-unlock';\n\n/**\n * An icon type definition. One of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|Element|Component)} WPIcon\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {WPIcon} WPBlockTypeIconRender\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Named block variation scopes.\n *\n * @typedef {'block'|'inserter'|'transform'} WPBlockVariationScope\n */\n\n/**\n * An object describing a variation defined for the block type.\n *\n * @typedef {Object} WPBlockVariation\n *\n * @property {string}                  name          The unique and machine-readable name.\n * @property {string}                  title         A human-readable variation title.\n * @property {string}                  [description] A detailed variation description.\n * @property {string}                  [category]    Block type category classification,\n *                                                   used in search interfaces to arrange\n *                                                   block types by category.\n * @property {WPIcon}                  [icon]        An icon helping to visualize the variation.\n * @property {boolean}                 [isDefault]   Indicates whether the current variation is\n *                                                   the default one. Defaults to `false`.\n * @property {Object}                  [attributes]  Values which override block attributes.\n * @property {Array[]}                 [innerBlocks] Initial configuration of nested blocks.\n * @property {Object}                  [example]     Example provides structured data for\n *                                                   the block preview. You can set to\n *                                                   `undefined` to disable the preview shown\n *                                                   for the block type.\n * @property {WPBlockVariationScope[]} [scope]       The list of scopes where the variation\n *                                                   is applicable. When not provided, it\n *                                                   assumes all available scopes.\n * @property {string[]}                [keywords]    An array of terms (which can be translated)\n *                                                   that help users discover the variation\n *                                                   while searching.\n * @property {Function|string[]}       [isActive]    This can be a function or an array of block attributes.\n *                                                   Function that accepts a block's attributes and the\n *                                                   variation's attributes and determines if a variation is active.\n *                                                   This function doesn't try to find a match dynamically based\n *                                                   on all block's attributes, as in many cases some attributes are irrelevant.\n *                                                   An example would be for `embed` block where we only care\n *                                                   about `providerNameSlug` attribute's value.\n *                                                   We can also use a `string[]` to tell which attributes\n *                                                   should be compared as a shorthand. Each attributes will\n *                                                   be matched and the variation will be active if all of them are matching.\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlockType\n *\n * @property {string}             name          Block type's namespaced name.\n * @property {string}             title         Human-readable block type label.\n * @property {string}             [description] A detailed block type description.\n * @property {string}             [category]    Block type category classification,\n *                                              used in search interfaces to arrange\n *                                              block types by category.\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\n * @property {string[]}           [keywords]    Additional keywords to produce block\n *                                              type as result in search interfaces.\n * @property {Object}             [attributes]  Block type attributes.\n * @property {Component}          [save]        Optional component describing\n *                                              serialized markup structure of a\n *                                              block type.\n * @property {Component}          edit          Component rendering an element to\n *                                              manipulate the attributes of a block\n *                                              in the context of an editor.\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\n * @property {Object}             [example]     Example provides structured data for\n *                                              the block preview. When not defined\n *                                              then no preview is shown.\n */\n\nfunction isObject( object ) {\n\treturn object !== null && typeof object === 'object';\n}\n\n/**\n * Sets the server side block definition of blocks.\n *\n * Ignored from documentation due to being marked as unstable.\n *\n * @ignore\n *\n * @param {Object} definitions Server-side block definitions\n */\n// eslint-disable-next-line camelcase\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\n\tconst { addBootstrappedBlockType } = unlock( dispatch( blocksStore ) );\n\tfor ( const [ name, blockType ] of Object.entries( definitions ) ) {\n\t\taddBootstrappedBlockType( name, blockType );\n\t}\n}\n\n/**\n * Gets block settings from metadata loaded from `block.json` file\n *\n * @param {Object} metadata            Block metadata loaded from `block.json`.\n * @param {string} metadata.textdomain Textdomain to use with translations.\n *\n * @return {Object} Block settings.\n */\nfunction getBlockSettingsFromMetadata( { textdomain, ...metadata } ) {\n\tconst allowedFields = [\n\t\t'apiVersion',\n\t\t'title',\n\t\t'category',\n\t\t'parent',\n\t\t'ancestor',\n\t\t'icon',\n\t\t'description',\n\t\t'keywords',\n\t\t'attributes',\n\t\t'providesContext',\n\t\t'usesContext',\n\t\t'selectors',\n\t\t'supports',\n\t\t'styles',\n\t\t'example',\n\t\t'variations',\n\t\t'blockHooks',\n\t\t'allowedBlocks',\n\t];\n\n\tconst settings = Object.fromEntries(\n\t\tObject.entries( metadata ).filter( ( [ key ] ) =>\n\t\t\tallowedFields.includes( key )\n\t\t)\n\t);\n\n\tif ( textdomain ) {\n\t\tObject.keys( i18nBlockSchema ).forEach( ( key ) => {\n\t\t\tif ( ! settings[ key ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings[ key ] = translateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nBlockSchema[ key ],\n\t\t\t\tsettings[ key ],\n\t\t\t\ttextdomain\n\t\t\t);\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * For more in-depth information on registering a custom block see the\n * [Create a block tutorial](https://developer.wordpress.org/block-editor/getting-started/create-block/).\n *\n * @param {string|Object} blockNameOrMetadata Block type name or its metadata.\n * @param {Object}        settings            Block settings.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockType } from '@wordpress/blocks'\n *\n * registerBlockType( 'namespace/block-name', {\n *     title: __( 'My First Block' ),\n *     edit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\n *     save: () => <div>Hello from the saved content!</div>,\n * } );\n * ```\n *\n * @return {WPBlockType | undefined} The block, if it has been successfully registered;\n *                    otherwise `undefined`.\n */\nexport function registerBlockType( blockNameOrMetadata, settings ) {\n\tconst name = isObject( blockNameOrMetadata )\n\t\t? blockNameOrMetadata.name\n\t\t: blockNameOrMetadata;\n\n\tif ( typeof name !== 'string' ) {\n\t\twarning( 'Block names must be strings.' );\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\twarning(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( blocksStore ).getBlockType( name ) ) {\n\t\twarning( 'Block \"' + name + '\" is already registered.' );\n\t\treturn;\n\t}\n\n\tconst { addBootstrappedBlockType, addUnprocessedBlockType } = unlock(\n\t\tdispatch( blocksStore )\n\t);\n\n\tif ( isObject( blockNameOrMetadata ) ) {\n\t\tconst metadata = getBlockSettingsFromMetadata( blockNameOrMetadata );\n\t\taddBootstrappedBlockType( name, metadata );\n\t}\n\n\taddUnprocessedBlockType( name, settings );\n\n\treturn select( blocksStore ).getBlockType( name );\n}\n\n/**\n * Translates block settings provided with metadata using the i18n schema.\n *\n * @param {string|string[]|Object[]} i18nSchema   I18n schema for the block setting.\n * @param {string|string[]|Object[]} settingValue Value for the block setting.\n * @param {string}                   textdomain   Textdomain to use with translations.\n *\n * @return {string|string[]|Object[]} Translated setting.\n */\nfunction translateBlockSettingUsingI18nSchema(\n\ti18nSchema,\n\tsettingValue,\n\ttextdomain\n) {\n\tif ( typeof i18nSchema === 'string' && typeof settingValue === 'string' ) {\n\t\t// eslint-disable-next-line @wordpress/i18n-no-variables, @wordpress/i18n-text-domain\n\t\treturn _x( settingValue, i18nSchema, textdomain );\n\t}\n\tif (\n\t\tArray.isArray( i18nSchema ) &&\n\t\ti18nSchema.length &&\n\t\tArray.isArray( settingValue )\n\t) {\n\t\treturn settingValue.map( ( value ) =>\n\t\t\ttranslateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nSchema[ 0 ],\n\t\t\t\tvalue,\n\t\t\t\ttextdomain\n\t\t\t)\n\t\t);\n\t}\n\tif (\n\t\tisObject( i18nSchema ) &&\n\t\tObject.entries( i18nSchema ).length &&\n\t\tisObject( settingValue )\n\t) {\n\t\treturn Object.keys( settingValue ).reduce( ( accumulator, key ) => {\n\t\t\tif ( ! i18nSchema[ key ] ) {\n\t\t\t\taccumulator[ key ] = settingValue[ key ];\n\t\t\t\treturn accumulator;\n\t\t\t}\n\t\t\taccumulator[ key ] = translateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nSchema[ key ],\n\t\t\t\tsettingValue[ key ],\n\t\t\t\ttextdomain\n\t\t\t);\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}\n\treturn settingValue;\n}\n\n/**\n * Registers a new block collection to group blocks in the same namespace in the inserter.\n *\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\n * @param {Object} settings        The block collection settings.\n * @param {string} settings.title  The title to display in the block inserter.\n * @param {Object} [settings.icon] The icon to display in the block inserter.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockCollection, registerBlockType } from '@wordpress/blocks';\n *\n * // Register the collection.\n * registerBlockCollection( 'my-collection', {\n *     title: __( 'Custom Collection' ),\n * } );\n *\n * // Register a block in the same namespace to add it to the collection.\n * registerBlockType( 'my-collection/block-name', {\n *     title: __( 'My First Block' ),\n *     edit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\n *     save: () => <div>'Hello from the saved content!</div>,\n * } );\n * ```\n */\nexport function registerBlockCollection( namespace, { title, icon } ) {\n\tdispatch( blocksStore ).addBlockCollection( namespace, title, icon );\n}\n\n/**\n * Unregisters a block collection\n *\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\n *\n * @example\n * ```js\n * import { unregisterBlockCollection } from '@wordpress/blocks';\n *\n * unregisterBlockCollection( 'my-collection' );\n * ```\n */\nexport function unregisterBlockCollection( namespace ) {\n\tdispatch( blocksStore ).removeBlockCollection( namespace );\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { unregisterBlockType } from '@wordpress/blocks';\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () =>\n *                 unregisterBlockType( 'my-collection/block-name' )\n *             }\n *         >\n *             { __( 'Unregister my custom block.' ) }\n *         </Button>\n *     );\n * };\n * ```\n *\n * @return {WPBlockType | undefined} The previous block value, if it has been successfully\n *                    unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( blocksStore ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\twarning( 'Block \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tdispatch( blocksStore ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( blocksStore ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( blocksStore ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( blocksStore ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( blocksStore ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( blocksStore ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n *\n * @example\n * ```js\n * import { setDefaultBlockName } from '@wordpress/blocks';\n *\n * const ExampleComponent = () => {\n *\n *     return (\n *         <Button onClick={ () => setDefaultBlockName( 'core/heading' ) }>\n *             { __( 'Set the default block to Heading' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( blocksStore ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * This function lets you select a different block to group other blocks in instead of the\n * default `core/group` block. This function must be used in a component or when the DOM is fully\n * loaded. See https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/\n *\n * @param {string} name Block name.\n *\n * @example\n * ```js\n * import { setGroupingBlockName } from '@wordpress/blocks';\n *\n * const ExampleComponent = () => {\n *\n *     return (\n *         <Button onClick={ () => setGroupingBlockName( 'core/columns' ) }>\n *             { __( 'Wrap in columns' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( blocksStore ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( blocksStore ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( blocksStore )?.getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( blocksStore ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param {(string|Object)} nameOrType      Block name or type object\n * @param {string}          feature         Feature to retrieve\n * @param {*}               defaultSupports Default value to return if not\n *                                          explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).getBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).hasBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType?.name === 'core/block';\n}\n\n/**\n * Determines whether or not the given block is a template part. This is a\n * special block type that allows composing a page template out of reusable\n * design elements.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a template part.\n */\nexport function isTemplatePart( blockOrType ) {\n\treturn blockOrType?.name === 'core/template-part';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( blocksStore ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocksWithInserterSupport( blockName );\n};\n\n/**\n * Registers a new block style for the given block types.\n *\n * For more information on connecting the styles with CSS\n * [the official documentation](https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/#styles).\n *\n * @param {string|Array} blockNames     Name of blocks e.g. “core/latest-posts” or `[\"core/group\", \"core/columns\"]`.\n * @param {Object}       styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockStyle } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () => {\n *                 registerBlockStyle( 'core/quote', {\n *                     name: 'fancy-quote',\n *                     label: __( 'Fancy Quote' ),\n *                 } );\n *             } }\n *         >\n *             { __( 'Add a new block style for core/quote' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport const registerBlockStyle = ( blockNames, styleVariation ) => {\n\tdispatch( blocksStore ).addBlockStyles( blockNames, styleVariation );\n};\n\n/**\n * Unregisters a block style for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { unregisterBlockStyle } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n * const ExampleComponent = () => {\n *     return (\n *     <Button\n *         onClick={ () => {\n *             unregisterBlockStyle( 'core/quote', 'plain' );\n *         } }\n *     >\n *         { __( 'Remove the \"Plain\" block style for core/quote' ) }\n *     </Button>\n *     );\n * };\n * ```\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( blocksStore ).removeBlockStyles( blockName, styleVariationName );\n};\n\n/**\n * Returns an array with the variations of a given block type.\n * Ignored from documentation as the recommended usage is via useSelect from @wordpress/data.\n *\n * @ignore\n *\n * @param {string}                blockName Name of block (example: “core/columns”).\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = ( blockName, scope ) => {\n\treturn select( blocksStore ).getBlockVariations( blockName, scope );\n};\n\n/**\n * Registers a new block variation for the given block type.\n *\n * For more information on block variations see\n * [the official documentation ](https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/).\n *\n * @param {string}           blockName Name of the block (example: “core/columns”).\n * @param {WPBlockVariation} variation Object describing a block variation.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockVariation } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () => {\n *                 registerBlockVariation( 'core/embed', {\n *                     name: 'custom',\n *                     title: __( 'My Custom Embed' ),\n *                     attributes: { providerNameSlug: 'custom' },\n *                 } );\n *             } }\n *          >\n *              __( 'Add a custom variation for core/embed' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport const registerBlockVariation = ( blockName, variation ) => {\n\tif ( typeof variation.name !== 'string' ) {\n\t\twarning( 'Variation names must be unique strings.' );\n\t}\n\n\tdispatch( blocksStore ).addBlockVariations( blockName, variation );\n};\n\n/**\n * Unregisters a block variation defined for the given block type.\n *\n * @param {string} blockName     Name of the block (example: “core/columns”).\n * @param {string} variationName Name of the variation defined for the block.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { unregisterBlockVariation } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () => {\n *                 unregisterBlockVariation( 'core/embed', 'youtube' );\n *             } }\n *         >\n *             { __( 'Remove the YouTube variation from core/embed' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\n\tdispatch( blocksStore ).removeBlockVariations( blockName, variationName );\n};\n\n/**\n * Registers a new block bindings source with an object defining its\n * behavior. Once registered, the source is available to be connected\n * to the supported block attributes.\n *\n * @since 6.7.0 Introduced in WordPress core.\n *\n * @param {Object}   source                    Properties of the source to be registered.\n * @param {string}   source.name               The unique and machine-readable name.\n * @param {string}   [source.label]            Human-readable label. Optional when it is defined in the server.\n * @param {Array}    [source.usesContext]      Optional array of context needed by the source only in the editor.\n * @param {Function} [source.getValues]        Optional function to get the values from the source.\n * @param {Function} [source.setValues]        Optional function to update multiple values connected to the source.\n * @param {Function} [source.canUserEditValue] Optional function to determine if the user can edit the value.\n *\n * @example\n * ```js\n * import { _x } from '@wordpress/i18n';\n * import { registerBlockBindingsSource } from '@wordpress/blocks'\n *\n * registerBlockBindingsSource( {\n *     name: 'plugin/my-custom-source',\n *     label: _x( 'My Custom Source', 'block bindings source' ),\n *     usesContext: [ 'postType' ],\n *     getValues: getSourceValues,\n *     setValues: updateMyCustomValuesInBatch,\n *     canUserEditValue: () => true,\n * } );\n * ```\n */\nexport const registerBlockBindingsSource = ( source ) => {\n\tconst {\n\t\tname,\n\t\tlabel,\n\t\tusesContext,\n\t\tgetValues,\n\t\tsetValues,\n\t\tcanUserEditValue,\n\t\tgetFieldsList,\n\t} = source;\n\n\tconst existingSource = unlock(\n\t\tselect( blocksStore )\n\t).getBlockBindingsSource( name );\n\n\t/*\n\t * Check if the source has been already registered on the client.\n\t * If any property expected to be \"client-only\" is defined, return a warning.\n\t */\n\tconst serverProps = [ 'label', 'usesContext' ];\n\tfor ( const prop in existingSource ) {\n\t\tif ( ! serverProps.includes( prop ) && existingSource[ prop ] ) {\n\t\t\twarning(\n\t\t\t\t'Block bindings source \"' + name + '\" is already registered.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Check the `name` property is correct.\n\tif ( ! name ) {\n\t\twarning( 'Block bindings source must contain a name.' );\n\t\treturn;\n\t}\n\n\tif ( typeof name !== 'string' ) {\n\t\twarning( 'Block bindings source name must be a string.' );\n\t\treturn;\n\t}\n\n\tif ( /[A-Z]+/.test( name ) ) {\n\t\twarning(\n\t\t\t'Block bindings source name must not contain uppercase characters.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z0-9/-]+$/.test( name ) ) {\n\t\twarning(\n\t\t\t'Block bindings source name must contain only valid characters: lowercase characters, hyphens, or digits. Example: my-plugin/my-custom-source.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z0-9-]+\\/[a-z0-9-]+$/.test( name ) ) {\n\t\twarning(\n\t\t\t'Block bindings source name must contain a namespace and valid characters. Example: my-plugin/my-custom-source.'\n\t\t);\n\t\treturn;\n\t}\n\n\t// Check the `label` property is correct.\n\n\tif ( ! label && ! existingSource?.label ) {\n\t\twarning( 'Block bindings source must contain a label.' );\n\t\treturn;\n\t}\n\n\tif ( label && typeof label !== 'string' ) {\n\t\twarning( 'Block bindings source label must be a string.' );\n\t\treturn;\n\t}\n\n\tif ( label && existingSource?.label && label !== existingSource?.label ) {\n\t\twarning( 'Block bindings \"' + name + '\" source label was overridden.' );\n\t}\n\n\t// Check the `usesContext` property is correct.\n\tif ( usesContext && ! Array.isArray( usesContext ) ) {\n\t\twarning( 'Block bindings source usesContext must be an array.' );\n\t\treturn;\n\t}\n\n\t// Check the `getValues` property is correct.\n\tif ( getValues && typeof getValues !== 'function' ) {\n\t\twarning( 'Block bindings source getValues must be a function.' );\n\t\treturn;\n\t}\n\n\t// Check the `setValues` property is correct.\n\tif ( setValues && typeof setValues !== 'function' ) {\n\t\twarning( 'Block bindings source setValues must be a function.' );\n\t\treturn;\n\t}\n\n\t// Check the `canUserEditValue` property is correct.\n\tif ( canUserEditValue && typeof canUserEditValue !== 'function' ) {\n\t\twarning( 'Block bindings source canUserEditValue must be a function.' );\n\t\treturn;\n\t}\n\n\t// Check the `getFieldsList` property is correct.\n\tif ( getFieldsList && typeof getFieldsList !== 'function' ) {\n\t\t// eslint-disable-next-line no-console\n\t\twarning( 'Block bindings source getFieldsList must be a function.' );\n\t\treturn;\n\t}\n\n\treturn unlock( dispatch( blocksStore ) ).addBlockBindingsSource( source );\n};\n\n/**\n * Unregisters a block bindings source by providing its name.\n *\n * @since 6.7.0 Introduced in WordPress core.\n *\n * @param {string} name The name of the block bindings source to unregister.\n *\n * @example\n * ```js\n * import { unregisterBlockBindingsSource } from '@wordpress/blocks';\n *\n * unregisterBlockBindingsSource( 'plugin/my-custom-source' );\n * ```\n */\nexport function unregisterBlockBindingsSource( name ) {\n\tconst oldSource = getBlockBindingsSource( name );\n\tif ( ! oldSource ) {\n\t\twarning( 'Block bindings source \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tunlock( dispatch( blocksStore ) ).removeBlockBindingsSource( name );\n}\n\n/**\n * Returns a registered block bindings source by its name.\n *\n * @since 6.7.0 Introduced in WordPress core.\n *\n * @param {string} name Block bindings source name.\n *\n * @return {?Object} Block bindings source.\n */\nexport function getBlockBindingsSource( name ) {\n\treturn unlock( select( blocksStore ) ).getBlockBindingsSource( name );\n}\n\n/**\n * Returns all registered block bindings sources.\n *\n * @since 6.7.0 Introduced in WordPress core.\n *\n * @return {Array} Block bindings sources.\n */\nexport function getBlockBindingsSources() {\n\treturn unlock( select( blocksStore ) ).getAllBlockBindingsSources();\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAC,sBAAA,CAAAH,OAAA;AAMA,IAAAI,MAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AAZA;AACA;AACA;AAKA;AACA;AACA;AAFA,MAAAM,eAAA;EAAAC,KAAA;EAAAC,WAAA;EAAAC,QAAA;EAAAC,MAAA;IAAAC,KAAA;EAAA;EAAAC,UAAA;IAAAL,KAAA;IAAAC,WAAA;IAAAC,QAAA;EAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,QAAQA,CAAEC,MAAM,EAAG;EAC3B,OAAOA,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,QAAQ;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,6CAA6CA,CAAEC,WAAW,EAAG;EAC5E,MAAM;IAAEC;EAAyB,CAAC,GAAG,IAAAC,kBAAM,EAAE,IAAAC,cAAQ,EAAEC,YAAY,CAAE,CAAC;EACtE,KAAM,MAAM,CAAEC,IAAI,EAAEC,SAAS,CAAE,IAAIC,MAAM,CAACC,OAAO,CAAER,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","ignoreList":[]}