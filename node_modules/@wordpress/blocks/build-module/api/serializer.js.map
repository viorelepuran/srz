{"version":3,"names":["Component","cloneElement","renderToString","RawHTML","hasFilter","applyFilters","isShallowEqual","removep","deprecated","getBlockType","getFreeformContentHandlerName","getUnregisteredTypeHandlerName","serializeRawBlock","isUnmodifiedDefaultBlock","normalizeBlockType","jsx","_jsx","getBlockDefaultClassName","blockName","className","replace","getBlockMenuDefaultClassName","blockPropsProvider","innerBlocksPropsProvider","getBlockProps","props","blockType","attributes","skipFilters","getInnerBlocksProps","innerBlocks","Array","isArray","children","html","serialize","isInnerBlocks","getSaveElement","blockTypeOrName","save","prototype","instance","render","bind","element","apiVersion","getSaveContent","getCommentAttributes","_blockType$attributes","Object","entries","reduce","accumulator","key","attributeSchema","value","undefined","source","role","__experimentalRole","since","version","alternative","hint","name","JSON","stringify","default","serializeAttributes","getBlockInnerHTML","block","saveContent","originalContent","isValid","length","error","getCommentDelimitedContent","rawBlockName","content","serializedAttributes","startsWith","slice","serializeBlock","__unstableBlockSource","saveAttributes","__unstableSerializeAndClean","blocks","options","blocksArray","map","join"],"sources":["@wordpress/blocks/src/api/serializer.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tComponent,\n\tcloneElement,\n\trenderToString,\n\tRawHTML,\n} from '@wordpress/element';\nimport { hasFilter, applyFilters } from '@wordpress/hooks';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\nimport { removep } from '@wordpress/autop';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n} from './registration';\nimport { serializeRawBlock } from './parser/serialize-raw-block';\nimport { isUnmodifiedDefaultBlock, normalizeBlockType } from './utils';\n\n/** @typedef {import('./parser').WPBlock} WPBlock */\n\n/**\n * @typedef {Object} WPBlockSerializationOptions Serialization Options.\n *\n * @property {boolean} isInnerBlocks Whether we are serializing inner blocks.\n */\n\n/**\n * Returns the block's default classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default class.\n */\nexport function getBlockDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `wp-block-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (historically used in 'core-embed/').\n\tconst className =\n\t\t'wp-block-' + blockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockDefaultClassName',\n\t\tclassName,\n\t\tblockName\n\t);\n}\n\n/**\n * Returns the block's default menu item classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default menu item class.\n */\nexport function getBlockMenuDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `editor-block-list-item-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (historically used in 'core-embed/').\n\tconst className =\n\t\t'editor-block-list-item-' +\n\t\tblockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockMenuDefaultClassName',\n\t\tclassName,\n\t\tblockName\n\t);\n}\n\nconst blockPropsProvider = {};\nconst innerBlocksPropsProvider = {};\n\n/**\n * Call within a save function to get the props for the block wrapper.\n *\n * @param {Object} props Optional. Props to pass to the element.\n */\nexport function getBlockProps( props = {} ) {\n\tconst { blockType, attributes } = blockPropsProvider;\n\treturn getBlockProps.skipFilters\n\t\t? props\n\t\t: applyFilters(\n\t\t\t\t'blocks.getSaveContent.extraProps',\n\t\t\t\t{ ...props },\n\t\t\t\tblockType,\n\t\t\t\tattributes\n\t\t  );\n}\n\n/**\n * Call within a save function to get the props for the inner blocks wrapper.\n *\n * @param {Object} props Optional. Props to pass to the element.\n */\nexport function getInnerBlocksProps( props = {} ) {\n\tconst { innerBlocks } = innerBlocksPropsProvider;\n\t// Allow a different component to be passed to getSaveElement to handle\n\t// inner blocks, bypassing the default serialisation.\n\tif ( ! Array.isArray( innerBlocks ) ) {\n\t\treturn { ...props, children: innerBlocks };\n\t}\n\t// Value is an array of blocks, so defer to block serializer.\n\tconst html = serialize( innerBlocks, { isInnerBlocks: true } );\n\t// Use special-cased raw HTML tag to avoid default escaping.\n\tconst children = <RawHTML>{ html }</RawHTML>;\n\n\treturn { ...props, children };\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * enhanced element to be saved or string when raw HTML expected.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {Object}        attributes      Block attributes.\n * @param {?Array}        innerBlocks     Nested blocks.\n *\n * @return {Object|string} Save element or raw HTML string.\n */\nexport function getSaveElement(\n\tblockTypeOrName,\n\tattributes,\n\tinnerBlocks = []\n) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\n\tif ( ! blockType?.save ) {\n\t\treturn null;\n\t}\n\n\tlet { save } = blockType;\n\n\t// Component classes are unsupported for save since serialization must\n\t// occur synchronously. For improved interoperability with higher-order\n\t// components which often return component class, emulate basic support.\n\tif ( save.prototype instanceof Component ) {\n\t\tconst instance = new save( { attributes } );\n\t\tsave = instance.render.bind( instance );\n\t}\n\n\tblockPropsProvider.blockType = blockType;\n\tblockPropsProvider.attributes = attributes;\n\tinnerBlocksPropsProvider.innerBlocks = innerBlocks;\n\n\tlet element = save( { attributes, innerBlocks } );\n\n\tif (\n\t\telement !== null &&\n\t\ttypeof element === 'object' &&\n\t\thasFilter( 'blocks.getSaveContent.extraProps' ) &&\n\t\t! ( blockType.apiVersion > 1 )\n\t) {\n\t\t/**\n\t\t * Filters the props applied to the block save result element.\n\t\t *\n\t\t * @param {Object}  props      Props applied to save element.\n\t\t * @param {WPBlock} blockType  Block type definition.\n\t\t * @param {Object}  attributes Block attributes.\n\t\t */\n\t\tconst props = applyFilters(\n\t\t\t'blocks.getSaveContent.extraProps',\n\t\t\t{ ...element.props },\n\t\t\tblockType,\n\t\t\tattributes\n\t\t);\n\n\t\tif ( ! isShallowEqual( props, element.props ) ) {\n\t\t\telement = cloneElement( element, props );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the save result of a block during serialization.\n\t *\n\t * @param {Element} element    Block save result.\n\t * @param {WPBlock} blockType  Block type definition.\n\t * @param {Object}  attributes Block attributes.\n\t */\n\treturn applyFilters(\n\t\t'blocks.getSaveElement',\n\t\telement,\n\t\tblockType,\n\t\tattributes\n\t);\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * static markup to be saved.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {Object}        attributes      Block attributes.\n * @param {?Array}        innerBlocks     Nested blocks.\n *\n * @return {string} Save content.\n */\nexport function getSaveContent( blockTypeOrName, attributes, innerBlocks ) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\n\treturn renderToString(\n\t\tgetSaveElement( blockType, attributes, innerBlocks )\n\t);\n}\n\n/**\n * Returns attributes which are to be saved and serialized into the block\n * comment delimiter.\n *\n * When a block exists in memory it contains as its attributes both those\n * parsed the block comment delimiter _and_ those which matched from the\n * contents of the block.\n *\n * This function returns only those attributes which are needed to persist and\n * which cannot be matched from the block content.\n *\n * @param {Object<string,*>} blockType  Block type.\n * @param {Object<string,*>} attributes Attributes from in-memory block data.\n *\n * @return {Object<string,*>} Subset of attributes for comment serialization.\n */\nexport function getCommentAttributes( blockType, attributes ) {\n\treturn Object.entries( blockType.attributes ?? {} ).reduce(\n\t\t( accumulator, [ key, attributeSchema ] ) => {\n\t\t\tconst value = attributes[ key ];\n\t\t\t// Ignore undefined values.\n\t\t\tif ( undefined === value ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore all attributes but the ones with an \"undefined\" source\n\t\t\t// \"undefined\" source refers to attributes saved in the block comment.\n\t\t\tif ( attributeSchema.source !== undefined ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore all local attributes\n\t\t\tif ( attributeSchema.role === 'local' ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\tif ( attributeSchema.__experimentalRole === 'local' ) {\n\t\t\t\tdeprecated( '__experimentalRole attribute', {\n\t\t\t\t\tsince: '6.7',\n\t\t\t\t\tversion: '6.8',\n\t\t\t\t\talternative: 'role attribute',\n\t\t\t\t\thint: `Check the block.json of the ${ blockType?.name } block.`,\n\t\t\t\t} );\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore default value.\n\t\t\tif (\n\t\t\t\t'default' in attributeSchema &&\n\t\t\t\tJSON.stringify( attributeSchema.default ) ===\n\t\t\t\t\tJSON.stringify( value )\n\t\t\t) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Otherwise, include in comment set.\n\t\t\taccumulator[ key ] = value;\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Given an attributes object, returns a string in the serialized attributes\n * format prepared for post content.\n *\n * @param {Object} attributes Attributes object.\n *\n * @return {string} Serialized attributes.\n */\nexport function serializeAttributes( attributes ) {\n\treturn (\n\t\tJSON.stringify( attributes )\n\t\t\t// Don't break HTML comments.\n\t\t\t.replace( /--/g, '\\\\u002d\\\\u002d' )\n\n\t\t\t// Don't break non-standard-compliant tools.\n\t\t\t.replace( /</g, '\\\\u003c' )\n\t\t\t.replace( />/g, '\\\\u003e' )\n\t\t\t.replace( /&/g, '\\\\u0026' )\n\n\t\t\t// Bypass server stripslashes behavior which would unescape stringify's\n\t\t\t// escaping of quotation mark.\n\t\t\t//\n\t\t\t// See: https://developer.wordpress.org/reference/functions/wp_kses_stripslashes/\n\t\t\t.replace( /\\\\\"/g, '\\\\u0022' )\n\t);\n}\n\n/**\n * Given a block object, returns the Block's Inner HTML markup.\n *\n * @param {Object} block Block instance.\n *\n * @return {string} HTML.\n */\nexport function getBlockInnerHTML( block ) {\n\t// If block was parsed as invalid or encounters an error while generating\n\t// save content, use original content instead to avoid content loss. If a\n\t// block contains nested content, exempt it from this condition because we\n\t// otherwise have no access to its original content and content loss would\n\t// still occur.\n\tlet saveContent = block.originalContent;\n\tif ( block.isValid || block.innerBlocks.length ) {\n\t\ttry {\n\t\t\tsaveContent = getSaveContent(\n\t\t\t\tblock.name,\n\t\t\t\tblock.attributes,\n\t\t\t\tblock.innerBlocks\n\t\t\t);\n\t\t} catch ( error ) {}\n\t}\n\n\treturn saveContent;\n}\n\n/**\n * Returns the content of a block, including comment delimiters.\n *\n * @param {string} rawBlockName Block name.\n * @param {Object} attributes   Block attributes.\n * @param {string} content      Block save content.\n *\n * @return {string} Comment-delimited block content.\n */\nexport function getCommentDelimitedContent(\n\trawBlockName,\n\tattributes,\n\tcontent\n) {\n\tconst serializedAttributes =\n\t\tattributes && Object.entries( attributes ).length\n\t\t\t? serializeAttributes( attributes ) + ' '\n\t\t\t: '';\n\n\t// Strip core blocks of their namespace prefix.\n\tconst blockName = rawBlockName?.startsWith( 'core/' )\n\t\t? rawBlockName.slice( 5 )\n\t\t: rawBlockName;\n\n\t// @todo make the `wp:` prefix potentially configurable.\n\n\tif ( ! content ) {\n\t\treturn `<!-- wp:${ blockName } ${ serializedAttributes }/-->`;\n\t}\n\n\treturn (\n\t\t`<!-- wp:${ blockName } ${ serializedAttributes }-->\\n` +\n\t\tcontent +\n\t\t`\\n<!-- /wp:${ blockName } -->`\n\t);\n}\n\n/**\n * Returns the content of a block, including comment delimiters, determining\n * serialized attributes and content form from the current state of the block.\n *\n * @param {WPBlock}                     block   Block instance.\n * @param {WPBlockSerializationOptions} options Serialization options.\n *\n * @return {string} Serialized block.\n */\nexport function serializeBlock( block, { isInnerBlocks = false } = {} ) {\n\tif ( ! block.isValid && block.__unstableBlockSource ) {\n\t\treturn serializeRawBlock( block.__unstableBlockSource );\n\t}\n\n\tconst blockName = block.name;\n\tconst saveContent = getBlockInnerHTML( block );\n\n\tif (\n\t\tblockName === getUnregisteredTypeHandlerName() ||\n\t\t( ! isInnerBlocks && blockName === getFreeformContentHandlerName() )\n\t) {\n\t\treturn saveContent;\n\t}\n\n\tconst blockType = getBlockType( blockName );\n\tif ( ! blockType ) {\n\t\treturn saveContent;\n\t}\n\n\tconst saveAttributes = getCommentAttributes( blockType, block.attributes );\n\treturn getCommentDelimitedContent( blockName, saveAttributes, saveContent );\n}\n\nexport function __unstableSerializeAndClean( blocks ) {\n\t// A single unmodified default block is assumed to\n\t// be equivalent to an empty post.\n\tif ( blocks.length === 1 && isUnmodifiedDefaultBlock( blocks[ 0 ] ) ) {\n\t\tblocks = [];\n\t}\n\n\tlet content = serialize( blocks );\n\n\t// For compatibility, treat a post consisting of a\n\t// single freeform block as legacy content and apply\n\t// pre-block-editor removep'd content formatting.\n\tif (\n\t\tblocks.length === 1 &&\n\t\tblocks[ 0 ].name === getFreeformContentHandlerName() &&\n\t\tblocks[ 0 ].name === 'core/freeform'\n\t) {\n\t\tcontent = removep( content );\n\t}\n\n\treturn content;\n}\n\n/**\n * Takes a block or set of blocks and returns the serialized post content.\n *\n * @param {Array}                       blocks  Block(s) to serialize.\n * @param {WPBlockSerializationOptions} options Serialization options.\n *\n * @return {string} The post content.\n */\nexport default function serialize( blocks, options ) {\n\tconst blocksArray = Array.isArray( blocks ) ? blocks : [ blocks ];\n\treturn blocksArray\n\t\t.map( ( block ) => serializeBlock( block, options ) )\n\t\t.join( '\\n\\n' );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SACCA,SAAS,EACTC,YAAY,EACZC,cAAc,EACdC,OAAO,QACD,oBAAoB;AAC3B,SAASC,SAAS,EAAEC,YAAY,QAAQ,kBAAkB;AAC1D,OAAOC,cAAc,MAAM,6BAA6B;AACxD,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,UAAU,MAAM,uBAAuB;;AAE9C;AACA;AACA;AACA,SACCC,YAAY,EACZC,6BAA6B,EAC7BC,8BAA8B,QACxB,gBAAgB;AACvB,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,wBAAwB,EAAEC,kBAAkB,QAAQ,SAAS;;AAEtE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,GAAA,IAAAC,IAAA;AAOA,OAAO,SAASC,wBAAwBA,CAAEC,SAAS,EAAG;EACrD;EACA;EACA,MAAMC,SAAS,GACd,WAAW,GAAGD,SAAS,CAACE,OAAO,CAAE,IAAI,EAAE,GAAI,CAAC,CAACA,OAAO,CAAE,QAAQ,EAAE,EAAG,CAAC;EAErE,OAAOf,YAAY,CAClB,iCAAiC,EACjCc,SAAS,EACTD,SACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,4BAA4BA,CAAEH,SAAS,EAAG;EACzD;EACA;EACA,MAAMC,SAAS,GACd,yBAAyB,GACzBD,SAAS,CAACE,OAAO,CAAE,IAAI,EAAE,GAAI,CAAC,CAACA,OAAO,CAAE,QAAQ,EAAE,EAAG,CAAC;EAEvD,OAAOf,YAAY,CAClB,qCAAqC,EACrCc,SAAS,EACTD,SACD,CAAC;AACF;AAEA,MAAMI,kBAAkB,GAAG,CAAC,CAAC;AAC7B,MAAMC,wBAAwB,GAAG,CAAC,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAEC,KAAK,GAAG,CAAC,CAAC,EAAG;EAC3C,MAAM;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGL,kBAAkB;EACpD,OAAOE,aAAa,CAACI,WAAW,GAC7BH,KAAK,GACLpB,YAAY,CACZ,kCAAkC,EAClC;IAAE,GAAGoB;EAAM,CAAC,EACZC,SAAS,EACTC,UACA,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,mBAAmBA,CAAEJ,KAAK,GAAG,CAAC,CAAC,EAAG;EACjD,MAAM;IAAEK;EAAY,CAAC,GAAGP,wBAAwB;EAChD;EACA;EACA,IAAK,CAAEQ,KAAK,CAACC,OAAO,CAAEF,WAAY,CAAC,EAAG;IACrC,OAAO;MAAE,GAAGL,KAAK;MAAEQ,QAAQ,EAAEH;IAAY,CAAC;EAC3C;EACA;EACA,MAAMI,IAAI,GAAGC,SAAS,CAAEL,WAAW,EAAE;IAAEM,aAAa,EAAE;EAAK,CAAE,CAAC;EAC9D;EACA,MAAMH,QAAQ,gBAAGjB,IAAA,CAACb,OAAO;IAAA8B,QAAA,EAAGC;EAAI,CAAW,CAAC;EAE5C,OAAO;IAAE,GAAGT,KAAK;IAAEQ;EAAS,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,cAAcA,CAC7BC,eAAe,EACfX,UAAU,EACVG,WAAW,GAAG,EAAE,EACf;EACD,MAAMJ,SAAS,GAAGZ,kBAAkB,CAAEwB,eAAgB,CAAC;EAEvD,IAAK,CAAEZ,SAAS,EAAEa,IAAI,EAAG;IACxB,OAAO,IAAI;EACZ;EAEA,IAAI;IAAEA;EAAK,CAAC,GAAGb,SAAS;;EAExB;EACA;EACA;EACA,IAAKa,IAAI,CAACC,SAAS,YAAYxC,SAAS,EAAG;IAC1C,MAAMyC,QAAQ,GAAG,IAAIF,IAAI,CAAE;MAAEZ;IAAW,CAAE,CAAC;IAC3CY,IAAI,GAAGE,QAAQ,CAACC,MAAM,CAACC,IAAI,CAAEF,QAAS,CAAC;EACxC;EAEAnB,kBAAkB,CAACI,SAAS,GAAGA,SAAS;EACxCJ,kBAAkB,CAACK,UAAU,GAAGA,UAAU;EAC1CJ,wBAAwB,CAACO,WAAW,GAAGA,WAAW;EAElD,IAAIc,OAAO,GAAGL,IAAI,CAAE;IAAEZ,UAAU;IAAEG;EAAY,CAAE,CAAC;EAEjD,IACCc,OAAO,KAAK,IAAI,IAChB,OAAOA,OAAO,KAAK,QAAQ,IAC3BxC,SAAS,CAAE,kCAAmC,CAAC,IAC/C,EAAIsB,SAAS,CAACmB,UAAU,GAAG,CAAC,CAAE,EAC7B;IACD;AACF;AACA;AACA;AACA;AACA;AACA;IACE,MAAMpB,KAAK,GAAGpB,YAAY,CACzB,kCAAkC,EAClC;MAAE,GAAGuC,OAAO,CAACnB;IAAM,CAAC,EACpBC,SAAS,EACTC,UACD,CAAC;IAED,IAAK,CAAErB,cAAc,CAAEmB,KAAK,EAAEmB,OAAO,CAACnB,KAAM,CAAC,EAAG;MAC/CmB,OAAO,GAAG3C,YAAY,CAAE2C,OAAO,EAAEnB,KAAM,CAAC;IACzC;EACD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC,OAAOpB,YAAY,CAClB,uBAAuB,EACvBuC,OAAO,EACPlB,SAAS,EACTC,UACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmB,cAAcA,CAAER,eAAe,EAAEX,UAAU,EAAEG,WAAW,EAAG;EAC1E,MAAMJ,SAAS,GAAGZ,kBAAkB,CAAEwB,eAAgB,CAAC;EAEvD,OAAOpC,cAAc,CACpBmC,cAAc,CAAEX,SAAS,EAAEC,UAAU,EAAEG,WAAY,CACpD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,oBAAoBA,CAAErB,SAAS,EAAEC,UAAU,EAAG;EAAA,IAAAqB,qBAAA;EAC7D,OAAOC,MAAM,CAACC,OAAO,EAAAF,qBAAA,GAAEtB,SAAS,CAACC,UAAU,cAAAqB,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAE,CAAC,CAACG,MAAM,CACzD,CAAEC,WAAW,EAAE,CAAEC,GAAG,EAAEC,eAAe,CAAE,KAAM;IAC5C,MAAMC,KAAK,GAAG5B,UAAU,CAAE0B,GAAG,CAAE;IAC/B;IACA,IAAKG,SAAS,KAAKD,KAAK,EAAG;MAC1B,OAAOH,WAAW;IACnB;;IAEA;IACA;IACA,IAAKE,eAAe,CAACG,MAAM,KAAKD,SAAS,EAAG;MAC3C,OAAOJ,WAAW;IACnB;;IAEA;IACA,IAAKE,eAAe,CAACI,IAAI,KAAK,OAAO,EAAG;MACvC,OAAON,WAAW;IACnB;IAEA,IAAKE,eAAe,CAACK,kBAAkB,KAAK,OAAO,EAAG;MACrDnD,UAAU,CAAE,8BAA8B,EAAE;QAC3CoD,KAAK,EAAE,KAAK;QACZC,OAAO,EAAE,KAAK;QACdC,WAAW,EAAE,gBAAgB;QAC7BC,IAAI,EAAE,+BAAgCrC,SAAS,EAAEsC,IAAI;MACtD,CAAE,CAAC;MACH,OAAOZ,WAAW;IACnB;;IAEA;IACA,IACC,SAAS,IAAIE,eAAe,IAC5BW,IAAI,CAACC,SAAS,CAAEZ,eAAe,CAACa,OAAQ,CAAC,KACxCF,IAAI,CAACC,SAAS,CAAEX,KAAM,CAAC,EACvB;MACD,OAAOH,WAAW;IACnB;;IAEA;IACAA,WAAW,CAAEC,GAAG,CAAE,GAAGE,KAAK;IAC1B,OAAOH,WAAW;EACnB,CAAC,EACD,CAAC,CACF,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,mBAAmBA,CAAEzC,UAAU,EAAG;EACjD,OACCsC,IAAI,CAACC,SAAS,CAAEvC,UAAW;EAC1B;EAAA,CACCP,OAAO,CAAE,KAAK,EAAE,gBAAiB;;EAElC;EAAA,CACCA,OAAO,CAAE,IAAI,EAAE,SAAU,CAAC,CAC1BA,OAAO,CAAE,IAAI,EAAE,SAAU,CAAC,CAC1BA,OAAO,CAAE,IAAI,EAAE,SAAU;;EAE1B;EACA;EACA;EACA;EAAA,CACCA,OAAO,CAAE,MAAM,EAAE,SAAU,CAAC;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiD,iBAAiBA,CAAEC,KAAK,EAAG;EAC1C;EACA;EACA;EACA;EACA;EACA,IAAIC,WAAW,GAAGD,KAAK,CAACE,eAAe;EACvC,IAAKF,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACxC,WAAW,CAAC4C,MAAM,EAAG;IAChD,IAAI;MACHH,WAAW,GAAGzB,cAAc,CAC3BwB,KAAK,CAACN,IAAI,EACVM,KAAK,CAAC3C,UAAU,EAChB2C,KAAK,CAACxC,WACP,CAAC;IACF,CAAC,CAAC,OAAQ6C,KAAK,EAAG,CAAC;EACpB;EAEA,OAAOJ,WAAW;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,0BAA0BA,CACzCC,YAAY,EACZlD,UAAU,EACVmD,OAAO,EACN;EACD,MAAMC,oBAAoB,GACzBpD,UAAU,IAAIsB,MAAM,CAACC,OAAO,CAAEvB,UAAW,CAAC,CAAC+C,MAAM,GAC9CN,mBAAmB,CAAEzC,UAAW,CAAC,GAAG,GAAG,GACvC,EAAE;;EAEN;EACA,MAAMT,SAAS,GAAG2D,YAAY,EAAEG,UAAU,CAAE,OAAQ,CAAC,GAClDH,YAAY,CAACI,KAAK,CAAE,CAAE,CAAC,GACvBJ,YAAY;;EAEf;;EAEA,IAAK,CAAEC,OAAO,EAAG;IAChB,OAAO,WAAY5D,SAAS,IAAM6D,oBAAoB,MAAO;EAC9D;EAEA,OACC,WAAY7D,SAAS,IAAM6D,oBAAoB,OAAQ,GACvDD,OAAO,GACP,cAAe5D,SAAS,MAAO;AAEjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgE,cAAcA,CAAEZ,KAAK,EAAE;EAAElC,aAAa,GAAG;AAAM,CAAC,GAAG,CAAC,CAAC,EAAG;EACvE,IAAK,CAAEkC,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACa,qBAAqB,EAAG;IACrD,OAAOvE,iBAAiB,CAAE0D,KAAK,CAACa,qBAAsB,CAAC;EACxD;EAEA,MAAMjE,SAAS,GAAGoD,KAAK,CAACN,IAAI;EAC5B,MAAMO,WAAW,GAAGF,iBAAiB,CAAEC,KAAM,CAAC;EAE9C,IACCpD,SAAS,KAAKP,8BAA8B,CAAC,CAAC,IAC5C,CAAEyB,aAAa,IAAIlB,SAAS,KAAKR,6BAA6B,CAAC,CAAG,EACnE;IACD,OAAO6D,WAAW;EACnB;EAEA,MAAM7C,SAAS,GAAGjB,YAAY,CAAES,SAAU,CAAC;EAC3C,IAAK,CAAEQ,SAAS,EAAG;IAClB,OAAO6C,WAAW;EACnB;EAEA,MAAMa,cAAc,GAAGrC,oBAAoB,CAAErB,SAAS,EAAE4C,KAAK,CAAC3C,UAAW,CAAC;EAC1E,OAAOiD,0BAA0B,CAAE1D,SAAS,EAAEkE,cAAc,EAAEb,WAAY,CAAC;AAC5E;AAEA,OAAO,SAASc,2BAA2BA,CAAEC,MAAM,EAAG;EACrD;EACA;EACA,IAAKA,MAAM,CAACZ,MAAM,KAAK,CAAC,IAAI7D,wBAAwB,CAAEyE,MAAM,CAAE,CAAC,CAAG,CAAC,EAAG;IACrEA,MAAM,GAAG,EAAE;EACZ;EAEA,IAAIR,OAAO,GAAG3C,SAAS,CAAEmD,MAAO,CAAC;;EAEjC;EACA;EACA;EACA,IACCA,MAAM,CAACZ,MAAM,KAAK,CAAC,IACnBY,MAAM,CAAE,CAAC,CAAE,CAACtB,IAAI,KAAKtD,6BAA6B,CAAC,CAAC,IACpD4E,MAAM,CAAE,CAAC,CAAE,CAACtB,IAAI,KAAK,eAAe,EACnC;IACDc,OAAO,GAAGvE,OAAO,CAAEuE,OAAQ,CAAC;EAC7B;EAEA,OAAOA,OAAO;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS3C,SAASA,CAAEmD,MAAM,EAAEC,OAAO,EAAG;EACpD,MAAMC,WAAW,GAAGzD,KAAK,CAACC,OAAO,CAAEsD,MAAO,CAAC,GAAGA,MAAM,GAAG,CAAEA,MAAM,CAAE;EACjE,OAAOE,WAAW,CAChBC,GAAG,CAAInB,KAAK,IAAMY,cAAc,CAAEZ,KAAK,EAAEiB,OAAQ,CAAE,CAAC,CACpDG,IAAI,CAAE,MAAO,CAAC;AACjB","ignoreList":[]}