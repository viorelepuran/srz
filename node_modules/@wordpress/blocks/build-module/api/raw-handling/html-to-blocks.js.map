{"version":3,"names":["Platform","createBlock","findTransform","parse","getBlockAttributes","getRawTransforms","htmlToBlocks","html","handler","doc","document","implementation","createHTMLDocument","body","innerHTML","Array","from","children","flatMap","node","rawTransform","isMatch","isNative","outerHTML","transform","blockName","block","hasAttribute","attributes","className","getAttribute"],"sources":["@wordpress/blocks/src/api/raw-handling/html-to-blocks.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Platform } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, findTransform } from '../factory';\nimport parse from '../parser';\nimport { getBlockAttributes } from '../parser/get-block-attributes';\nimport { getRawTransforms } from './get-raw-transforms';\n\n/**\n * Converts HTML directly to blocks. Looks for a matching transform for each\n * top-level tag. The HTML should be filtered to not have any text between\n * top-level tags and formatted in a way that blocks can handle the HTML.\n *\n * @param {string}   html    HTML to convert.\n * @param {Function} handler The handler calling htmlToBlocks: either rawHandler\n *                           or pasteHandler.\n *\n * @return {Array} An array of blocks.\n */\nexport function htmlToBlocks( html, handler ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = html;\n\n\treturn Array.from( doc.body.children ).flatMap( ( node ) => {\n\t\tconst rawTransform = findTransform(\n\t\t\tgetRawTransforms(),\n\t\t\t( { isMatch } ) => isMatch( node )\n\t\t);\n\n\t\tif ( ! rawTransform ) {\n\t\t\t// Until the HTML block is supported in the native version, we'll parse it\n\t\t\t// instead of creating the block to generate it as an unsupported block.\n\t\t\tif ( Platform.isNative ) {\n\t\t\t\treturn parse(\n\t\t\t\t\t`<!-- wp:html -->${ node.outerHTML }<!-- /wp:html -->`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn createBlock(\n\t\t\t\t// Should not be hardcoded.\n\t\t\t\t'core/html',\n\t\t\t\tgetBlockAttributes( 'core/html', node.outerHTML )\n\t\t\t);\n\t\t}\n\n\t\tconst { transform, blockName } = rawTransform;\n\n\t\tif ( transform ) {\n\t\t\tconst block = transform( node, handler );\n\t\t\tif ( node.hasAttribute( 'class' ) ) {\n\t\t\t\tblock.attributes.className = node.getAttribute( 'class' );\n\t\t\t}\n\t\t\treturn block;\n\t\t}\n\n\t\treturn createBlock(\n\t\t\tblockName,\n\t\t\tgetBlockAttributes( blockName, node.outerHTML )\n\t\t);\n\t} );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,oBAAoB;;AAE7C;AACA;AACA;AACA,SAASC,WAAW,EAAEC,aAAa,QAAQ,YAAY;AACvD,OAAOC,KAAK,MAAM,WAAW;AAC7B,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,gBAAgB,QAAQ,sBAAsB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEC,IAAI,EAAEC,OAAO,EAAG;EAC7C,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAACC,kBAAkB,CAAE,EAAG,CAAC;EAE5DH,GAAG,CAACI,IAAI,CAACC,SAAS,GAAGP,IAAI;EAEzB,OAAOQ,KAAK,CAACC,IAAI,CAAEP,GAAG,CAACI,IAAI,CAACI,QAAS,CAAC,CAACC,OAAO,CAAIC,IAAI,IAAM;IAC3D,MAAMC,YAAY,GAAGlB,aAAa,CACjCG,gBAAgB,CAAC,CAAC,EAClB,CAAE;MAAEgB;IAAQ,CAAC,KAAMA,OAAO,CAAEF,IAAK,CAClC,CAAC;IAED,IAAK,CAAEC,YAAY,EAAG;MACrB;MACA;MACA,IAAKpB,QAAQ,CAACsB,QAAQ,EAAG;QACxB,OAAOnB,KAAK,CACX,mBAAoBgB,IAAI,CAACI,SAAS,mBACnC,CAAC;MACF;MACA,OAAOtB,WAAW;MACjB;MACA,WAAW,EACXG,kBAAkB,CAAE,WAAW,EAAEe,IAAI,CAACI,SAAU,CACjD,CAAC;IACF;IAEA,MAAM;MAAEC,SAAS;MAAEC;IAAU,CAAC,GAAGL,YAAY;IAE7C,IAAKI,SAAS,EAAG;MAChB,MAAME,KAAK,GAAGF,SAAS,CAAEL,IAAI,EAAEX,OAAQ,CAAC;MACxC,IAAKW,IAAI,CAACQ,YAAY,CAAE,OAAQ,CAAC,EAAG;QACnCD,KAAK,CAACE,UAAU,CAACC,SAAS,GAAGV,IAAI,CAACW,YAAY,CAAE,OAAQ,CAAC;MAC1D;MACA,OAAOJ,KAAK;IACb;IAEA,OAAOzB,WAAW,CACjBwB,SAAS,EACTrB,kBAAkB,CAAEqB,SAAS,EAAEN,IAAI,CAACI,SAAU,CAC/C,CAAC;EACF,CAAE,CAAC;AACJ","ignoreList":[]}