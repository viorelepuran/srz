{"version":3,"names":["processBlockType","addBootstrappedBlockType","name","blockType","type","addUnprocessedBlockType","dispatch","processedBlockType","addBlockTypes","addBlockBindingsSource","source","label","usesContext","getValues","setValues","canUserEditValue","getFieldsList","removeBlockBindingsSource"],"sources":["@wordpress/blocks/src/store/private-actions.js"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { processBlockType } from './process-block-type';\n\n/** @typedef {import('../api/registration').WPBlockType} WPBlockType */\n\n/**\n * Add bootstrapped block type metadata to the store. These metadata usually come from\n * the `block.json` file and are either statically bootstrapped from the server, or\n * passed as the `metadata` parameter to the `registerBlockType` function.\n *\n * @param {string}      name      Block name.\n * @param {WPBlockType} blockType Block type metadata.\n */\nexport function addBootstrappedBlockType( name, blockType ) {\n\treturn {\n\t\ttype: 'ADD_BOOTSTRAPPED_BLOCK_TYPE',\n\t\tname,\n\t\tblockType,\n\t};\n}\n\n/**\n * Add unprocessed block type settings to the store. These data are passed as the\n * `settings` parameter to the client-side `registerBlockType` function.\n *\n * @param {string}      name      Block name.\n * @param {WPBlockType} blockType Unprocessed block type settings.\n */\nexport function addUnprocessedBlockType( name, blockType ) {\n\treturn ( { dispatch } ) => {\n\t\tdispatch( { type: 'ADD_UNPROCESSED_BLOCK_TYPE', name, blockType } );\n\t\tconst processedBlockType = dispatch(\n\t\t\tprocessBlockType( name, blockType )\n\t\t);\n\t\tif ( ! processedBlockType ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch.addBlockTypes( processedBlockType );\n\t};\n}\n\n/**\n * Adds new block bindings source.\n *\n * @param {string} source Name of the source to register.\n */\nexport function addBlockBindingsSource( source ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_BINDINGS_SOURCE',\n\t\tname: source.name,\n\t\tlabel: source.label,\n\t\tusesContext: source.usesContext,\n\t\tgetValues: source.getValues,\n\t\tsetValues: source.setValues,\n\t\tcanUserEditValue: source.canUserEditValue,\n\t\tgetFieldsList: source.getFieldsList,\n\t};\n}\n\n/**\n * Removes existing block bindings source.\n *\n * @param {string} name Name of the source to remove.\n */\nexport function removeBlockBindingsSource( name ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_BINDINGS_SOURCE',\n\t\tname,\n\t};\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,sBAAsB;;AAEvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAAEC,IAAI,EAAEC,SAAS,EAAG;EAC3D,OAAO;IACNC,IAAI,EAAE,6BAA6B;IACnCF,IAAI;IACJC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,uBAAuBA,CAAEH,IAAI,EAAEC,SAAS,EAAG;EAC1D,OAAO,CAAE;IAAEG;EAAS,CAAC,KAAM;IAC1BA,QAAQ,CAAE;MAAEF,IAAI,EAAE,4BAA4B;MAAEF,IAAI;MAAEC;IAAU,CAAE,CAAC;IACnE,MAAMI,kBAAkB,GAAGD,QAAQ,CAClCN,gBAAgB,CAAEE,IAAI,EAAEC,SAAU,CACnC,CAAC;IACD,IAAK,CAAEI,kBAAkB,EAAG;MAC3B;IACD;IACAD,QAAQ,CAACE,aAAa,CAAED,kBAAmB,CAAC;EAC7C,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,sBAAsBA,CAAEC,MAAM,EAAG;EAChD,OAAO;IACNN,IAAI,EAAE,2BAA2B;IACjCF,IAAI,EAAEQ,MAAM,CAACR,IAAI;IACjBS,KAAK,EAAED,MAAM,CAACC,KAAK;IACnBC,WAAW,EAAEF,MAAM,CAACE,WAAW;IAC/BC,SAAS,EAAEH,MAAM,CAACG,SAAS;IAC3BC,SAAS,EAAEJ,MAAM,CAACI,SAAS;IAC3BC,gBAAgB,EAAEL,MAAM,CAACK,gBAAgB;IACzCC,aAAa,EAAEN,MAAM,CAACM;EACvB,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAAEf,IAAI,EAAG;EACjD,OAAO;IACNE,IAAI,EAAE,8BAA8B;IACpCF;EACD,CAAC;AACF","ignoreList":[]}