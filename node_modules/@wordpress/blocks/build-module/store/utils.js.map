{"version":3,"names":["getValueFromObjectPath","object","path","defaultValue","_value","normalizedPath","Array","isArray","split","value","forEach","fieldName","isObject","candidate","constructor","Object","matchesAttributes","blockAttributes","variationAttributes","entries","every","key"],"sources":["@wordpress/blocks/src/store/utils.js"],"sourcesContent":["/**\n * Helper util to return a value from a certain path of the object.\n * Path is specified as either:\n * - a string of properties, separated by dots, for example: \"x.y\".\n * - an array of properties, for example `[ 'x', 'y' ]`.\n * You can also specify a default value in case the result is nullish.\n *\n * @param {Object}       object       Input object.\n * @param {string|Array} path         Path to the object property.\n * @param {*}            defaultValue Default value if the value at the specified path is nullish.\n * @return {*} Value of the object property at the specified path.\n */\nexport const getValueFromObjectPath = ( object, path, defaultValue ) => {\n\tconst normalizedPath = Array.isArray( path ) ? path : path.split( '.' );\n\tlet value = object;\n\tnormalizedPath.forEach( ( fieldName ) => {\n\t\tvalue = value?.[ fieldName ];\n\t} );\n\treturn value ?? defaultValue;\n};\n\nfunction isObject( candidate ) {\n\treturn (\n\t\ttypeof candidate === 'object' &&\n\t\tcandidate.constructor === Object &&\n\t\tcandidate !== null\n\t);\n}\n\n/**\n * Determine whether a set of object properties matches a given object.\n *\n * Given an object of block attributes and an object of variation attributes,\n * this function checks recursively whether all the variation attributes are\n * present in the block attributes object.\n *\n * @param {Object} blockAttributes     The object to inspect.\n * @param {Object} variationAttributes The object of property values to match.\n * @return {boolean} Whether the block attributes match the variation attributes.\n */\nexport function matchesAttributes( blockAttributes, variationAttributes ) {\n\tif ( isObject( blockAttributes ) && isObject( variationAttributes ) ) {\n\t\treturn Object.entries( variationAttributes ).every(\n\t\t\t( [ key, value ] ) =>\n\t\t\t\tmatchesAttributes( blockAttributes?.[ key ], value )\n\t\t);\n\t}\n\n\treturn blockAttributes === variationAttributes;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,sBAAsB,GAAGA,CAAEC,MAAM,EAAEC,IAAI,EAAEC,YAAY,KAAM;EAAA,IAAAC,MAAA;EACvE,MAAMC,cAAc,GAAGC,KAAK,CAACC,OAAO,CAAEL,IAAK,CAAC,GAAGA,IAAI,GAAGA,IAAI,CAACM,KAAK,CAAE,GAAI,CAAC;EACvE,IAAIC,KAAK,GAAGR,MAAM;EAClBI,cAAc,CAACK,OAAO,CAAIC,SAAS,IAAM;IACxCF,KAAK,GAAGA,KAAK,GAAIE,SAAS,CAAE;EAC7B,CAAE,CAAC;EACH,QAAAP,MAAA,GAAOK,KAAK,cAAAL,MAAA,cAAAA,MAAA,GAAID,YAAY;AAC7B,CAAC;AAED,SAASS,QAAQA,CAAEC,SAAS,EAAG;EAC9B,OACC,OAAOA,SAAS,KAAK,QAAQ,IAC7BA,SAAS,CAACC,WAAW,KAAKC,MAAM,IAChCF,SAAS,KAAK,IAAI;AAEpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,iBAAiBA,CAAEC,eAAe,EAAEC,mBAAmB,EAAG;EACzE,IAAKN,QAAQ,CAAEK,eAAgB,CAAC,IAAIL,QAAQ,CAAEM,mBAAoB,CAAC,EAAG;IACrE,OAAOH,MAAM,CAACI,OAAO,CAAED,mBAAoB,CAAC,CAACE,KAAK,CACjD,CAAE,CAAEC,GAAG,EAAEZ,KAAK,CAAE,KACfO,iBAAiB,CAAEC,eAAe,GAAII,GAAG,CAAE,EAAEZ,KAAM,CACrD,CAAC;EACF;EAEA,OAAOQ,eAAe,KAAKC,mBAAmB;AAC/C","ignoreList":[]}