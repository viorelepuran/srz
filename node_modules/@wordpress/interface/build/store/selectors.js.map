{"version":3,"names":["_data","require","_deprecated","_interopRequireDefault","_preferences","_deprecated2","getActiveComplementaryArea","exports","createRegistrySelector","select","state","scope","normalizeComplementaryAreaScope","isComplementaryAreaVisible","preferencesStore","get","undefined","complementaryAreas","isComplementaryAreaLoading","isVisible","identifier","isItemPinned","item","_pinnedItems$item","normalizeComplementaryAreaName","pinnedItems","isFeatureActive","featureName","deprecated","since","alternative","isModalActive","modalName","activeModal"],"sources":["@wordpress/interface/src/store/selectors.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\n/**\n * Internal dependencies\n */\nimport {\n\tnormalizeComplementaryAreaScope,\n\tnormalizeComplementaryAreaName,\n} from './deprecated';\n\n/**\n * Returns the complementary area that is active in a given scope.\n *\n * @param {Object} state Global application state.\n * @param {string} scope Item scope.\n *\n * @return {string | null | undefined} The complementary area that is active in the given scope.\n */\nexport const getActiveComplementaryArea = createRegistrySelector(\n\t( select ) => ( state, scope ) => {\n\t\tscope = normalizeComplementaryAreaScope( scope );\n\t\tconst isComplementaryAreaVisible = select( preferencesStore ).get(\n\t\t\tscope,\n\t\t\t'isComplementaryAreaVisible'\n\t\t);\n\n\t\t// Return `undefined` to indicate that the user has never toggled\n\t\t// visibility, this is the vanilla default. Other code relies on this\n\t\t// nuance in the return value.\n\t\tif ( isComplementaryAreaVisible === undefined ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Return `null` to indicate the user hid the complementary area.\n\t\tif ( isComplementaryAreaVisible === false ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn state?.complementaryAreas?.[ scope ];\n\t}\n);\n\nexport const isComplementaryAreaLoading = createRegistrySelector(\n\t( select ) => ( state, scope ) => {\n\t\tscope = normalizeComplementaryAreaScope( scope );\n\t\tconst isVisible = select( preferencesStore ).get(\n\t\t\tscope,\n\t\t\t'isComplementaryAreaVisible'\n\t\t);\n\t\tconst identifier = state?.complementaryAreas?.[ scope ];\n\n\t\treturn isVisible && identifier === undefined;\n\t}\n);\n\n/**\n * Returns a boolean indicating if an item is pinned or not.\n *\n * @param {Object} state Global application state.\n * @param {string} scope Scope.\n * @param {string} item  Item to check.\n *\n * @return {boolean} True if the item is pinned and false otherwise.\n */\nexport const isItemPinned = createRegistrySelector(\n\t( select ) => ( state, scope, item ) => {\n\t\tscope = normalizeComplementaryAreaScope( scope );\n\t\titem = normalizeComplementaryAreaName( scope, item );\n\t\tconst pinnedItems = select( preferencesStore ).get(\n\t\t\tscope,\n\t\t\t'pinnedItems'\n\t\t);\n\t\treturn pinnedItems?.[ item ] ?? true;\n\t}\n);\n\n/**\n * Returns a boolean indicating whether a feature is active for a particular\n * scope.\n *\n * @param {Object} state       The store state.\n * @param {string} scope       The scope of the feature (e.g. core/edit-post).\n * @param {string} featureName The name of the feature.\n *\n * @return {boolean} Is the feature enabled?\n */\nexport const isFeatureActive = createRegistrySelector(\n\t( select ) => ( state, scope, featureName ) => {\n\t\tdeprecated(\n\t\t\t`select( 'core/interface' ).isFeatureActive( scope, featureName )`,\n\t\t\t{\n\t\t\t\tsince: '6.0',\n\t\t\t\talternative: `select( 'core/preferences' ).get( scope, featureName )`,\n\t\t\t}\n\t\t);\n\n\t\treturn !! select( preferencesStore ).get( scope, featureName );\n\t}\n);\n\n/**\n * Returns true if a modal is active, or false otherwise.\n *\n * @param {Object} state     Global application state.\n * @param {string} modalName A string that uniquely identifies the modal.\n *\n * @return {boolean} Whether the modal is active.\n */\nexport function isModalActive( state, modalName ) {\n\treturn state.activeModal === modalName;\n}\n"],"mappings":";;;;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAKA,IAAAI,YAAA,GAAAJ,OAAA;AAVA;AACA;AACA;;AAKA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMK,0BAA0B,GAAAC,OAAA,CAAAD,0BAAA,GAAG,IAAAE,4BAAsB,EAC7DC,MAAM,IAAM,CAAEC,KAAK,EAAEC,KAAK,KAAM;EACjCA,KAAK,GAAG,IAAAC,4CAA+B,EAAED,KAAM,CAAC;EAChD,MAAME,0BAA0B,GAAGJ,MAAM,CAAEK,kBAAiB,CAAC,CAACC,GAAG,CAChEJ,KAAK,EACL,4BACD,CAAC;;EAED;EACA;EACA;EACA,IAAKE,0BAA0B,KAAKG,SAAS,EAAG;IAC/C,OAAOA,SAAS;EACjB;;EAEA;EACA,IAAKH,0BAA0B,KAAK,KAAK,EAAG;IAC3C,OAAO,IAAI;EACZ;EAEA,OAAOH,KAAK,EAAEO,kBAAkB,GAAIN,KAAK,CAAE;AAC5C,CACD,CAAC;AAEM,MAAMO,0BAA0B,GAAAX,OAAA,CAAAW,0BAAA,GAAG,IAAAV,4BAAsB,EAC7DC,MAAM,IAAM,CAAEC,KAAK,EAAEC,KAAK,KAAM;EACjCA,KAAK,GAAG,IAAAC,4CAA+B,EAAED,KAAM,CAAC;EAChD,MAAMQ,SAAS,GAAGV,MAAM,CAAEK,kBAAiB,CAAC,CAACC,GAAG,CAC/CJ,KAAK,EACL,4BACD,CAAC;EACD,MAAMS,UAAU,GAAGV,KAAK,EAAEO,kBAAkB,GAAIN,KAAK,CAAE;EAEvD,OAAOQ,SAAS,IAAIC,UAAU,KAAKJ,SAAS;AAC7C,CACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMK,YAAY,GAAAd,OAAA,CAAAc,YAAA,GAAG,IAAAb,4BAAsB,EAC/CC,MAAM,IAAM,CAAEC,KAAK,EAAEC,KAAK,EAAEW,IAAI,KAAM;EAAA,IAAAC,iBAAA;EACvCZ,KAAK,GAAG,IAAAC,4CAA+B,EAAED,KAAM,CAAC;EAChDW,IAAI,GAAG,IAAAE,2CAA8B,EAAEb,KAAK,EAAEW,IAAK,CAAC;EACpD,MAAMG,WAAW,GAAGhB,MAAM,CAAEK,kBAAiB,CAAC,CAACC,GAAG,CACjDJ,KAAK,EACL,aACD,CAAC;EACD,QAAAY,iBAAA,GAAOE,WAAW,GAAIH,IAAI,CAAE,cAAAC,iBAAA,cAAAA,iBAAA,GAAI,IAAI;AACrC,CACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,eAAe,GAAAnB,OAAA,CAAAmB,eAAA,GAAG,IAAAlB,4BAAsB,EAClDC,MAAM,IAAM,CAAEC,KAAK,EAAEC,KAAK,EAAEgB,WAAW,KAAM;EAC9C,IAAAC,mBAAU,EACT,kEAAkE,EAClE;IACCC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE;EACd,CACD,CAAC;EAED,OAAO,CAAC,CAAErB,MAAM,CAAEK,kBAAiB,CAAC,CAACC,GAAG,CAAEJ,KAAK,EAAEgB,WAAY,CAAC;AAC/D,CACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,aAAaA,CAAErB,KAAK,EAAEsB,SAAS,EAAG;EACjD,OAAOtB,KAAK,CAACuB,WAAW,KAAKD,SAAS;AACvC","ignoreList":[]}