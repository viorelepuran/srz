"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluginContextProvider = void 0;
exports.usePluginContext = usePluginContext;
exports.withPluginContext = void 0;
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const Context = (0, _element.createContext)({
  name: null,
  icon: null
});
const PluginContextProvider = exports.PluginContextProvider = Context.Provider;

/**
 * A hook that returns the plugin context.
 *
 * @return {PluginContext} Plugin context
 */
function usePluginContext() {
  return (0, _element.useContext)(Context);
}

/**
 * A Higher Order Component used to inject Plugin context to the
 * wrapped component.
 *
 * @deprecated 6.8.0 Use `usePluginContext` hook instead.
 *
 * @param  mapContextToProps Function called on every context change,
 *                           expected to return object of props to
 *                           merge with the component's own props.
 *
 * @return {Component} Enhanced component with injected context as props.
 */
const withPluginContext = mapContextToProps => (0, _compose.createHigherOrderComponent)(OriginalComponent => {
  (0, _deprecated.default)('wp.plugins.withPluginContext', {
    since: '6.8.0',
    alternative: 'wp.plugins.usePluginContext'
  });
  return props => /*#__PURE__*/(0, _jsxRuntime.jsx)(Context.Consumer, {
    children: context => /*#__PURE__*/(0, _jsxRuntime.jsx)(OriginalComponent, {
      ...props,
      ...mapContextToProps(context, props)
    })
  });
}, 'withPluginContext');
exports.withPluginContext = withPluginContext;
//# sourceMappingURL=index.js.map