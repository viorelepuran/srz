{"version":3,"names":["_defaultProcessor","_interopRequireDefault","require","createBatch","processor","defaultProcessor","lastId","queue","pending","ObservableSet","add","inputOrThunk","id","input","Promise","resolve","reject","push","delete","finally","run","size","unsubscribe","subscribe","undefined","results","map","length","Error","error","isSuccess","forEach","result","key","queueItem","_result$output","output","constructor","args","set","Set","subscribers","value","subscriber"],"sources":["@wordpress/core-data/src/batch/create-batch.js"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport defaultProcessor from './default-processor';\n\n/**\n * Creates a batch, which can be used to combine multiple API requests into one\n * API request using the WordPress batch processing API (/v1/batch).\n *\n * ```\n * const batch = createBatch();\n * const dunePromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Dune' }\n * } );\n * const lotrPromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Lord of the Rings' }\n * } );\n * const isSuccess = await batch.run(); // Sends one POST to /v1/batch.\n * if ( isSuccess ) {\n *   console.log(\n *     'Saved two books:',\n *     await dunePromise,\n *     await lotrPromise\n *   );\n * }\n * ```\n *\n * @param {Function} [processor] Processor function. Can be used to replace the\n *                               default functionality which is to send an API\n *                               request to /v1/batch. Is given an array of\n *                               inputs and must return a promise that\n *                               resolves to an array of objects containing\n *                               either `output` or `error`.\n */\nexport default function createBatch( processor = defaultProcessor ) {\n\tlet lastId = 0;\n\t/** @type {Array<{ input: any; resolve: ( value: any ) => void; reject: ( error: any ) => void }>} */\n\tlet queue = [];\n\tconst pending = new ObservableSet();\n\n\treturn {\n\t\t/**\n\t\t * Adds an input to the batch and returns a promise that is resolved or\n\t\t * rejected when the input is processed by `batch.run()`.\n\t\t *\n\t\t * You may also pass a thunk which allows inputs to be added\n\t\t * asynchronously.\n\t\t *\n\t\t * ```\n\t\t * // Both are allowed:\n\t\t * batch.add( { path: '/v1/books', ... } );\n\t\t * batch.add( ( add ) => add( { path: '/v1/books', ... } ) );\n\t\t * ```\n\t\t *\n\t\t * If a thunk is passed, `batch.run()` will pause until either:\n\t\t *\n\t\t * - The thunk calls its `add` argument, or;\n\t\t * - The thunk returns a promise and that promise resolves, or;\n\t\t * - The thunk returns a non-promise.\n\t\t *\n\t\t * @param {any|Function} inputOrThunk Input to add or thunk to execute.\n\t\t *\n\t\t * @return {Promise|any} If given an input, returns a promise that\n\t\t *                       is resolved or rejected when the batch is\n\t\t *                       processed. If given a thunk, returns the return\n\t\t *                       value of that thunk.\n\t\t */\n\t\tadd( inputOrThunk ) {\n\t\t\tconst id = ++lastId;\n\t\t\tpending.add( id );\n\n\t\t\tconst add = ( input ) =>\n\t\t\t\tnew Promise( ( resolve, reject ) => {\n\t\t\t\t\tqueue.push( {\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tresolve,\n\t\t\t\t\t\treject,\n\t\t\t\t\t} );\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\n\t\t\tif ( typeof inputOrThunk === 'function' ) {\n\t\t\t\treturn Promise.resolve( inputOrThunk( add ) ).finally( () => {\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn add( inputOrThunk );\n\t\t},\n\n\t\t/**\n\t\t * Runs the batch. This calls `batchProcessor` and resolves or rejects\n\t\t * all promises returned by `add()`.\n\t\t *\n\t\t * @return {Promise<boolean>} A promise that resolves to a boolean that is true\n\t\t *                   if the processor returned no errors.\n\t\t */\n\t\tasync run() {\n\t\t\tif ( pending.size ) {\n\t\t\t\tawait new Promise( ( resolve ) => {\n\t\t\t\t\tconst unsubscribe = pending.subscribe( () => {\n\t\t\t\t\t\tif ( ! pending.size ) {\n\t\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\t\tresolve( undefined );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tlet results;\n\n\t\t\ttry {\n\t\t\t\tresults = await processor(\n\t\t\t\t\tqueue.map( ( { input } ) => input )\n\t\t\t\t);\n\n\t\t\t\tif ( results.length !== queue.length ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'run: Array returned by processor must be same size as input array.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( error ) {\n\t\t\t\tfor ( const { reject } of queue ) {\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tlet isSuccess = true;\n\n\t\t\tresults.forEach( ( result, key ) => {\n\t\t\t\tconst queueItem = queue[ key ];\n\n\t\t\t\tif ( result?.error ) {\n\t\t\t\t\tqueueItem?.reject( result.error );\n\t\t\t\t\tisSuccess = false;\n\t\t\t\t} else {\n\t\t\t\t\tqueueItem?.resolve( result?.output ?? result );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tqueue = [];\n\n\t\t\treturn isSuccess;\n\t\t},\n\t};\n}\n\nclass ObservableSet {\n\tconstructor( ...args ) {\n\t\tthis.set = new Set( ...args );\n\t\tthis.subscribers = new Set();\n\t}\n\n\tget size() {\n\t\treturn this.set.size;\n\t}\n\n\tadd( value ) {\n\t\tthis.set.add( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn this;\n\t}\n\n\tdelete( value ) {\n\t\tconst isSuccess = this.set.delete( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn isSuccess;\n\t}\n\n\tsubscribe( subscriber ) {\n\t\tthis.subscribers.add( subscriber );\n\t\treturn () => {\n\t\t\tthis.subscribers.delete( subscriber );\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,iBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASC,WAAWA,CAAEC,SAAS,GAAGC,yBAAgB,EAAG;EACnE,IAAIC,MAAM,GAAG,CAAC;EACd;EACA,IAAIC,KAAK,GAAG,EAAE;EACd,MAAMC,OAAO,GAAG,IAAIC,aAAa,CAAC,CAAC;EAEnC,OAAO;IACN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,GAAGA,CAAEC,YAAY,EAAG;MACnB,MAAMC,EAAE,GAAG,EAAEN,MAAM;MACnBE,OAAO,CAACE,GAAG,CAAEE,EAAG,CAAC;MAEjB,MAAMF,GAAG,GAAKG,KAAK,IAClB,IAAIC,OAAO,CAAE,CAAEC,OAAO,EAAEC,MAAM,KAAM;QACnCT,KAAK,CAACU,IAAI,CAAE;UACXJ,KAAK;UACLE,OAAO;UACPC;QACD,CAAE,CAAC;QACHR,OAAO,CAACU,MAAM,CAAEN,EAAG,CAAC;MACrB,CAAE,CAAC;MAEJ,IAAK,OAAOD,YAAY,KAAK,UAAU,EAAG;QACzC,OAAOG,OAAO,CAACC,OAAO,CAAEJ,YAAY,CAAED,GAAI,CAAE,CAAC,CAACS,OAAO,CAAE,MAAM;UAC5DX,OAAO,CAACU,MAAM,CAAEN,EAAG,CAAC;QACrB,CAAE,CAAC;MACJ;MAEA,OAAOF,GAAG,CAAEC,YAAa,CAAC;IAC3B,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;AACA;IACE,MAAMS,GAAGA,CAAA,EAAG;MACX,IAAKZ,OAAO,CAACa,IAAI,EAAG;QACnB,MAAM,IAAIP,OAAO,CAAIC,OAAO,IAAM;UACjC,MAAMO,WAAW,GAAGd,OAAO,CAACe,SAAS,CAAE,MAAM;YAC5C,IAAK,CAAEf,OAAO,CAACa,IAAI,EAAG;cACrBC,WAAW,CAAC,CAAC;cACbP,OAAO,CAAES,SAAU,CAAC;YACrB;UACD,CAAE,CAAC;QACJ,CAAE,CAAC;MACJ;MAEA,IAAIC,OAAO;MAEX,IAAI;QACHA,OAAO,GAAG,MAAMrB,SAAS,CACxBG,KAAK,CAACmB,GAAG,CAAE,CAAE;UAAEb;QAAM,CAAC,KAAMA,KAAM,CACnC,CAAC;QAED,IAAKY,OAAO,CAACE,MAAM,KAAKpB,KAAK,CAACoB,MAAM,EAAG;UACtC,MAAM,IAAIC,KAAK,CACd,oEACD,CAAC;QACF;MACD,CAAC,CAAC,OAAQC,KAAK,EAAG;QACjB,KAAM,MAAM;UAAEb;QAAO,CAAC,IAAIT,KAAK,EAAG;UACjCS,MAAM,CAAEa,KAAM,CAAC;QAChB;QAEA,MAAMA,KAAK;MACZ;MAEA,IAAIC,SAAS,GAAG,IAAI;MAEpBL,OAAO,CAACM,OAAO,CAAE,CAAEC,MAAM,EAAEC,GAAG,KAAM;QACnC,MAAMC,SAAS,GAAG3B,KAAK,CAAE0B,GAAG,CAAE;QAE9B,IAAKD,MAAM,EAAEH,KAAK,EAAG;UACpBK,SAAS,EAAElB,MAAM,CAAEgB,MAAM,CAACH,KAAM,CAAC;UACjCC,SAAS,GAAG,KAAK;QAClB,CAAC,MAAM;UAAA,IAAAK,cAAA;UACND,SAAS,EAAEnB,OAAO,EAAAoB,cAAA,GAAEH,MAAM,EAAEI,MAAM,cAAAD,cAAA,cAAAA,cAAA,GAAIH,MAAO,CAAC;QAC/C;MACD,CAAE,CAAC;MAEHzB,KAAK,GAAG,EAAE;MAEV,OAAOuB,SAAS;IACjB;EACD,CAAC;AACF;AAEA,MAAMrB,aAAa,CAAC;EACnB4B,WAAWA,CAAE,GAAGC,IAAI,EAAG;IACtB,IAAI,CAACC,GAAG,GAAG,IAAIC,GAAG,CAAE,GAAGF,IAAK,CAAC;IAC7B,IAAI,CAACG,WAAW,GAAG,IAAID,GAAG,CAAC,CAAC;EAC7B;EAEA,IAAInB,IAAIA,CAAA,EAAG;IACV,OAAO,IAAI,CAACkB,GAAG,CAAClB,IAAI;EACrB;EAEAX,GAAGA,CAAEgC,KAAK,EAAG;IACZ,IAAI,CAACH,GAAG,CAAC7B,GAAG,CAAEgC,KAAM,CAAC;IACrB,IAAI,CAACD,WAAW,CAACV,OAAO,CAAIY,UAAU,IAAMA,UAAU,CAAC,CAAE,CAAC;IAC1D,OAAO,IAAI;EACZ;EAEAzB,MAAMA,CAAEwB,KAAK,EAAG;IACf,MAAMZ,SAAS,GAAG,IAAI,CAACS,GAAG,CAACrB,MAAM,CAAEwB,KAAM,CAAC;IAC1C,IAAI,CAACD,WAAW,CAACV,OAAO,CAAIY,UAAU,IAAMA,UAAU,CAAC,CAAE,CAAC;IAC1D,OAAOb,SAAS;EACjB;EAEAP,SAASA,CAAEoB,UAAU,EAAG;IACvB,IAAI,CAACF,WAAW,CAAC/B,GAAG,CAAEiC,UAAW,CAAC;IAClC,OAAO,MAAM;MACZ,IAAI,CAACF,WAAW,CAACvB,MAAM,CAAEyB,UAAW,CAAC;IACtC,CAAC;EACF;AACD","ignoreList":[]}