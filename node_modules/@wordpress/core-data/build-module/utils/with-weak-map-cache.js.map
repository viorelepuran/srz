{"version":3,"names":["withWeakMapCache","fn","cache","WeakMap","key","value","has","get","set"],"sources":["@wordpress/core-data/src/utils/with-weak-map-cache.js"],"sourcesContent":["/**\n * Given a function, returns an enhanced function which caches the result and\n * tracks in WeakMap. The result is only cached if the original function is\n * passed a valid object-like argument (requirement for WeakMap key).\n *\n * @param {Function} fn Original function.\n *\n * @return {Function} Enhanced caching function.\n */\nfunction withWeakMapCache( fn ) {\n\tconst cache = new WeakMap();\n\n\treturn ( key ) => {\n\t\tlet value;\n\t\tif ( cache.has( key ) ) {\n\t\t\tvalue = cache.get( key );\n\t\t} else {\n\t\t\tvalue = fn( key );\n\n\t\t\t// Can reach here if key is not valid for WeakMap, since `has`\n\t\t\t// will return false for invalid key. Since `set` will throw,\n\t\t\t// ensure that key is valid before setting into cache.\n\t\t\tif ( key !== null && typeof key === 'object' ) {\n\t\t\t\tcache.set( key, value );\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t};\n}\n\nexport default withWeakMapCache;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgBA,CAAEC,EAAE,EAAG;EAC/B,MAAMC,KAAK,GAAG,IAAIC,OAAO,CAAC,CAAC;EAE3B,OAASC,GAAG,IAAM;IACjB,IAAIC,KAAK;IACT,IAAKH,KAAK,CAACI,GAAG,CAAEF,GAAI,CAAC,EAAG;MACvBC,KAAK,GAAGH,KAAK,CAACK,GAAG,CAAEH,GAAI,CAAC;IACzB,CAAC,MAAM;MACNC,KAAK,GAAGJ,EAAE,CAAEG,GAAI,CAAC;;MAEjB;MACA;MACA;MACA,IAAKA,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAG;QAC9CF,KAAK,CAACM,GAAG,CAAEJ,GAAG,EAAEC,KAAM,CAAC;MACxB;IACD;IAEA,OAAOA,KAAK;EACb,CAAC;AACF;AAEA,eAAeL,gBAAgB","ignoreList":[]}