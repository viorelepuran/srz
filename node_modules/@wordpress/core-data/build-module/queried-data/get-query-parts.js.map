{"version":3,"names":["addQueryArgs","withWeakMapCache","getNormalizedCommaSeparable","getQueryParts","query","parts","stableKey","page","perPage","fields","include","context","keys","Object","sort","i","length","key","value","Number","_getNormalizedCommaSe","join","_getNormalizedCommaSe2","toString","map","slice"],"sources":["@wordpress/core-data/src/queried-data/get-query-parts.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { withWeakMapCache, getNormalizedCommaSeparable } from '../utils';\n\n/**\n * An object of properties describing a specific query.\n *\n * @typedef {Object} WPQueriedDataQueryParts\n *\n * @property {number}      page      The query page (1-based index, default 1).\n * @property {number}      perPage   Items per page for query (default 10).\n * @property {string}      stableKey An encoded stable string of all non-\n *                                   pagination, non-fields query parameters.\n * @property {?(string[])} fields    Target subset of fields to derive from\n *                                   item objects.\n * @property {?(number[])} include   Specific item IDs to include.\n * @property {string}      context   Scope under which the request is made;\n *                                   determines returned fields in response.\n */\n\n/**\n * Given a query object, returns an object of parts, including pagination\n * details (`page` and `perPage`, or default values). All other properties are\n * encoded into a stable (idempotent) `stableKey` value.\n *\n * @param {Object} query Optional query object.\n *\n * @return {WPQueriedDataQueryParts} Query parts.\n */\nexport function getQueryParts( query ) {\n\t/**\n\t * @type {WPQueriedDataQueryParts}\n\t */\n\tconst parts = {\n\t\tstableKey: '',\n\t\tpage: 1,\n\t\tperPage: 10,\n\t\tfields: null,\n\t\tinclude: null,\n\t\tcontext: 'default',\n\t};\n\n\t// Ensure stable key by sorting keys. Also more efficient for iterating.\n\tconst keys = Object.keys( query ).sort();\n\n\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\tconst key = keys[ i ];\n\t\tlet value = query[ key ];\n\n\t\tswitch ( key ) {\n\t\t\tcase 'page':\n\t\t\t\tparts[ key ] = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'per_page':\n\t\t\t\tparts.perPage = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'context':\n\t\t\t\tparts.context = value;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// While in theory, we could exclude \"_fields\" from the stableKey\n\t\t\t\t// because two request with different fields have the same results\n\t\t\t\t// We're not able to ensure that because the server can decide to omit\n\t\t\t\t// fields from the response even if we explicitly asked for it.\n\t\t\t\t// Example: Asking for titles in posts without title support.\n\t\t\t\tif ( key === '_fields' ) {\n\t\t\t\t\tparts.fields = getNormalizedCommaSeparable( value ) ?? [];\n\t\t\t\t\t// Make sure to normalize value for `stableKey`\n\t\t\t\t\tvalue = parts.fields.join();\n\t\t\t\t}\n\n\t\t\t\t// Two requests with different include values cannot have same results.\n\t\t\t\tif ( key === 'include' ) {\n\t\t\t\t\tif ( typeof value === 'number' ) {\n\t\t\t\t\t\tvalue = value.toString();\n\t\t\t\t\t}\n\t\t\t\t\tparts.include = (\n\t\t\t\t\t\tgetNormalizedCommaSeparable( value ) ?? []\n\t\t\t\t\t).map( Number );\n\t\t\t\t\t// Normalize value for `stableKey`.\n\t\t\t\t\tvalue = parts.include.join();\n\t\t\t\t}\n\n\t\t\t\t// While it could be any deterministic string, for simplicity's\n\t\t\t\t// sake mimic querystring encoding for stable key.\n\t\t\t\t//\n\t\t\t\t// TODO: For consistency with PHP implementation, addQueryArgs\n\t\t\t\t// should accept a key value pair, which may optimize its\n\t\t\t\t// implementation for our use here, vs. iterating an object\n\t\t\t\t// with only a single key.\n\t\t\t\tparts.stableKey +=\n\t\t\t\t\t( parts.stableKey ? '&' : '' ) +\n\t\t\t\t\taddQueryArgs( '', { [ key ]: value } ).slice( 1 );\n\t\t}\n\t}\n\n\treturn parts;\n}\n\nexport default withWeakMapCache( getQueryParts );\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,gBAAgB;;AAE7C;AACA;AACA;AACA,SAASC,gBAAgB,EAAEC,2BAA2B,QAAQ,UAAU;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAEC,KAAK,EAAG;EACtC;AACD;AACA;EACC,MAAMC,KAAK,GAAG;IACbC,SAAS,EAAE,EAAE;IACbC,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;EACV,CAAC;;EAED;EACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAER,KAAM,CAAC,CAACU,IAAI,CAAC,CAAC;EAExC,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAG;IACvC,MAAME,GAAG,GAAGL,IAAI,CAAEG,CAAC,CAAE;IACrB,IAAIG,KAAK,GAAGd,KAAK,CAAEa,GAAG,CAAE;IAExB,QAASA,GAAG;MACX,KAAK,MAAM;QACVZ,KAAK,CAAEY,GAAG,CAAE,GAAGE,MAAM,CAAED,KAAM,CAAC;QAC9B;MAED,KAAK,UAAU;QACdb,KAAK,CAACG,OAAO,GAAGW,MAAM,CAAED,KAAM,CAAC;QAC/B;MAED,KAAK,SAAS;QACbb,KAAK,CAACM,OAAO,GAAGO,KAAK;QACrB;MAED;QACC;QACA;QACA;QACA;QACA;QACA,IAAKD,GAAG,KAAK,SAAS,EAAG;UAAA,IAAAG,qBAAA;UACxBf,KAAK,CAACI,MAAM,IAAAW,qBAAA,GAAGlB,2BAA2B,CAAEgB,KAAM,CAAC,cAAAE,qBAAA,cAAAA,qBAAA,GAAI,EAAE;UACzD;UACAF,KAAK,GAAGb,KAAK,CAACI,MAAM,CAACY,IAAI,CAAC,CAAC;QAC5B;;QAEA;QACA,IAAKJ,GAAG,KAAK,SAAS,EAAG;UAAA,IAAAK,sBAAA;UACxB,IAAK,OAAOJ,KAAK,KAAK,QAAQ,EAAG;YAChCA,KAAK,GAAGA,KAAK,CAACK,QAAQ,CAAC,CAAC;UACzB;UACAlB,KAAK,CAACK,OAAO,GAAG,EAAAY,sBAAA,GACfpB,2BAA2B,CAAEgB,KAAM,CAAC,cAAAI,sBAAA,cAAAA,sBAAA,GAAI,EAAE,EACzCE,GAAG,CAAEL,MAAO,CAAC;UACf;UACAD,KAAK,GAAGb,KAAK,CAACK,OAAO,CAACW,IAAI,CAAC,CAAC;QAC7B;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACAhB,KAAK,CAACC,SAAS,IACd,CAAED,KAAK,CAACC,SAAS,GAAG,GAAG,GAAG,EAAE,IAC5BN,YAAY,CAAE,EAAE,EAAE;UAAE,CAAEiB,GAAG,GAAIC;QAAM,CAAE,CAAC,CAACO,KAAK,CAAE,CAAE,CAAC;IACpD;EACD;EAEA,OAAOpB,KAAK;AACb;AAEA,eAAeJ,gBAAgB,CAAEE,aAAc,CAAC","ignoreList":[]}