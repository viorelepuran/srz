{"version":3,"names":["combineReducers","compose","conservativeMapItem","ifMatchingAction","replaceAction","onSubKey","DEFAULT_ENTITY_KEY","getQueryParts","getContextFromAction","action","query","queryParts","context","getMergedItemIds","itemIds","nextItemIds","page","perPage","_itemIds$length","receivedAllIds","nextItemIdsStartIndex","size","Math","max","length","mergedItemIds","Array","i","isInNextItemsRange","removeEntitiesById","entities","ids","Object","fromEntries","entries","filter","id","some","itemId","Number","isInteger","items","state","type","key","reduce","accumulator","value","map","contextState","itemIsComplete","isCompleteQuery","isArray","fields","result","item","receiveQueries","Boolean","meta","queries","removedItems","queryGroup","contextQueries","queryItems","queryId"],"sources":["@wordpress/core-data/src/queried-data/reducer.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport {\n\tconservativeMapItem,\n\tifMatchingAction,\n\treplaceAction,\n\tonSubKey,\n} from '../utils';\nimport { DEFAULT_ENTITY_KEY } from '../entities';\nimport getQueryParts from './get-query-parts';\n\nfunction getContextFromAction( action ) {\n\tconst { query } = action;\n\tif ( ! query ) {\n\t\treturn 'default';\n\t}\n\n\tconst queryParts = getQueryParts( query );\n\treturn queryParts.context;\n}\n\n/**\n * Returns a merged array of item IDs, given details of the received paginated\n * items. The array is sparse-like with `undefined` entries where holes exist.\n *\n * @param {?Array<number>} itemIds     Original item IDs (default empty array).\n * @param {number[]}       nextItemIds Item IDs to merge.\n * @param {number}         page        Page of items merged.\n * @param {number}         perPage     Number of items per page.\n *\n * @return {number[]} Merged array of item IDs.\n */\nexport function getMergedItemIds( itemIds, nextItemIds, page, perPage ) {\n\tconst receivedAllIds = page === 1 && perPage === -1;\n\tif ( receivedAllIds ) {\n\t\treturn nextItemIds;\n\t}\n\tconst nextItemIdsStartIndex = ( page - 1 ) * perPage;\n\n\t// If later page has already been received, default to the larger known\n\t// size of the existing array, else calculate as extending the existing.\n\tconst size = Math.max(\n\t\titemIds?.length ?? 0,\n\t\tnextItemIdsStartIndex + nextItemIds.length\n\t);\n\n\t// Preallocate array since size is known.\n\tconst mergedItemIds = new Array( size );\n\n\tfor ( let i = 0; i < size; i++ ) {\n\t\t// Preserve existing item ID except for subset of range of next items.\n\t\t// We need to check against the possible maximum upper boundary because\n\t\t// a page could receive fewer than what was previously stored.\n\t\tconst isInNextItemsRange =\n\t\t\ti >= nextItemIdsStartIndex && i < nextItemIdsStartIndex + perPage;\n\t\tmergedItemIds[ i ] = isInNextItemsRange\n\t\t\t? nextItemIds[ i - nextItemIdsStartIndex ]\n\t\t\t: itemIds?.[ i ];\n\t}\n\n\treturn mergedItemIds;\n}\n\n/**\n * Helper function to filter out entities with certain IDs.\n * Entities are keyed by their ID.\n *\n * @param {Object} entities Entity objects, keyed by entity ID.\n * @param {Array}  ids      Entity IDs to filter out.\n *\n * @return {Object} Filtered entities.\n */\nfunction removeEntitiesById( entities, ids ) {\n\treturn Object.fromEntries(\n\t\tObject.entries( entities ).filter(\n\t\t\t( [ id ] ) =>\n\t\t\t\t! ids.some( ( itemId ) => {\n\t\t\t\t\tif ( Number.isInteger( itemId ) ) {\n\t\t\t\t\t\treturn itemId === +id;\n\t\t\t\t\t}\n\t\t\t\t\treturn itemId === id;\n\t\t\t\t} )\n\t\t)\n\t);\n}\n\n/**\n * Reducer tracking items state, keyed by ID. Items are assumed to be normal,\n * where identifiers are common across all queries.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nexport function items( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst key = action.key || DEFAULT_ENTITY_KEY;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( accumulator, value ) => {\n\t\t\t\t\t\tconst itemId = value?.[ key ];\n\n\t\t\t\t\t\taccumulator[ itemId ] = conservativeMapItem(\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ],\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn Object.fromEntries(\n\t\t\t\tObject.entries( state ).map( ( [ itemId, contextState ] ) => [\n\t\t\t\t\titemId,\n\t\t\t\t\tremoveEntitiesById( contextState, action.itemIds ),\n\t\t\t\t] )\n\t\t\t);\n\t}\n\treturn state;\n}\n\n/**\n * Reducer tracking item completeness, keyed by ID. A complete item is one for\n * which all fields are known. This is used in supporting `_fields` queries,\n * where not all properties associated with an entity are necessarily returned.\n * In such cases, completeness is used as an indication of whether it would be\n * safe to use queried data for a non-`_fields`-limited request.\n *\n * @param {Object<string,Object<string,boolean>>} state  Current state.\n * @param {Object}                                action Dispatched action.\n *\n * @return {Object<string,Object<string,boolean>>} Next state.\n */\nexport function itemIsComplete( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst { query, key = DEFAULT_ENTITY_KEY } = action;\n\n\t\t\t// An item is considered complete if it is received without an associated\n\t\t\t// fields query. Ideally, this would be implemented in such a way where the\n\t\t\t// complete aggregate of all fields would satisfy completeness. Since the\n\t\t\t// fields are not consistent across all entities, this would require\n\t\t\t// introspection on the REST schema for each entity to know which fields\n\t\t\t// compose a complete item for that entity.\n\t\t\tconst queryParts = query ? getQueryParts( query ) : {};\n\t\t\tconst isCompleteQuery =\n\t\t\t\t! query || ! Array.isArray( queryParts.fields );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( result, item ) => {\n\t\t\t\t\t\tconst itemId = item?.[ key ];\n\n\t\t\t\t\t\t// Defer to completeness if already assigned. Technically the\n\t\t\t\t\t\t// data may be outdated if receiving items for a field subset.\n\t\t\t\t\t\tresult[ itemId ] =\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ] || isCompleteQuery;\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn Object.fromEntries(\n\t\t\t\tObject.entries( state ).map( ( [ itemId, contextState ] ) => [\n\t\t\t\t\titemId,\n\t\t\t\t\tremoveEntitiesById( contextState, action.itemIds ),\n\t\t\t\t] )\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking queries state, keyed by stable query key. Each reducer\n * query object includes `itemIds` and `requestingPageByPerPage`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst receiveQueries = compose( [\n\t// Limit to matching action type so we don't attempt to replace action on\n\t// an unhandled action.\n\tifMatchingAction( ( action ) => 'query' in action ),\n\n\t// Inject query parts into action for use both in `onSubKey` and reducer.\n\treplaceAction( ( action ) => {\n\t\t// `ifMatchingAction` still passes on initialization, where state is\n\t\t// undefined and a query is not assigned. Avoid attempting to parse\n\t\t// parts. `onSubKey` will omit by lack of `stableKey`.\n\t\tif ( action.query ) {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\t...getQueryParts( action.query ),\n\t\t\t};\n\t\t}\n\n\t\treturn action;\n\t} ),\n\n\tonSubKey( 'context' ),\n\n\t// Queries shape is shared, but keyed by query `stableKey` part. Original\n\t// reducer tracks only a single query object.\n\tonSubKey( 'stableKey' ),\n] )( ( state = {}, action ) => {\n\tconst { type, page, perPage, key = DEFAULT_ENTITY_KEY } = action;\n\n\tif ( type !== 'RECEIVE_ITEMS' ) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\titemIds: getMergedItemIds(\n\t\t\tstate?.itemIds || [],\n\t\t\taction.items.map( ( item ) => item?.[ key ] ).filter( Boolean ),\n\t\t\tpage,\n\t\t\tperPage\n\t\t),\n\t\tmeta: action.meta,\n\t};\n} );\n\n/**\n * Reducer tracking queries state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst queries = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS':\n\t\t\treturn receiveQueries( state, action );\n\t\tcase 'REMOVE_ITEMS':\n\t\t\tconst removedItems = action.itemIds.reduce( ( result, itemId ) => {\n\t\t\t\tresult[ itemId ] = true;\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\n\t\t\treturn Object.fromEntries(\n\t\t\t\tObject.entries( state ).map(\n\t\t\t\t\t( [ queryGroup, contextQueries ] ) => [\n\t\t\t\t\t\tqueryGroup,\n\t\t\t\t\t\tObject.fromEntries(\n\t\t\t\t\t\t\tObject.entries( contextQueries ).map(\n\t\t\t\t\t\t\t\t( [ query, queryItems ] ) => [\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t...queryItems,\n\t\t\t\t\t\t\t\t\t\titemIds: queryItems.itemIds.filter(\n\t\t\t\t\t\t\t\t\t\t\t( queryId ) =>\n\t\t\t\t\t\t\t\t\t\t\t\t! removedItems[ queryId ]\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default combineReducers( {\n\titems,\n\titemIsComplete,\n\tqueries,\n} );\n"],"mappings":"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","ignoreList":[]}