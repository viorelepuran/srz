{"version":3,"names":["useSelect","useMemo","store","coreStore","blockEditorStore","decodeEntities","__","cloneBlock","getBlockSupport","blocksStore","getEntitiesInfo","entities","mapping","reduce","accumulator","entity","mapById","mapByName","names","id","name","push","getValueFromObjectPath","object","path","normalizedPath","split","value","forEach","fieldName","mapToIHasNameAndId","map","usePostTypes","postTypes","select","getPostTypes","excludedPostTypes","filteredPostTypes","per_page","filter","viewable","slug","includes","postTypesTaxonomiesMap","length","type","taxonomies","postTypesSelectOptions","labels","label","singular_name","postTypeFormatSupportMap","supports","useTaxonomies","postType","getTaxonomies","getPostType","visibility","publicly_queryable","useIsPostTypeHierarchical","hierarchical","useOrderByOptions","supportsCustomOrder","orderByOptions","useAllowedControls","attributes","getActiveBlockVariation","allowedControls","isControlAllowed","key","getTransformedBlocksFromPattern","blocks","queryBlockAttributes","query","inherit","namespace","clonedBlocks","block","queryClientIds","blocksQueue","shift","clientId","innerBlocks","innerBlock","newBlocks","useBlockNameForPatterns","activeVariationName","getBlockRootClientId","getPatternsByBlockTypes","rootClientId","activePatterns","useScopedBlockVariations","blockVariations","getBlockVariations","variations","isNotConnected","variation","connectedVariations","usePatterns","useUnsupportedBlocks","getClientIdsOfDescendants","getBlockName","descendantClientId","blockName","blockSupportsInteractivity","Object","is","blockSupportsInteractivityClientNavigation","blockInteractivity","hasBlocksFromPlugins","hasPostContentBlock","hasUnsupportedBlocks","getQueryContextFromTemplate","templateSlug","isSingular","templateType","singularTemplates","templateTypeFromSlug","queryFromTemplateSlug","slice","join"],"sources":["@wordpress/block-library/src/query/utils.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { useMemo } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\nimport {\n\tcloneBlock,\n\tgetBlockSupport,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\n\n/** @typedef {import('@wordpress/blocks').WPBlockVariation} WPBlockVariation */\n/** @typedef {import('@wordpress/components/build-types/query-controls/types').OrderByOption} OrderByOption */\n\n/**\n * @typedef IHasNameAndId\n * @property {string|number} id   The entity's id.\n * @property {string}        name The entity's name.\n */\n\n/**\n * The object used in Query block that contains info and helper mappings\n * from an array of IHasNameAndId objects.\n *\n * @typedef {Object} QueryEntitiesInfo\n * @property {IHasNameAndId[]}               entities  The array of entities.\n * @property {Object<string, IHasNameAndId>} mapById   Object mapping with the id as key and the entity as value.\n * @property {Object<string, IHasNameAndId>} mapByName Object mapping with the name as key and the entity as value.\n * @property {string[]}                      names     Array with the entities' names.\n */\n\n/**\n * Returns a helper object with mapping from Objects that implement\n * the `IHasNameAndId` interface. The returned object is used for\n * integration with `FormTokenField` component.\n *\n * @param {IHasNameAndId[]} entities The entities to extract of helper object.\n * @return {QueryEntitiesInfo} The object with the entities information.\n */\nexport const getEntitiesInfo = ( entities ) => {\n\tconst mapping = entities?.reduce(\n\t\t( accumulator, entity ) => {\n\t\t\tconst { mapById, mapByName, names } = accumulator;\n\t\t\tmapById[ entity.id ] = entity;\n\t\t\tmapByName[ entity.name ] = entity;\n\t\t\tnames.push( entity.name );\n\t\t\treturn accumulator;\n\t\t},\n\t\t{ mapById: {}, mapByName: {}, names: [] }\n\t);\n\treturn {\n\t\tentities,\n\t\t...mapping,\n\t};\n};\n\n/**\n * Helper util to return a value from a certain path of the object.\n * Path is specified as a string of properties, separated by dots,\n * for example: \"parent.child\".\n *\n * @param {Object} object Input object.\n * @param {string} path   Path to the object property.\n * @return {*} Value of the object property at the specified path.\n */\nexport const getValueFromObjectPath = ( object, path ) => {\n\tconst normalizedPath = path.split( '.' );\n\tlet value = object;\n\tnormalizedPath.forEach( ( fieldName ) => {\n\t\tvalue = value?.[ fieldName ];\n\t} );\n\treturn value;\n};\n\n/**\n * Helper util to map records to add a `name` prop from a\n * provided path, in order to handle all entities in the same\n * fashion(implementing`IHasNameAndId` interface).\n *\n * @param {Object[]} entities The array of entities.\n * @param {string}   path     The path to map a `name` property from the entity.\n * @return {IHasNameAndId[]} An array of entities that now implement the `IHasNameAndId` interface.\n */\nexport const mapToIHasNameAndId = ( entities, path ) => {\n\treturn ( entities || [] ).map( ( entity ) => ( {\n\t\t...entity,\n\t\tname: decodeEntities( getValueFromObjectPath( entity, path ) ),\n\t} ) );\n};\n\n/**\n * Returns a helper object that contains:\n * 1. An `options` object from the available post types, to be passed to a `SelectControl`.\n * 2. A helper map with available taxonomies per post type.\n * 3. A helper map with post format support per post type.\n *\n * @return {Object} The helper object related to post types.\n */\nexport const usePostTypes = () => {\n\tconst postTypes = useSelect( ( select ) => {\n\t\tconst { getPostTypes } = select( coreStore );\n\t\tconst excludedPostTypes = [ 'attachment' ];\n\t\tconst filteredPostTypes = getPostTypes( { per_page: -1 } )?.filter(\n\t\t\t( { viewable, slug } ) =>\n\t\t\t\tviewable && ! excludedPostTypes.includes( slug )\n\t\t);\n\t\treturn filteredPostTypes;\n\t}, [] );\n\tconst postTypesTaxonomiesMap = useMemo( () => {\n\t\tif ( ! postTypes?.length ) {\n\t\t\treturn;\n\t\t}\n\t\treturn postTypes.reduce( ( accumulator, type ) => {\n\t\t\taccumulator[ type.slug ] = type.taxonomies;\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}, [ postTypes ] );\n\tconst postTypesSelectOptions = useMemo(\n\t\t() =>\n\t\t\t( postTypes || [] ).map( ( { labels, slug } ) => ( {\n\t\t\t\tlabel: labels.singular_name,\n\t\t\t\tvalue: slug,\n\t\t\t} ) ),\n\t\t[ postTypes ]\n\t);\n\tconst postTypeFormatSupportMap = useMemo( () => {\n\t\tif ( ! postTypes?.length ) {\n\t\t\treturn {};\n\t\t}\n\t\treturn postTypes.reduce( ( accumulator, type ) => {\n\t\t\taccumulator[ type.slug ] =\n\t\t\t\ttype.supports?.[ 'post-formats' ] || false;\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}, [ postTypes ] );\n\treturn {\n\t\tpostTypesTaxonomiesMap,\n\t\tpostTypesSelectOptions,\n\t\tpostTypeFormatSupportMap,\n\t};\n};\n\n/**\n * Hook that returns the taxonomies associated with a specific post type.\n *\n * @param {string} postType The post type from which to retrieve the associated taxonomies.\n * @return {Object[]} An array of the associated taxonomies.\n */\nexport const useTaxonomies = ( postType ) => {\n\tconst taxonomies = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getTaxonomies, getPostType } = select( coreStore );\n\t\t\t// Does the post type have taxonomies?\n\t\t\tif ( getPostType( postType )?.taxonomies?.length > 0 ) {\n\t\t\t\treturn getTaxonomies( {\n\t\t\t\t\ttype: postType,\n\t\t\t\t\tper_page: -1,\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn [];\n\t\t},\n\t\t[ postType ]\n\t);\n\treturn useMemo( () => {\n\t\treturn taxonomies?.filter(\n\t\t\t( { visibility } ) => !! visibility?.publicly_queryable\n\t\t);\n\t}, [ taxonomies ] );\n};\n\n/**\n * Hook that returns whether a specific post type is hierarchical.\n *\n * @param {string} postType The post type to check.\n * @return {boolean} Whether a specific post type is hierarchical.\n */\nexport function useIsPostTypeHierarchical( postType ) {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst type = select( coreStore ).getPostType( postType );\n\t\t\treturn type?.viewable && type?.hierarchical;\n\t\t},\n\t\t[ postType ]\n\t);\n}\n\n/**\n * List of avaiable options to order by.\n *\n * @param {string} postType The post type to check.\n * @return {OrderByOption[]} List of order options.\n */\nexport function useOrderByOptions( postType ) {\n\tconst supportsCustomOrder = useSelect(\n\t\t( select ) => {\n\t\t\tconst type = select( coreStore ).getPostType( postType );\n\t\t\treturn !! type?.supports?.[ 'page-attributes' ];\n\t\t},\n\t\t[ postType ]\n\t);\n\n\treturn useMemo( () => {\n\t\tconst orderByOptions = [\n\t\t\t{\n\t\t\t\tlabel: __( 'Newest to oldest' ),\n\t\t\t\tvalue: 'date/desc',\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: __( 'Oldest to newest' ),\n\t\t\t\tvalue: 'date/asc',\n\t\t\t},\n\t\t\t{\n\t\t\t\t/* translators: Label for ordering posts by title in ascending order. */\n\t\t\t\tlabel: __( 'A → Z' ),\n\t\t\t\tvalue: 'title/asc',\n\t\t\t},\n\t\t\t{\n\t\t\t\t/* translators: Label for ordering posts by title in descending order. */\n\t\t\t\tlabel: __( 'Z → A' ),\n\t\t\t\tvalue: 'title/desc',\n\t\t\t},\n\t\t];\n\n\t\tif ( supportsCustomOrder ) {\n\t\t\torderByOptions.push(\n\t\t\t\t{\n\t\t\t\t\t/* translators: Label for ordering posts by ascending menu order. */\n\t\t\t\t\tlabel: __( 'Ascending by order' ),\n\t\t\t\t\tvalue: 'menu_order/asc',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t/* translators: Label for ordering posts by descending menu order. */\n\t\t\t\t\tlabel: __( 'Descending by order' ),\n\t\t\t\t\tvalue: 'menu_order/desc',\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn orderByOptions;\n\t}, [ supportsCustomOrder ] );\n}\n\n/**\n * Hook that returns the query properties' names defined by the active\n * block variation, to determine which block's filters to show.\n *\n * @param {Object} attributes Block attributes.\n * @return {string[]} An array of the query attributes.\n */\nexport function useAllowedControls( attributes ) {\n\treturn useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getActiveBlockVariation(\n\t\t\t\t'core/query',\n\t\t\t\tattributes\n\t\t\t)?.allowedControls,\n\n\t\t[ attributes ]\n\t);\n}\nexport function isControlAllowed( allowedControls, key ) {\n\t// Every controls is allowed if the list is not defined.\n\tif ( ! allowedControls ) {\n\t\treturn true;\n\t}\n\treturn allowedControls.includes( key );\n}\n\n/**\n * Clones a pattern's blocks and then recurses over that list of blocks,\n * transforming them to retain some `query` attribute properties.\n * For now we retain the `postType` and `inherit` properties as they are\n * fundamental for the expected functionality of the block and don't affect\n * its design and presentation.\n *\n * Returns the cloned/transformed blocks and array of existing Query Loop\n * client ids for further manipulation, in order to avoid multiple recursions.\n *\n * @param {WPBlock[]}        blocks               The list of blocks to look through and transform(mutate).\n * @param {Record<string,*>} queryBlockAttributes The existing Query Loop's attributes.\n * @return {{ newBlocks: WPBlock[], queryClientIds: string[] }} An object with the cloned/transformed blocks and all the Query Loop clients from these blocks.\n */\nexport const getTransformedBlocksFromPattern = (\n\tblocks,\n\tqueryBlockAttributes\n) => {\n\tconst {\n\t\tquery: { postType, inherit },\n\t\tnamespace,\n\t} = queryBlockAttributes;\n\tconst clonedBlocks = blocks.map( ( block ) => cloneBlock( block ) );\n\tconst queryClientIds = [];\n\tconst blocksQueue = [ ...clonedBlocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\t\tif ( block.name === 'core/query' ) {\n\t\t\tblock.attributes.query = {\n\t\t\t\t...block.attributes.query,\n\t\t\t\tpostType,\n\t\t\t\tinherit,\n\t\t\t};\n\t\t\tif ( namespace ) {\n\t\t\t\tblock.attributes.namespace = namespace;\n\t\t\t}\n\t\t\tqueryClientIds.push( block.clientId );\n\t\t}\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\treturn { newBlocks: clonedBlocks, queryClientIds };\n};\n\n/**\n * Helper hook that determines if there is an active variation of the block\n * and if there are available specific patterns for this variation.\n * If there are, these patterns are going to be the only ones suggested to\n * the user in setup and replace flow, without including the default ones\n * for Query Loop.\n *\n * If there are no such patterns, the default ones for Query Loop are going\n * to be suggested.\n *\n * @param {string} clientId   The block's client ID.\n * @param {Object} attributes The block's attributes.\n * @return {string} The block name to be used in the patterns suggestions.\n */\nexport function useBlockNameForPatterns( clientId, attributes ) {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst activeVariationName = select(\n\t\t\t\tblocksStore\n\t\t\t).getActiveBlockVariation( 'core/query', attributes )?.name;\n\n\t\t\tif ( ! activeVariationName ) {\n\t\t\t\treturn 'core/query';\n\t\t\t}\n\n\t\t\tconst { getBlockRootClientId, getPatternsByBlockTypes } =\n\t\t\t\tselect( blockEditorStore );\n\n\t\t\tconst rootClientId = getBlockRootClientId( clientId );\n\t\t\tconst activePatterns = getPatternsByBlockTypes(\n\t\t\t\t`core/query/${ activeVariationName }`,\n\t\t\t\trootClientId\n\t\t\t);\n\n\t\t\treturn activePatterns.length > 0\n\t\t\t\t? `core/query/${ activeVariationName }`\n\t\t\t\t: 'core/query';\n\t\t},\n\t\t[ clientId, attributes ]\n\t);\n}\n\n/**\n * Helper hook that determines if there is an active variation of the block\n * and if there are available specific scoped `block` variations connected with\n * this variation.\n *\n * If there are, these variations are going to be the only ones suggested\n * to the user in setup flow when clicking to `start blank`, without including\n * the default ones for Query Loop.\n *\n * If there are no such scoped `block` variations, the default ones for Query\n * Loop are going to be suggested.\n *\n * The way we determine such variations is with the convention that they have the `namespace`\n * attribute defined as an array. This array should contain the names(`name` property) of any\n * variations they want to be connected to.\n * For example, if we have a `Query Loop` scoped `inserter` variation with the name `products`,\n * we can connect a scoped `block` variation by setting its `namespace` attribute to `['products']`.\n * If the user selects this variation, the `namespace` attribute will be overridden by the\n * main `inserter` variation.\n *\n * @param {Object} attributes The block's attributes.\n * @return {WPBlockVariation[]} The block variations to be suggested in setup flow, when clicking to `start blank`.\n */\nexport function useScopedBlockVariations( attributes ) {\n\tconst { activeVariationName, blockVariations } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getActiveBlockVariation, getBlockVariations } =\n\t\t\t\tselect( blocksStore );\n\t\t\treturn {\n\t\t\t\tactiveVariationName: getActiveBlockVariation(\n\t\t\t\t\t'core/query',\n\t\t\t\t\tattributes\n\t\t\t\t)?.name,\n\t\t\t\tblockVariations: getBlockVariations( 'core/query', 'block' ),\n\t\t\t};\n\t\t},\n\t\t[ attributes ]\n\t);\n\tconst variations = useMemo( () => {\n\t\t// Filter out the variations that have defined a `namespace` attribute,\n\t\t// which means they are 'connected' to specific variations of the block.\n\t\tconst isNotConnected = ( variation ) =>\n\t\t\t! variation.attributes?.namespace;\n\t\tif ( ! activeVariationName ) {\n\t\t\treturn blockVariations.filter( isNotConnected );\n\t\t}\n\t\tconst connectedVariations = blockVariations.filter( ( variation ) =>\n\t\t\tvariation.attributes?.namespace?.includes( activeVariationName )\n\t\t);\n\t\tif ( !! connectedVariations.length ) {\n\t\t\treturn connectedVariations;\n\t\t}\n\t\treturn blockVariations.filter( isNotConnected );\n\t}, [ activeVariationName, blockVariations ] );\n\treturn variations;\n}\n\n/**\n * Hook that returns the block patterns for a specific block type.\n *\n * @param {string} clientId The block's client ID.\n * @param {string} name     The block type name.\n * @return {Object[]} An array of valid block patterns.\n */\nexport const usePatterns = ( clientId, name ) => {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockRootClientId, getPatternsByBlockTypes } =\n\t\t\t\tselect( blockEditorStore );\n\t\t\tconst rootClientId = getBlockRootClientId( clientId );\n\t\t\treturn getPatternsByBlockTypes( name, rootClientId );\n\t\t},\n\t\t[ name, clientId ]\n\t);\n};\n\n/**\n * The object returned by useUnsupportedBlocks with info about the type of\n * unsupported blocks present inside the Query block.\n *\n * @typedef  {Object}  UnsupportedBlocksInfo\n * @property {boolean} hasBlocksFromPlugins True if blocks from plugins are present.\n * @property {boolean} hasPostContentBlock  True if a 'core/post-content' block is present.\n * @property {boolean} hasUnsupportedBlocks True if there are any unsupported blocks.\n */\n\n/**\n * Hook that returns an object with information about the unsupported blocks\n * present inside a Query Loop with the given `clientId`. The returned object\n * contains props that are true when a certain type of unsupported block is\n * present.\n *\n * @param {string} clientId The block's client ID.\n * @return {UnsupportedBlocksInfo} The object containing the information.\n */\nexport const useUnsupportedBlocks = ( clientId ) => {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst { getClientIdsOfDescendants, getBlockName } =\n\t\t\t\tselect( blockEditorStore );\n\t\t\tconst blocks = {};\n\t\t\tgetClientIdsOfDescendants( clientId ).forEach(\n\t\t\t\t( descendantClientId ) => {\n\t\t\t\t\tconst blockName = getBlockName( descendantClientId );\n\t\t\t\t\t/*\n\t\t\t\t\t * Client side navigation can be true in two states:\n\t\t\t\t\t *  - supports.interactivity = true;\n\t\t\t\t\t *  - supports.interactivity.clientNavigation = true;\n\t\t\t\t\t */\n\t\t\t\t\tconst blockSupportsInteractivity = Object.is(\n\t\t\t\t\t\tgetBlockSupport( blockName, 'interactivity' ),\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\tconst blockSupportsInteractivityClientNavigation =\n\t\t\t\t\t\tgetBlockSupport(\n\t\t\t\t\t\t\tblockName,\n\t\t\t\t\t\t\t'interactivity.clientNavigation'\n\t\t\t\t\t\t);\n\t\t\t\t\tconst blockInteractivity =\n\t\t\t\t\t\tblockSupportsInteractivity ||\n\t\t\t\t\t\tblockSupportsInteractivityClientNavigation;\n\t\t\t\t\tif ( ! blockInteractivity ) {\n\t\t\t\t\t\tblocks.hasBlocksFromPlugins = true;\n\t\t\t\t\t} else if ( blockName === 'core/post-content' ) {\n\t\t\t\t\t\tblocks.hasPostContentBlock = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tblocks.hasUnsupportedBlocks =\n\t\t\t\tblocks.hasBlocksFromPlugins || blocks.hasPostContentBlock;\n\t\t\treturn blocks;\n\t\t},\n\t\t[ clientId ]\n\t);\n};\n\n/**\n * Helper function that returns the query context from the editor based on the\n * available template slug.\n *\n * @param {string} templateSlug Current template slug based on context.\n * @return {Object} An object with isSingular and templateType properties.\n */\nexport function getQueryContextFromTemplate( templateSlug ) {\n\t// In the Post Editor, the template slug is not available.\n\tif ( ! templateSlug ) {\n\t\treturn { isSingular: true };\n\t}\n\tlet isSingular = false;\n\tlet templateType = templateSlug === 'wp' ? 'custom' : templateSlug;\n\tconst singularTemplates = [ '404', 'blank', 'single', 'page', 'custom' ];\n\tconst templateTypeFromSlug = templateSlug.includes( '-' )\n\t\t? templateSlug.split( '-', 1 )[ 0 ]\n\t\t: templateSlug;\n\tconst queryFromTemplateSlug = templateSlug.includes( '-' )\n\t\t? templateSlug.split( '-' ).slice( 1 ).join( '-' )\n\t\t: '';\n\tif ( queryFromTemplateSlug ) {\n\t\ttemplateType = templateTypeFromSlug;\n\t}\n\tisSingular = singularTemplates.includes( templateType );\n\n\treturn { isSingular, templateType };\n}\n"],"mappings":"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","ignoreList":[]}