{"version":3,"names":["createBlock","create","toHTMLString","getTransformedMetadata","transforms","from","type","regExp","transform","blocks","content","metadata","text","value","isMatch","node","nodeName","children","length","firstChild","schema","pre","code","to"],"sources":["@wordpress/block-library/src/code/transforms.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock } from '@wordpress/blocks';\nimport { create, toHTMLString } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { getTransformedMetadata } from '../utils/get-transformed-metadata';\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'enter',\n\t\t\tregExp: /^```$/,\n\t\t\ttransform: () => createBlock( 'core/code' ),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { content, metadata } ) =>\n\t\t\t\tcreateBlock( 'core/code', {\n\t\t\t\t\tcontent,\n\t\t\t\t\tmetadata: getTransformedMetadata( metadata, 'core/code' ),\n\t\t\t\t} ),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/html' ],\n\t\t\ttransform: ( { content: text, metadata } ) => {\n\t\t\t\treturn createBlock( 'core/code', {\n\t\t\t\t\t// The HTML is plain text (with plain line breaks), so\n\t\t\t\t\t// convert it to rich text.\n\t\t\t\t\tcontent: toHTMLString( { value: create( { text } ) } ),\n\t\t\t\t\tmetadata: getTransformedMetadata( metadata, 'core/code' ),\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'raw',\n\t\t\tisMatch: ( node ) =>\n\t\t\t\tnode.nodeName === 'PRE' &&\n\t\t\t\tnode.children.length === 1 &&\n\t\t\t\tnode.firstChild.nodeName === 'CODE',\n\t\t\tschema: {\n\t\t\t\tpre: {\n\t\t\t\t\tchildren: {\n\t\t\t\t\t\tcode: {\n\t\t\t\t\t\t\tchildren: {\n\t\t\t\t\t\t\t\t'#text': {},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { content, metadata } ) =>\n\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\tcontent,\n\t\t\t\t\tmetadata: getTransformedMetadata(\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\t'core/paragraph'\n\t\t\t\t\t),\n\t\t\t\t} ),\n\t\t},\n\t],\n};\n\nexport default transforms;\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,MAAM,EAAEC,YAAY,QAAQ,sBAAsB;;AAE3D;AACA;AACA;AACA,SAASC,sBAAsB,QAAQ,mCAAmC;AAE1E,MAAMC,UAAU,GAAG;EAClBC,IAAI,EAAE,CACL;IACCC,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,OAAO;IACfC,SAAS,EAAEA,CAAA,KAAMR,WAAW,CAAE,WAAY;EAC3C,CAAC,EACD;IACCM,IAAI,EAAE,OAAO;IACbG,MAAM,EAAE,CAAE,gBAAgB,CAAE;IAC5BD,SAAS,EAAEA,CAAE;MAAEE,OAAO;MAAEC;IAAS,CAAC,KACjCX,WAAW,CAAE,WAAW,EAAE;MACzBU,OAAO;MACPC,QAAQ,EAAER,sBAAsB,CAAEQ,QAAQ,EAAE,WAAY;IACzD,CAAE;EACJ,CAAC,EACD;IACCL,IAAI,EAAE,OAAO;IACbG,MAAM,EAAE,CAAE,WAAW,CAAE;IACvBD,SAAS,EAAEA,CAAE;MAAEE,OAAO,EAAEE,IAAI;MAAED;IAAS,CAAC,KAAM;MAC7C,OAAOX,WAAW,CAAE,WAAW,EAAE;QAChC;QACA;QACAU,OAAO,EAAER,YAAY,CAAE;UAAEW,KAAK,EAAEZ,MAAM,CAAE;YAAEW;UAAK,CAAE;QAAE,CAAE,CAAC;QACtDD,QAAQ,EAAER,sBAAsB,CAAEQ,QAAQ,EAAE,WAAY;MACzD,CAAE,CAAC;IACJ;EACD,CAAC,EACD;IACCL,IAAI,EAAE,KAAK;IACXQ,OAAO,EAAIC,IAAI,IACdA,IAAI,CAACC,QAAQ,KAAK,KAAK,IACvBD,IAAI,CAACE,QAAQ,CAACC,MAAM,KAAK,CAAC,IAC1BH,IAAI,CAACI,UAAU,CAACH,QAAQ,KAAK,MAAM;IACpCI,MAAM,EAAE;MACPC,GAAG,EAAE;QACJJ,QAAQ,EAAE;UACTK,IAAI,EAAE;YACLL,QAAQ,EAAE;cACT,OAAO,EAAE,CAAC;YACX;UACD;QACD;MACD;IACD;EACD,CAAC,CACD;EACDM,EAAE,EAAE,CACH;IACCjB,IAAI,EAAE,OAAO;IACbG,MAAM,EAAE,CAAE,gBAAgB,CAAE;IAC5BD,SAAS,EAAEA,CAAE;MAAEE,OAAO;MAAEC;IAAS,CAAC,KACjCX,WAAW,CAAE,gBAAgB,EAAE;MAC9BU,OAAO;MACPC,QAAQ,EAAER,sBAAsB,CAC/BQ,QAAQ,EACR,gBACD;IACD,CAAE;EACJ,CAAC;AAEH,CAAC;AAED,eAAeP,UAAU","ignoreList":[]}