{"version":3,"names":["useInnerBlocksProps","Disabled","store","coreStore","useSelect","useContext","useEffect","useRef","areBlocksDirty","DEFAULT_BLOCK","SELECT_NAVIGATION_MENUS_ARGS","jsx","_jsx","EMPTY_OBJECT","UnsavedInnerBlocks","blocks","createNavigationMenu","hasSelection","originalBlocksRef","current","innerBlocksAreDirty","isDisabled","Context","innerBlocksProps","className","renderAppender","undefined","defaultBlock","directInsert","isSaving","hasResolvedAllNavigationMenus","select","hasFinishedResolution","isSavingEntityRecord","Wrapper"],"sources":["@wordpress/block-library/src/navigation/edit/unsaved-inner-blocks.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useInnerBlocksProps } from '@wordpress/block-editor';\nimport { Disabled } from '@wordpress/components';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\nimport { useContext, useEffect, useRef } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { areBlocksDirty } from './are-blocks-dirty';\nimport { DEFAULT_BLOCK, SELECT_NAVIGATION_MENUS_ARGS } from '../constants';\n\nconst EMPTY_OBJECT = {};\n\nexport default function UnsavedInnerBlocks( {\n\tblocks,\n\tcreateNavigationMenu,\n\thasSelection,\n} ) {\n\tconst originalBlocksRef = useRef();\n\n\tuseEffect( () => {\n\t\t// Initially store the uncontrolled inner blocks for\n\t\t// dirty state comparison.\n\t\tif ( ! originalBlocksRef?.current ) {\n\t\t\toriginalBlocksRef.current = blocks;\n\t\t}\n\t}, [ blocks ] );\n\n\t// If the current inner blocks are different from the original inner blocks\n\t// from the post content then the user has made changes to the inner blocks.\n\t// At this point the inner blocks can be considered \"dirty\".\n\t// Note: referential equality is not sufficient for comparison as the inner blocks\n\t// of the page list are controlled and may be updated async due to syncing with\n\t// entity records. As a result we need to perform a deep equality check skipping\n\t// the page list's inner blocks.\n\tconst innerBlocksAreDirty = areBlocksDirty(\n\t\toriginalBlocksRef?.current,\n\t\tblocks\n\t);\n\n\t// The block will be disabled in a block preview, use this as a way of\n\t// avoiding the side-effects of this component for block previews.\n\tconst isDisabled = useContext( Disabled.Context );\n\n\tconst innerBlocksProps = useInnerBlocksProps(\n\t\t{\n\t\t\tclassName: 'wp-block-navigation__container',\n\t\t},\n\t\t{\n\t\t\trenderAppender: hasSelection ? undefined : false,\n\t\t\tdefaultBlock: DEFAULT_BLOCK,\n\t\t\tdirectInsert: true,\n\t\t}\n\t);\n\n\tconst { isSaving, hasResolvedAllNavigationMenus } = useSelect(\n\t\t( select ) => {\n\t\t\tif ( isDisabled ) {\n\t\t\t\treturn EMPTY_OBJECT;\n\t\t\t}\n\n\t\t\tconst { hasFinishedResolution, isSavingEntityRecord } =\n\t\t\t\tselect( coreStore );\n\n\t\t\treturn {\n\t\t\t\tisSaving: isSavingEntityRecord( 'postType', 'wp_navigation' ),\n\t\t\t\thasResolvedAllNavigationMenus: hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tSELECT_NAVIGATION_MENUS_ARGS\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[ isDisabled ]\n\t);\n\n\t// Automatically save the uncontrolled blocks.\n\tuseEffect( () => {\n\t\t// The block will be disabled when used in a BlockPreview.\n\t\t// In this case avoid automatic creation of a wp_navigation post.\n\t\t// Otherwise the user will be spammed with lots of menus!\n\t\t//\n\t\t// Also ensure other navigation menus have loaded so an\n\t\t// accurate name can be created.\n\t\t//\n\t\t// Don't try saving when another save is already\n\t\t// in progress.\n\t\t//\n\t\t// And finally only create the menu when the block is selected,\n\t\t// which is an indication they want to start editing.\n\t\tif (\n\t\t\tisDisabled ||\n\t\t\tisSaving ||\n\t\t\t! hasResolvedAllNavigationMenus ||\n\t\t\t! hasSelection ||\n\t\t\t! innerBlocksAreDirty\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tcreateNavigationMenu( null, blocks );\n\t}, [\n\t\tblocks,\n\t\tcreateNavigationMenu,\n\t\tisDisabled,\n\t\tisSaving,\n\t\thasResolvedAllNavigationMenus,\n\t\tinnerBlocksAreDirty,\n\t\thasSelection,\n\t] );\n\n\tconst Wrapper = isSaving ? Disabled : 'div';\n\n\treturn <Wrapper { ...innerBlocksProps } />;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,KAAK,IAAIC,SAAS,QAAQ,sBAAsB;AACzD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,oBAAoB;;AAElE;AACA;AACA;AACA,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,aAAa,EAAEC,4BAA4B,QAAQ,cAAc;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE3E,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,eAAe,SAASC,kBAAkBA,CAAE;EAC3CC,MAAM;EACNC,oBAAoB;EACpBC;AACD,CAAC,EAAG;EACH,MAAMC,iBAAiB,GAAGX,MAAM,CAAC,CAAC;EAElCD,SAAS,CAAE,MAAM;IAChB;IACA;IACA,IAAK,CAAEY,iBAAiB,EAAEC,OAAO,EAAG;MACnCD,iBAAiB,CAACC,OAAO,GAAGJ,MAAM;IACnC;EACD,CAAC,EAAE,CAAEA,MAAM,CAAG,CAAC;;EAEf;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMK,mBAAmB,GAAGZ,cAAc,CACzCU,iBAAiB,EAAEC,OAAO,EAC1BJ,MACD,CAAC;;EAED;EACA;EACA,MAAMM,UAAU,GAAGhB,UAAU,CAAEJ,QAAQ,CAACqB,OAAQ,CAAC;EAEjD,MAAMC,gBAAgB,GAAGvB,mBAAmB,CAC3C;IACCwB,SAAS,EAAE;EACZ,CAAC,EACD;IACCC,cAAc,EAAER,YAAY,GAAGS,SAAS,GAAG,KAAK;IAChDC,YAAY,EAAElB,aAAa;IAC3BmB,YAAY,EAAE;EACf,CACD,CAAC;EAED,MAAM;IAAEC,QAAQ;IAAEC;EAA8B,CAAC,GAAG1B,SAAS,CAC1D2B,MAAM,IAAM;IACb,IAAKV,UAAU,EAAG;MACjB,OAAOR,YAAY;IACpB;IAEA,MAAM;MAAEmB,qBAAqB;MAAEC;IAAqB,CAAC,GACpDF,MAAM,CAAE5B,SAAU,CAAC;IAEpB,OAAO;MACN0B,QAAQ,EAAEI,oBAAoB,CAAE,UAAU,EAAE,eAAgB,CAAC;MAC7DH,6BAA6B,EAAEE,qBAAqB,CACnD,kBAAkB,EAClBtB,4BACD;IACD,CAAC;EACF,CAAC,EACD,CAAEW,UAAU,CACb,CAAC;;EAED;EACAf,SAAS,CAAE,MAAM;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IACCe,UAAU,IACVQ,QAAQ,IACR,CAAEC,6BAA6B,IAC/B,CAAEb,YAAY,IACd,CAAEG,mBAAmB,EACpB;MACD;IACD;IAEAJ,oBAAoB,CAAE,IAAI,EAAED,MAAO,CAAC;EACrC,CAAC,EAAE,CACFA,MAAM,EACNC,oBAAoB,EACpBK,UAAU,EACVQ,QAAQ,EACRC,6BAA6B,EAC7BV,mBAAmB,EACnBH,YAAY,CACX,CAAC;EAEH,MAAMiB,OAAO,GAAGL,QAAQ,GAAG5B,QAAQ,GAAG,KAAK;EAE3C,oBAAOW,IAAA,CAACsB,OAAO;IAAA,GAAMX;EAAgB,CAAI,CAAC;AAC3C","ignoreList":[]}