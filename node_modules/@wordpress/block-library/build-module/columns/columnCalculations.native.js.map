{"version":3,"names":["ALIGNMENT_BREAKPOINTS","convertUnitToMobile","getColumnWidths","getWidths","styles","MAX_COLUMNS_NUM_IN_ROW","MIN_WIDTH","columnsContainer","minWidth","MARGIN","marginLeft","getColumnsInRow","width","columnCount","mobile","medium","Math","min","max","calculateContainerWidth","containerWidth","columnsInRow","getContentWidths","innerColumns","globalStyles","widths","columnWidthsWithUnits","columnWidths","columnWidthsValues","map","v","columnWidthsSum","reduce","acc","curr","columnRatios","colWidth","columnWidthsPerRatio","columnRatio","filteredColumnWidthsPerRatio","filter","columnWidthPerRatio","baseContainerWidth","length","minPercentageRatio","largeColumnsWidthsSum","ratio","index","columnWidth","maxColumnWidth","forEach","attributes","innerColumnAttributes","clientId","attributeWidth","proportionalRatio","percentageRatio","initialColumnWidth","round","newColumnWidth","floor","maxWidth"],"sources":["@wordpress/block-library/src/columns/columnCalculations.native.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tALIGNMENT_BREAKPOINTS,\n\tconvertUnitToMobile,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { getColumnWidths, getWidths } from './utils';\nimport styles from './editor.scss';\n\n/**\n * Maximum number of columns in a row\n *\n * @type {number}\n */\nconst MAX_COLUMNS_NUM_IN_ROW = 3;\n\n/**\n * Minimum width of column\n *\n * @type {number}\n */\nconst MIN_WIDTH = styles.columnsContainer?.minWidth;\n\n/**\n * Container margin value\n *\n * @type {number}\n */\nconst MARGIN = styles.columnsContainer?.marginLeft;\n\nexport const getColumnsInRow = ( width, columnCount ) => {\n\tif ( width ) {\n\t\tif ( width < ALIGNMENT_BREAKPOINTS.mobile ) {\n\t\t\t// show only 1 Column in row for mobile breakpoint container width\n\t\t\treturn 1;\n\t\t} else if ( width <= ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t// show the maximum number of columns in a row for large breakpoint container width\n\t\t\treturn Math.min(\n\t\t\t\tMath.max( 1, columnCount ),\n\t\t\t\tMAX_COLUMNS_NUM_IN_ROW\n\t\t\t);\n\t\t}\n\t\t// Show all Column in one row.\n\t\treturn columnCount;\n\t}\n};\n\nexport const calculateContainerWidth = ( containerWidth, columnsInRow ) =>\n\t2 * MARGIN + containerWidth - columnsInRow * 2 * MARGIN;\n\nexport const getContentWidths = (\n\tcolumnsInRow,\n\twidth,\n\tcolumnCount,\n\tinnerColumns,\n\tglobalStyles\n) => {\n\tconst widths = {};\n\tconst columnWidthsWithUnits = getWidths( innerColumns, false );\n\tconst columnWidths = getColumnWidths( innerColumns, columnCount );\n\n\t// Array of column width attribute values\n\tconst columnWidthsValues = columnWidthsWithUnits.map( ( v ) =>\n\t\tconvertUnitToMobile( { width }, globalStyles, v )\n\t);\n\n\t// The sum of column width attribute values\n\tconst columnWidthsSum = columnWidthsValues.reduce(\n\t\t( acc, curr ) => acc + curr,\n\t\t0\n\t);\n\n\t// Array of ratios of each column width attribute value to their sum\n\tconst columnRatios = columnWidthsValues.map(\n\t\t( colWidth ) => colWidth / columnWidthsSum\n\t);\n\n\t// Array of calculated column width for its ratio\n\tconst columnWidthsPerRatio = columnRatios.map(\n\t\t( columnRatio ) =>\n\t\t\tcolumnRatio * calculateContainerWidth( width, columnsInRow )\n\t);\n\n\t//  Array of columns whose calculated width is lower than minimum width value\n\tconst filteredColumnWidthsPerRatio = columnWidthsPerRatio.filter(\n\t\t( columnWidthPerRatio ) => columnWidthPerRatio <= MIN_WIDTH\n\t);\n\n\t// Container width to be divided. If there are some results within `filteredColumnWidthsPerRatio`\n\t// there is a need to reduce the main width by multiplying number\n\t// of results in `filteredColumnWidthsPerRatio` and minimum width value\n\tconst baseContainerWidth =\n\t\twidth - filteredColumnWidthsPerRatio.length * MIN_WIDTH;\n\n\t// The minimum percentage ratio for which column width is equal minimum width value\n\tconst minPercentageRatio =\n\t\tMIN_WIDTH / calculateContainerWidth( width, columnsInRow );\n\n\t// The sum of column widths which ratio is higher than `minPercentageRatio`\n\tconst largeColumnsWidthsSum = columnRatios\n\t\t.map( ( ratio, index ) => {\n\t\t\tif ( ratio > minPercentageRatio ) {\n\t\t\t\treturn columnWidthsValues[ index ];\n\t\t\t}\n\t\t\treturn 0;\n\t\t} )\n\t\t.reduce( ( acc, curr ) => acc + curr, 0 );\n\n\tconst containerWidth = calculateContainerWidth(\n\t\tbaseContainerWidth,\n\t\tcolumnsInRow\n\t);\n\n\tlet columnWidth =\n\t\tcalculateContainerWidth( width, columnsInRow ) / columnsInRow;\n\tlet maxColumnWidth = columnWidth;\n\n\tinnerColumns.forEach(\n\t\t( { attributes: innerColumnAttributes, clientId } ) => {\n\t\t\tconst attributeWidth = convertUnitToMobile(\n\t\t\t\t{ width },\n\t\t\t\tglobalStyles,\n\t\t\t\tinnerColumnAttributes.width || columnWidths[ clientId ]\n\t\t\t);\n\t\t\tconst proportionalRatio = attributeWidth / columnWidthsSum;\n\t\t\tconst percentageRatio = attributeWidth / width;\n\t\t\tconst initialColumnWidth = proportionalRatio * containerWidth;\n\n\t\t\tif ( columnCount === 1 && width > ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t\t// Exactly one column inside columns on the breakpoint higher than medium\n\t\t\t\t// has to take a percentage of the full width\n\t\t\t\tcolumnWidth = percentageRatio * containerWidth;\n\t\t\t} else if ( columnsInRow > 1 ) {\n\t\t\t\tif ( width > ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t\t\tif ( initialColumnWidth <= MIN_WIDTH ) {\n\t\t\t\t\t\t// Column width cannot be lower than minimum 32px\n\t\t\t\t\t\tcolumnWidth = MIN_WIDTH;\n\t\t\t\t\t} else if ( initialColumnWidth > MIN_WIDTH ) {\n\t\t\t\t\t\t// Column width has to be the result of multiplying the container width and\n\t\t\t\t\t\t// the ratio of attribute and the sum of widths of columns wider than 32px\n\t\t\t\t\t\tcolumnWidth =\n\t\t\t\t\t\t\t( attributeWidth / largeColumnsWidthsSum ) *\n\t\t\t\t\t\t\tcontainerWidth;\n\t\t\t\t\t}\n\n\t\t\t\t\tmaxColumnWidth = columnWidth;\n\n\t\t\t\t\tif ( Math.round( columnWidthsSum ) < width ) {\n\t\t\t\t\t\t// In case that column width attribute values does not exceed 100, each column\n\t\t\t\t\t\t// should have attribute percentage of container width\n\t\t\t\t\t\tconst newColumnWidth = percentageRatio * containerWidth;\n\t\t\t\t\t\tif ( newColumnWidth <= MIN_WIDTH ) {\n\t\t\t\t\t\t\tcolumnWidth = MIN_WIDTH;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcolumnWidth = newColumnWidth;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( width < ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t\t\t// On the breakpoint lower than medium each column inside columns\n\t\t\t\t\t// has to take equal part of container width\n\t\t\t\t\tcolumnWidth =\n\t\t\t\t\t\tcalculateContainerWidth( width, columnsInRow ) /\n\t\t\t\t\t\tcolumnsInRow;\n\t\t\t\t}\n\t\t\t}\n\t\t\twidths[ clientId ] = {\n\t\t\t\twidth: Math.floor( columnWidth ),\n\t\t\t\tmaxWidth: Math.floor( maxColumnWidth ),\n\t\t\t};\n\t\t}\n\t);\n\treturn widths;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SACCA,qBAAqB,EACrBC,mBAAmB,QACb,uBAAuB;;AAE9B;AACA;AACA;AACA,SAASC,eAAe,EAAEC,SAAS,QAAQ,SAAS;AACpD,OAAOC,MAAM,MAAM,eAAe;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGF,MAAM,CAACG,gBAAgB,EAAEC,QAAQ;;AAEnD;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGL,MAAM,CAACG,gBAAgB,EAAEG,UAAU;AAElD,OAAO,MAAMC,eAAe,GAAGA,CAAEC,KAAK,EAAEC,WAAW,KAAM;EACxD,IAAKD,KAAK,EAAG;IACZ,IAAKA,KAAK,GAAGZ,qBAAqB,CAACc,MAAM,EAAG;MAC3C;MACA,OAAO,CAAC;IACT,CAAC,MAAM,IAAKF,KAAK,IAAIZ,qBAAqB,CAACe,MAAM,EAAG;MACnD;MACA,OAAOC,IAAI,CAACC,GAAG,CACdD,IAAI,CAACE,GAAG,CAAE,CAAC,EAAEL,WAAY,CAAC,EAC1BR,sBACD,CAAC;IACF;IACA;IACA,OAAOQ,WAAW;EACnB;AACD,CAAC;AAED,OAAO,MAAMM,uBAAuB,GAAGA,CAAEC,cAAc,EAAEC,YAAY,KACpE,CAAC,GAAGZ,MAAM,GAAGW,cAAc,GAAGC,YAAY,GAAG,CAAC,GAAGZ,MAAM;AAExD,OAAO,MAAMa,gBAAgB,GAAGA,CAC/BD,YAAY,EACZT,KAAK,EACLC,WAAW,EACXU,YAAY,EACZC,YAAY,KACR;EACJ,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,qBAAqB,GAAGvB,SAAS,CAAEoB,YAAY,EAAE,KAAM,CAAC;EAC9D,MAAMI,YAAY,GAAGzB,eAAe,CAAEqB,YAAY,EAAEV,WAAY,CAAC;;EAEjE;EACA,MAAMe,kBAAkB,GAAGF,qBAAqB,CAACG,GAAG,CAAIC,CAAC,IACxD7B,mBAAmB,CAAE;IAAEW;EAAM,CAAC,EAAEY,YAAY,EAAEM,CAAE,CACjD,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGH,kBAAkB,CAACI,MAAM,CAChD,CAAEC,GAAG,EAAEC,IAAI,KAAMD,GAAG,GAAGC,IAAI,EAC3B,CACD,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGP,kBAAkB,CAACC,GAAG,CACxCO,QAAQ,IAAMA,QAAQ,GAAGL,eAC5B,CAAC;;EAED;EACA,MAAMM,oBAAoB,GAAGF,YAAY,CAACN,GAAG,CAC1CS,WAAW,IACZA,WAAW,GAAGnB,uBAAuB,CAAEP,KAAK,EAAES,YAAa,CAC7D,CAAC;;EAED;EACA,MAAMkB,4BAA4B,GAAGF,oBAAoB,CAACG,MAAM,CAC7DC,mBAAmB,IAAMA,mBAAmB,IAAInC,SACnD,CAAC;;EAED;EACA;EACA;EACA,MAAMoC,kBAAkB,GACvB9B,KAAK,GAAG2B,4BAA4B,CAACI,MAAM,GAAGrC,SAAS;;EAExD;EACA,MAAMsC,kBAAkB,GACvBtC,SAAS,GAAGa,uBAAuB,CAAEP,KAAK,EAAES,YAAa,CAAC;;EAE3D;EACA,MAAMwB,qBAAqB,GAAGV,YAAY,CACxCN,GAAG,CAAE,CAAEiB,KAAK,EAAEC,KAAK,KAAM;IACzB,IAAKD,KAAK,GAAGF,kBAAkB,EAAG;MACjC,OAAOhB,kBAAkB,CAAEmB,KAAK,CAAE;IACnC;IACA,OAAO,CAAC;EACT,CAAE,CAAC,CACFf,MAAM,CAAE,CAAEC,GAAG,EAAEC,IAAI,KAAMD,GAAG,GAAGC,IAAI,EAAE,CAAE,CAAC;EAE1C,MAAMd,cAAc,GAAGD,uBAAuB,CAC7CuB,kBAAkB,EAClBrB,YACD,CAAC;EAED,IAAI2B,WAAW,GACd7B,uBAAuB,CAAEP,KAAK,EAAES,YAAa,CAAC,GAAGA,YAAY;EAC9D,IAAI4B,cAAc,GAAGD,WAAW;EAEhCzB,YAAY,CAAC2B,OAAO,CACnB,CAAE;IAAEC,UAAU,EAAEC,qBAAqB;IAAEC;EAAS,CAAC,KAAM;IACtD,MAAMC,cAAc,GAAGrD,mBAAmB,CACzC;MAAEW;IAAM,CAAC,EACTY,YAAY,EACZ4B,qBAAqB,CAACxC,KAAK,IAAIe,YAAY,CAAE0B,QAAQ,CACtD,CAAC;IACD,MAAME,iBAAiB,GAAGD,cAAc,GAAGvB,eAAe;IAC1D,MAAMyB,eAAe,GAAGF,cAAc,GAAG1C,KAAK;IAC9C,MAAM6C,kBAAkB,GAAGF,iBAAiB,GAAGnC,cAAc;IAE7D,IAAKP,WAAW,KAAK,CAAC,IAAID,KAAK,GAAGZ,qBAAqB,CAACe,MAAM,EAAG;MAChE;MACA;MACAiC,WAAW,GAAGQ,eAAe,GAAGpC,cAAc;IAC/C,CAAC,MAAM,IAAKC,YAAY,GAAG,CAAC,EAAG;MAC9B,IAAKT,KAAK,GAAGZ,qBAAqB,CAACe,MAAM,EAAG;QAC3C,IAAK0C,kBAAkB,IAAInD,SAAS,EAAG;UACtC;UACA0C,WAAW,GAAG1C,SAAS;QACxB,CAAC,MAAM,IAAKmD,kBAAkB,GAAGnD,SAAS,EAAG;UAC5C;UACA;UACA0C,WAAW,GACRM,cAAc,GAAGT,qBAAqB,GACxCzB,cAAc;QAChB;QAEA6B,cAAc,GAAGD,WAAW;QAE5B,IAAKhC,IAAI,CAAC0C,KAAK,CAAE3B,eAAgB,CAAC,GAAGnB,KAAK,EAAG;UAC5C;UACA;UACA,MAAM+C,cAAc,GAAGH,eAAe,GAAGpC,cAAc;UACvD,IAAKuC,cAAc,IAAIrD,SAAS,EAAG;YAClC0C,WAAW,GAAG1C,SAAS;UACxB,CAAC,MAAM;YACN0C,WAAW,GAAGW,cAAc;UAC7B;QACD;MACD,CAAC,MAAM,IAAK/C,KAAK,GAAGZ,qBAAqB,CAACe,MAAM,EAAG;QAClD;QACA;QACAiC,WAAW,GACV7B,uBAAuB,CAAEP,KAAK,EAAES,YAAa,CAAC,GAC9CA,YAAY;MACd;IACD;IACAI,MAAM,CAAE4B,QAAQ,CAAE,GAAG;MACpBzC,KAAK,EAAEI,IAAI,CAAC4C,KAAK,CAAEZ,WAAY,CAAC;MAChCa,QAAQ,EAAE7C,IAAI,CAAC4C,KAAK,CAAEX,cAAe;IACtC,CAAC;EACF,CACD,CAAC;EACD,OAAOxB,MAAM;AACd,CAAC","ignoreList":[]}