{"version":3,"names":["escapeHTML","safeDecodeURI","updateAttributes","updatedValue","setAttributes","blockAttributes","label","originalLabel","kind","originalKind","type","originalType","title","newLabel","url","newUrl","opensInNewTab","id","newKind","newType","newLabelWithoutHttp","replace","newUrlWithoutHttp","useNewLabel","isBuiltInType","indexOf","isCustomLink","encodeURI","undefined","Number","isInteger"],"sources":["@wordpress/block-library/src/navigation-link/update-attributes.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { escapeHTML } from '@wordpress/escape-html';\nimport { safeDecodeURI } from '@wordpress/url';\n\n/**\n * @typedef {'post-type'|'custom'|'taxonomy'|'post-type-archive'} WPNavigationLinkKind\n */\n/**\n * Navigation Link Block Attributes\n *\n * @typedef {Object} WPNavigationLinkBlockAttributes\n *\n * @property {string}               [label]         Link text.\n * @property {WPNavigationLinkKind} [kind]          Kind is used to differentiate between term and post ids to check post draft status.\n * @property {string}               [type]          The type such as post, page, tag, category and other custom types.\n * @property {string}               [rel]           The relationship of the linked URL.\n * @property {number}               [id]            A post or term id.\n * @property {boolean}              [opensInNewTab] Sets link target to _blank when true.\n * @property {string}               [url]           Link href.\n */\n/**\n * Link Control onChange handler that updates block attributes when a setting is changed.\n *\n * @param {Object}                          updatedValue    New block attributes to update.\n * @param {Function}                        setAttributes   Block attribute update function.\n * @param {WPNavigationLinkBlockAttributes} blockAttributes Current block attributes.\n */\n\nexport const updateAttributes = (\n\tupdatedValue = {},\n\tsetAttributes,\n\tblockAttributes = {}\n) => {\n\tconst {\n\t\tlabel: originalLabel = '',\n\t\tkind: originalKind = '',\n\t\ttype: originalType = '',\n\t} = blockAttributes;\n\n\tconst {\n\t\ttitle: newLabel = '', // the title of any provided Post.\n\t\turl: newUrl = '',\n\t\topensInNewTab,\n\t\tid,\n\t\tkind: newKind = originalKind,\n\t\ttype: newType = originalType,\n\t} = updatedValue;\n\n\tconst newLabelWithoutHttp = newLabel.replace( /http(s?):\\/\\//gi, '' );\n\tconst newUrlWithoutHttp = newUrl.replace( /http(s?):\\/\\//gi, '' );\n\n\tconst useNewLabel =\n\t\tnewLabel &&\n\t\tnewLabel !== originalLabel &&\n\t\t// LinkControl without the title field relies\n\t\t// on the check below. Specifically, it assumes that\n\t\t// the URL is the same as a title.\n\t\t// This logic a) looks suspicious and b) should really\n\t\t// live in the LinkControl and not here. It's a great\n\t\t// candidate for future refactoring.\n\t\tnewLabelWithoutHttp !== newUrlWithoutHttp;\n\n\t// Unfortunately this causes the escaping model to be inverted.\n\t// The escaped content is stored in the block attributes (and ultimately in the database),\n\t// and then the raw data is \"recovered\" when outputting into the DOM.\n\t// It would be preferable to store the **raw** data in the block attributes and escape it in JS.\n\t// Why? Because there isn't one way to escape data. Depending on the context, you need to do\n\t// different transforms. It doesn't make sense to me to choose one of them for the purposes of storage.\n\t// See also:\n\t// - https://github.com/WordPress/gutenberg/pull/41063\n\t// - https://github.com/WordPress/gutenberg/pull/18617.\n\tconst label = useNewLabel\n\t\t? escapeHTML( newLabel )\n\t\t: originalLabel || escapeHTML( newUrlWithoutHttp );\n\n\t// In https://github.com/WordPress/gutenberg/pull/24670 we decided to use \"tag\" in favor of \"post_tag\"\n\tconst type = newType === 'post_tag' ? 'tag' : newType.replace( '-', '_' );\n\n\tconst isBuiltInType =\n\t\t[ 'post', 'page', 'tag', 'category' ].indexOf( type ) > -1;\n\n\tconst isCustomLink =\n\t\t( ! newKind && ! isBuiltInType ) || newKind === 'custom';\n\tconst kind = isCustomLink ? 'custom' : newKind;\n\n\tsetAttributes( {\n\t\t// Passed `url` may already be encoded. To prevent double encoding, decodeURI is executed to revert to the original string.\n\t\t...( newUrl && { url: encodeURI( safeDecodeURI( newUrl ) ) } ),\n\t\t...( label && { label } ),\n\t\t...( undefined !== opensInNewTab && { opensInNewTab } ),\n\t\t...( id && Number.isInteger( id ) && { id } ),\n\t\t...( kind && { kind } ),\n\t\t...( type && type !== 'URL' && { type } ),\n\t} );\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,wBAAwB;AACnD,SAASC,aAAa,QAAQ,gBAAgB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAGA,CAC/BC,YAAY,GAAG,CAAC,CAAC,EACjBC,aAAa,EACbC,eAAe,GAAG,CAAC,CAAC,KAChB;EACJ,MAAM;IACLC,KAAK,EAAEC,aAAa,GAAG,EAAE;IACzBC,IAAI,EAAEC,YAAY,GAAG,EAAE;IACvBC,IAAI,EAAEC,YAAY,GAAG;EACtB,CAAC,GAAGN,eAAe;EAEnB,MAAM;IACLO,KAAK,EAAEC,QAAQ,GAAG,EAAE;IAAE;IACtBC,GAAG,EAAEC,MAAM,GAAG,EAAE;IAChBC,aAAa;IACbC,EAAE;IACFT,IAAI,EAAEU,OAAO,GAAGT,YAAY;IAC5BC,IAAI,EAAES,OAAO,GAAGR;EACjB,CAAC,GAAGR,YAAY;EAEhB,MAAMiB,mBAAmB,GAAGP,QAAQ,CAACQ,OAAO,CAAE,iBAAiB,EAAE,EAAG,CAAC;EACrE,MAAMC,iBAAiB,GAAGP,MAAM,CAACM,OAAO,CAAE,iBAAiB,EAAE,EAAG,CAAC;EAEjE,MAAME,WAAW,GAChBV,QAAQ,IACRA,QAAQ,KAAKN,aAAa;EAC1B;EACA;EACA;EACA;EACA;EACA;EACAa,mBAAmB,KAAKE,iBAAiB;;EAE1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMhB,KAAK,GAAGiB,WAAW,GACtBvB,UAAU,CAAEa,QAAS,CAAC,GACtBN,aAAa,IAAIP,UAAU,CAAEsB,iBAAkB,CAAC;;EAEnD;EACA,MAAMZ,IAAI,GAAGS,OAAO,KAAK,UAAU,GAAG,KAAK,GAAGA,OAAO,CAACE,OAAO,CAAE,GAAG,EAAE,GAAI,CAAC;EAEzE,MAAMG,aAAa,GAClB,CAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,CAAE,CAACC,OAAO,CAAEf,IAAK,CAAC,GAAG,CAAC,CAAC;EAE3D,MAAMgB,YAAY,GACf,CAAER,OAAO,IAAI,CAAEM,aAAa,IAAMN,OAAO,KAAK,QAAQ;EACzD,MAAMV,IAAI,GAAGkB,YAAY,GAAG,QAAQ,GAAGR,OAAO;EAE9Cd,aAAa,CAAE;IACd;IACA,IAAKW,MAAM,IAAI;MAAED,GAAG,EAAEa,SAAS,CAAE1B,aAAa,CAAEc,MAAO,CAAE;IAAE,CAAC,CAAE;IAC9D,IAAKT,KAAK,IAAI;MAAEA;IAAM,CAAC,CAAE;IACzB,IAAKsB,SAAS,KAAKZ,aAAa,IAAI;MAAEA;IAAc,CAAC,CAAE;IACvD,IAAKC,EAAE,IAAIY,MAAM,CAACC,SAAS,CAAEb,EAAG,CAAC,IAAI;MAAEA;IAAG,CAAC,CAAE;IAC7C,IAAKT,IAAI,IAAI;MAAEA;IAAK,CAAC,CAAE;IACvB,IAAKE,IAAI,IAAIA,IAAI,KAAK,KAAK,IAAI;MAAEA;IAAK,CAAC;EACxC,CAAE,CAAC;AACJ,CAAC","ignoreList":[]}