{"version":3,"names":["_clsx","_interopRequireDefault","require","_i18n","_element","_blockEditor","_blocks","_coreData","_wordcount","_jsxRuntime","AVERAGE_READING_RATE","PostTimeToReadEdit","attributes","setAttributes","context","textAlign","postId","postType","contentStructure","useEntityProp","blocks","useEntityBlockEditor","id","minutesToReadString","useMemo","content","Function","__unstableSerializeAndClean","wordCountType","_x","minutesToRead","Math","max","round","wordCount","sprintf","_n","blockProps","useBlockProps","className","clsx","jsxs","Fragment","children","jsx","BlockControls","group","AlignmentControl","value","onChange","nextAlign","_default","exports","default"],"sources":["@wordpress/block-library/src/post-time-to-read/edit.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport clsx from 'clsx';\n\n/**\n * WordPress dependencies\n */\nimport { _x, _n, sprintf } from '@wordpress/i18n';\nimport { useMemo } from '@wordpress/element';\nimport {\n\tAlignmentControl,\n\tBlockControls,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { __unstableSerializeAndClean } from '@wordpress/blocks';\nimport { useEntityProp, useEntityBlockEditor } from '@wordpress/core-data';\nimport { count as wordCount } from '@wordpress/wordcount';\n\n/**\n * Average reading rate - based on average taken from\n * https://irisreading.com/average-reading-speed-in-various-languages/\n * (Characters/minute used for Chinese rather than words).\n */\nconst AVERAGE_READING_RATE = 189;\n\nfunction PostTimeToReadEdit( { attributes, setAttributes, context } ) {\n\tconst { textAlign } = attributes;\n\tconst { postId, postType } = context;\n\n\tconst [ contentStructure ] = useEntityProp(\n\t\t'postType',\n\t\tpostType,\n\t\t'content',\n\t\tpostId\n\t);\n\n\tconst [ blocks ] = useEntityBlockEditor( 'postType', postType, {\n\t\tid: postId,\n\t} );\n\n\tconst minutesToReadString = useMemo( () => {\n\t\t// Replicates the logic found in getEditedPostContent().\n\t\tlet content;\n\t\tif ( contentStructure instanceof Function ) {\n\t\t\tcontent = contentStructure( { blocks } );\n\t\t} else if ( blocks ) {\n\t\t\t// If we have parsed blocks already, they should be our source of truth.\n\t\t\t// Parsing applies block deprecations and legacy block conversions that\n\t\t\t// unparsed content will not have.\n\t\t\tcontent = __unstableSerializeAndClean( blocks );\n\t\t} else {\n\t\t\tcontent = contentStructure;\n\t\t}\n\n\t\t/*\n\t\t * translators: If your word count is based on single characters (e.g. East Asian characters),\n\t\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\n\t\t * Do not translate into your own language.\n\t\t */\n\t\tconst wordCountType = _x(\n\t\t\t'words',\n\t\t\t'Word count type. Do not translate!'\n\t\t);\n\n\t\tconst minutesToRead = Math.max(\n\t\t\t1,\n\t\t\tMath.round(\n\t\t\t\twordCount( content || '', wordCountType ) / AVERAGE_READING_RATE\n\t\t\t)\n\t\t);\n\n\t\treturn sprintf(\n\t\t\t/* translators: %s: the number of minutes to read the post. */\n\t\t\t_n( '%s minute', '%s minutes', minutesToRead ),\n\t\t\tminutesToRead\n\t\t);\n\t}, [ contentStructure, blocks ] );\n\n\tconst blockProps = useBlockProps( {\n\t\tclassName: clsx( {\n\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t} ),\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls group=\"block\">\n\t\t\t\t<AlignmentControl\n\t\t\t\t\tvalue={ textAlign }\n\t\t\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<div { ...blockProps }>{ minutesToReadString }</div>\n\t\t</>\n\t);\n}\n\nexport default PostTimeToReadEdit;\n"],"mappings":";;;;;;;AAGA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AAKA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAKA,IAAAI,OAAA,GAAAJ,OAAA;AACA,IAAAK,SAAA,GAAAL,OAAA;AACA,IAAAM,UAAA,GAAAN,OAAA;AAA0D,IAAAO,WAAA,GAAAP,OAAA;AAjB1D;AACA;AACA;;AAGA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA,GACA,MAAMQ,oBAAoB,GAAG,GAAG;AAEhC,SAASC,kBAAkBA,CAAE;EAAEC,UAAU;EAAEC,aAAa;EAAEC;AAAQ,CAAC,EAAG;EACrE,MAAM;IAAEC;EAAU,CAAC,GAAGH,UAAU;EAChC,MAAM;IAAEI,MAAM;IAAEC;EAAS,CAAC,GAAGH,OAAO;EAEpC,MAAM,CAAEI,gBAAgB,CAAE,GAAG,IAAAC,uBAAa,EACzC,UAAU,EACVF,QAAQ,EACR,SAAS,EACTD,MACD,CAAC;EAED,MAAM,CAAEI,MAAM,CAAE,GAAG,IAAAC,8BAAoB,EAAE,UAAU,EAAEJ,QAAQ,EAAE;IAC9DK,EAAE,EAAEN;EACL,CAAE,CAAC;EAEH,MAAMO,mBAAmB,GAAG,IAAAC,gBAAO,EAAE,MAAM;IAC1C;IACA,IAAIC,OAAO;IACX,IAAKP,gBAAgB,YAAYQ,QAAQ,EAAG;MAC3CD,OAAO,GAAGP,gBAAgB,CAAE;QAAEE;MAAO,CAAE,CAAC;IACzC,CAAC,MAAM,IAAKA,MAAM,EAAG;MACpB;MACA;MACA;MACAK,OAAO,GAAG,IAAAE,mCAA2B,EAAEP,MAAO,CAAC;IAChD,CAAC,MAAM;MACNK,OAAO,GAAGP,gBAAgB;IAC3B;;IAEA;AACF;AACA;AACA;AACA;IACE,MAAMU,aAAa,GAAG,IAAAC,QAAE,EACvB,OAAO,EACP,oCACD,CAAC;IAED,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAC7B,CAAC,EACDD,IAAI,CAACE,KAAK,CACT,IAAAC,gBAAS,EAAET,OAAO,IAAI,EAAE,EAAEG,aAAc,CAAC,GAAGlB,oBAC7C,CACD,CAAC;IAED,OAAO,IAAAyB,aAAO,EACb;IACA,IAAAC,QAAE,EAAE,WAAW,EAAE,YAAY,EAAEN,aAAc,CAAC,EAC9CA,aACD,CAAC;EACF,CAAC,EAAE,CAAEZ,gBAAgB,EAAEE,MAAM,CAAG,CAAC;EAEjC,MAAMiB,UAAU,GAAG,IAAAC,0BAAa,EAAE;IACjCC,SAAS,EAAE,IAAAC,aAAI,EAAE;MAChB,CAAE,kBAAmBzB,SAAS,EAAG,GAAIA;IACtC,CAAE;EACH,CAAE,CAAC;EAEH,oBACC,IAAAN,WAAA,CAAAgC,IAAA,EAAAhC,WAAA,CAAAiC,QAAA;IAAAC,QAAA,gBACC,IAAAlC,WAAA,CAAAmC,GAAA,EAACvC,YAAA,CAAAwC,aAAa;MAACC,KAAK,EAAC,OAAO;MAAAH,QAAA,eAC3B,IAAAlC,WAAA,CAAAmC,GAAA,EAACvC,YAAA,CAAA0C,gBAAgB;QAChBC,KAAK,EAAGjC,SAAW;QACnBkC,QAAQ,EAAKC,SAAS,IAAM;UAC3BrC,aAAa,CAAE;YAAEE,SAAS,EAAEmC;UAAU,CAAE,CAAC;QAC1C;MAAG,CACH;IAAC,CACY,CAAC,eAChB,IAAAzC,WAAA,CAAAmC,GAAA;MAAA,GAAUP,UAAU;MAAAM,QAAA,EAAKpB;IAAmB,CAAO,CAAC;EAAA,CACnD,CAAC;AAEL;AAAC,IAAA4B,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEc1C,kBAAkB","ignoreList":[]}