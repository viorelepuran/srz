{"version":3,"names":["_blocks","require","_richText","_getTransformedMetadata","transforms","from","type","regExp","transform","createBlock","blocks","content","metadata","getTransformedMetadata","text","toHTMLString","value","create","isMatch","node","nodeName","children","length","firstChild","schema","pre","code","to","_default","exports","default"],"sources":["@wordpress/block-library/src/code/transforms.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock } from '@wordpress/blocks';\nimport { create, toHTMLString } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { getTransformedMetadata } from '../utils/get-transformed-metadata';\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'enter',\n\t\t\tregExp: /^```$/,\n\t\t\ttransform: () => createBlock( 'core/code' ),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { content, metadata } ) =>\n\t\t\t\tcreateBlock( 'core/code', {\n\t\t\t\t\tcontent,\n\t\t\t\t\tmetadata: getTransformedMetadata( metadata, 'core/code' ),\n\t\t\t\t} ),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/html' ],\n\t\t\ttransform: ( { content: text, metadata } ) => {\n\t\t\t\treturn createBlock( 'core/code', {\n\t\t\t\t\t// The HTML is plain text (with plain line breaks), so\n\t\t\t\t\t// convert it to rich text.\n\t\t\t\t\tcontent: toHTMLString( { value: create( { text } ) } ),\n\t\t\t\t\tmetadata: getTransformedMetadata( metadata, 'core/code' ),\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'raw',\n\t\t\tisMatch: ( node ) =>\n\t\t\t\tnode.nodeName === 'PRE' &&\n\t\t\t\tnode.children.length === 1 &&\n\t\t\t\tnode.firstChild.nodeName === 'CODE',\n\t\t\tschema: {\n\t\t\t\tpre: {\n\t\t\t\t\tchildren: {\n\t\t\t\t\t\tcode: {\n\t\t\t\t\t\t\tchildren: {\n\t\t\t\t\t\t\t\t'#text': {},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { content, metadata } ) =>\n\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\tcontent,\n\t\t\t\t\tmetadata: getTransformedMetadata(\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\t'core/paragraph'\n\t\t\t\t\t),\n\t\t\t\t} ),\n\t\t},\n\t],\n};\n\nexport default transforms;\n"],"mappings":";;;;;;AAGA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAKA,IAAAE,uBAAA,GAAAF,OAAA;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA,MAAMG,UAAU,GAAG;EAClBC,IAAI,EAAE,CACL;IACCC,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,OAAO;IACfC,SAAS,EAAEA,CAAA,KAAM,IAAAC,mBAAW,EAAE,WAAY;EAC3C,CAAC,EACD;IACCH,IAAI,EAAE,OAAO;IACbI,MAAM,EAAE,CAAE,gBAAgB,CAAE;IAC5BF,SAAS,EAAEA,CAAE;MAAEG,OAAO;MAAEC;IAAS,CAAC,KACjC,IAAAH,mBAAW,EAAE,WAAW,EAAE;MACzBE,OAAO;MACPC,QAAQ,EAAE,IAAAC,8CAAsB,EAAED,QAAQ,EAAE,WAAY;IACzD,CAAE;EACJ,CAAC,EACD;IACCN,IAAI,EAAE,OAAO;IACbI,MAAM,EAAE,CAAE,WAAW,CAAE;IACvBF,SAAS,EAAEA,CAAE;MAAEG,OAAO,EAAEG,IAAI;MAAEF;IAAS,CAAC,KAAM;MAC7C,OAAO,IAAAH,mBAAW,EAAE,WAAW,EAAE;QAChC;QACA;QACAE,OAAO,EAAE,IAAAI,sBAAY,EAAE;UAAEC,KAAK,EAAE,IAAAC,gBAAM,EAAE;YAAEH;UAAK,CAAE;QAAE,CAAE,CAAC;QACtDF,QAAQ,EAAE,IAAAC,8CAAsB,EAAED,QAAQ,EAAE,WAAY;MACzD,CAAE,CAAC;IACJ;EACD,CAAC,EACD;IACCN,IAAI,EAAE,KAAK;IACXY,OAAO,EAAIC,IAAI,IACdA,IAAI,CAACC,QAAQ,KAAK,KAAK,IACvBD,IAAI,CAACE,QAAQ,CAACC,MAAM,KAAK,CAAC,IAC1BH,IAAI,CAACI,UAAU,CAACH,QAAQ,KAAK,MAAM;IACpCI,MAAM,EAAE;MACPC,GAAG,EAAE;QACJJ,QAAQ,EAAE;UACTK,IAAI,EAAE;YACLL,QAAQ,EAAE;cACT,OAAO,EAAE,CAAC;YACX;UACD;QACD;MACD;IACD;EACD,CAAC,CACD;EACDM,EAAE,EAAE,CACH;IACCrB,IAAI,EAAE,OAAO;IACbI,MAAM,EAAE,CAAE,gBAAgB,CAAE;IAC5BF,SAAS,EAAEA,CAAE;MAAEG,OAAO;MAAEC;IAAS,CAAC,KACjC,IAAAH,mBAAW,EAAE,gBAAgB,EAAE;MAC9BE,OAAO;MACPC,QAAQ,EAAE,IAAAC,8CAAsB,EAC/BD,QAAQ,EACR,gBACD;IACD,CAAE;EACJ,CAAC;AAEH,CAAC;AAAC,IAAAgB,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEa1B,UAAU","ignoreList":[]}