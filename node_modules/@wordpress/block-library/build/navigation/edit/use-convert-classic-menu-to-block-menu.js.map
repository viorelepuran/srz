{"version":3,"names":["_data","require","_coreData","_element","_i18n","_menuItemsToBlocks","_interopRequireDefault","CLASSIC_MENU_CONVERSION_SUCCESS","exports","CLASSIC_MENU_CONVERSION_ERROR","CLASSIC_MENU_CONVERSION_PENDING","CLASSIC_MENU_CONVERSION_IDLE","classicMenuBeingConvertedId","useConvertClassicToBlockMenu","createNavigationMenu","throwOnError","registry","useRegistry","editEntityRecord","useDispatch","coreStore","status","setStatus","useState","error","setError","convertClassicMenuToBlockMenu","useCallback","menuId","menuName","postStatus","navigationMenu","classicMenuItems","resolveSelect","getMenuItems","menus","per_page","context","err","Error","sprintf","__","cause","innerBlocks","menuItemsToBlocks","id","convert","then","catch","message","_default","default"],"sources":["@wordpress/block-library/src/navigation/edit/use-convert-classic-menu-to-block-menu.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRegistry, useDispatch } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useState, useCallback } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport menuItemsToBlocks from '../menu-items-to-blocks';\n\nexport const CLASSIC_MENU_CONVERSION_SUCCESS = 'success';\nexport const CLASSIC_MENU_CONVERSION_ERROR = 'error';\nexport const CLASSIC_MENU_CONVERSION_PENDING = 'pending';\nexport const CLASSIC_MENU_CONVERSION_IDLE = 'idle';\n\n// This is needed to ensure that multiple components using this hook\n// do not import the same classic menu twice.\nlet classicMenuBeingConvertedId = null;\n\nfunction useConvertClassicToBlockMenu(\n\tcreateNavigationMenu,\n\t{ throwOnError = false } = {}\n) {\n\tconst registry = useRegistry();\n\tconst { editEntityRecord } = useDispatch( coreStore );\n\n\tconst [ status, setStatus ] = useState( CLASSIC_MENU_CONVERSION_IDLE );\n\tconst [ error, setError ] = useState( null );\n\n\tconst convertClassicMenuToBlockMenu = useCallback(\n\t\tasync ( menuId, menuName, postStatus = 'publish' ) => {\n\t\t\tlet navigationMenu;\n\t\t\tlet classicMenuItems;\n\n\t\t\t// 1. Fetch the classic Menu items.\n\t\t\ttry {\n\t\t\t\tclassicMenuItems = await registry\n\t\t\t\t\t.resolveSelect( coreStore )\n\t\t\t\t\t.getMenuItems( {\n\t\t\t\t\t\tmenus: menuId,\n\t\t\t\t\t\tper_page: -1,\n\t\t\t\t\t\tcontext: 'view',\n\t\t\t\t\t} );\n\t\t\t} catch ( err ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t// translators: %s: The name of a menu (e.g. Header menu).\n\t\t\t\t\t\t__( `Unable to fetch classic menu \"%s\" from API.` ),\n\t\t\t\t\t\tmenuName\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\tcause: err,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Handle offline response which resolves to `null`.\n\t\t\tif ( classicMenuItems === null ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t// translators: %s: The name of a menu (e.g. Header menu).\n\t\t\t\t\t\t__( `Unable to fetch classic menu \"%s\" from API.` ),\n\t\t\t\t\t\tmenuName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// 2. Convert the classic items into blocks.\n\t\t\tconst { innerBlocks } = menuItemsToBlocks( classicMenuItems );\n\n\t\t\t// 3. Create the `wp_navigation` Post with the blocks.\n\t\t\ttry {\n\t\t\t\tnavigationMenu = await createNavigationMenu(\n\t\t\t\t\tmenuName,\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\tpostStatus\n\t\t\t\t);\n\n\t\t\t\t/**\n\t\t\t\t * Immediately trigger editEntityRecord to change the wp_navigation post status to 'publish'.\n\t\t\t\t * This status change causes the menu to be displayed on the front of the site and sets the post state to be \"dirty\".\n\t\t\t\t * The problem being solved is if saveEditedEntityRecord was used here, the menu would be updated on the frontend and the editor _automatically_,\n\t\t\t\t * without user interaction.\n\t\t\t\t * If the user abandons the site editor without saving, there would still be a wp_navigation post created as draft.\n\t\t\t\t */\n\t\t\t\tawait editEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_navigation',\n\t\t\t\t\tnavigationMenu.id,\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus: 'publish',\n\t\t\t\t\t},\n\t\t\t\t\t{ throwOnError: true }\n\t\t\t\t);\n\t\t\t} catch ( err ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t// translators: %s: The name of a menu (e.g. Header menu).\n\t\t\t\t\t\t__( `Unable to create Navigation Menu \"%s\".` ),\n\t\t\t\t\t\tmenuName\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\tcause: err,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn navigationMenu;\n\t\t},\n\t\t[ createNavigationMenu, editEntityRecord, registry ]\n\t);\n\n\tconst convert = useCallback(\n\t\tasync ( menuId, menuName, postStatus ) => {\n\t\t\t// Check whether this classic menu is being imported already.\n\t\t\tif ( classicMenuBeingConvertedId === menuId ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the ID for the currently importing classic menu.\n\t\t\tclassicMenuBeingConvertedId = menuId;\n\n\t\t\tif ( ! menuId || ! menuName ) {\n\t\t\t\tsetError( 'Unable to convert menu. Missing menu details.' );\n\t\t\t\tsetStatus( CLASSIC_MENU_CONVERSION_ERROR );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetStatus( CLASSIC_MENU_CONVERSION_PENDING );\n\t\t\tsetError( null );\n\n\t\t\treturn await convertClassicMenuToBlockMenu(\n\t\t\t\tmenuId,\n\t\t\t\tmenuName,\n\t\t\t\tpostStatus\n\t\t\t)\n\t\t\t\t.then( ( navigationMenu ) => {\n\t\t\t\t\tsetStatus( CLASSIC_MENU_CONVERSION_SUCCESS );\n\t\t\t\t\t// Reset the ID for the currently importing classic menu.\n\t\t\t\t\tclassicMenuBeingConvertedId = null;\n\t\t\t\t\treturn navigationMenu;\n\t\t\t\t} )\n\t\t\t\t.catch( ( err ) => {\n\t\t\t\t\tsetError( err?.message );\n\t\t\t\t\t// Reset the ID for the currently importing classic menu.\n\t\t\t\t\tsetStatus( CLASSIC_MENU_CONVERSION_ERROR );\n\n\t\t\t\t\t// Reset the ID for the currently importing classic menu.\n\t\t\t\t\tclassicMenuBeingConvertedId = null;\n\n\t\t\t\t\t// Rethrow error for debugging.\n\t\t\t\t\tif ( throwOnError ) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t// translators: %s: The name of a menu (e.g. Header menu).\n\t\t\t\t\t\t\t\t__( `Unable to create Navigation Menu \"%s\".` ),\n\t\t\t\t\t\t\t\tmenuName\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcause: err,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t},\n\t\t[ convertClassicMenuToBlockMenu, throwOnError ]\n\t);\n\n\treturn {\n\t\tconvert,\n\t\tstatus,\n\t\terror,\n\t};\n}\n\nexport default useConvertClassicToBlockMenu;\n"],"mappings":"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","ignoreList":[]}