{"version":3,"names":["_blocks","require","_data","_blockEditor","createNavigationLinks","pages","linkMap","navigationLinks","forEach","id","title","link","url","type","parent","_linkMap$id$innerBloc","innerBlocks","createBlock","label","rendered","kind","push","parentLinkInnerBlocks","findNavigationLinkById","navigationLink","attributes","length","foundNavigationLink","convertToNavigationLinks","parentPageID","parentPage","transformSubmenus","listOfLinks","block","index","listOfLinksArray","transformedBlock","useConvertToNavigationLinks","clientId","parentClientId","replaceBlock","selectBlock","useDispatch","blockEditorStore"],"sources":["@wordpress/block-library/src/page-list/use-convert-to-navigation-links.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock } from '@wordpress/blocks';\nimport { useDispatch } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Converts an array of pages into a nested array of navigation link blocks.\n *\n * @param {Array} pages An array of pages.\n *\n * @return {Array} A nested array of navigation link blocks.\n */\nfunction createNavigationLinks( pages = [] ) {\n\tconst linkMap = {};\n\tconst navigationLinks = [];\n\tpages.forEach( ( { id, title, link: url, type, parent } ) => {\n\t\t// See if a placeholder exists. This is created if children appear before parents in list.\n\t\tconst innerBlocks = linkMap[ id ]?.innerBlocks ?? [];\n\t\tlinkMap[ id ] = createBlock(\n\t\t\t'core/navigation-link',\n\t\t\t{\n\t\t\t\tid,\n\t\t\t\tlabel: title.rendered,\n\t\t\t\turl,\n\t\t\t\ttype,\n\t\t\t\tkind: 'post-type',\n\t\t\t},\n\t\t\tinnerBlocks\n\t\t);\n\n\t\tif ( ! parent ) {\n\t\t\tnavigationLinks.push( linkMap[ id ] );\n\t\t} else {\n\t\t\tif ( ! linkMap[ parent ] ) {\n\t\t\t\t// Use a placeholder if the child appears before parent in list.\n\t\t\t\tlinkMap[ parent ] = { innerBlocks: [] };\n\t\t\t}\n\t\t\t// Although these variables are not referenced, they are needed to store the innerBlocks in memory.\n\t\t\tconst parentLinkInnerBlocks = linkMap[ parent ].innerBlocks;\n\t\t\tparentLinkInnerBlocks.push( linkMap[ id ] );\n\t\t}\n\t} );\n\n\treturn navigationLinks;\n}\n\n/**\n * Finds a navigation link block by id, recursively.\n * It might be possible to make this a more generic helper function.\n *\n * @param {Array}  navigationLinks An array of navigation link blocks.\n * @param {number} id              The id of the navigation link to find.\n *\n * @return {Object|null} The navigation link block with the given id.\n */\nfunction findNavigationLinkById( navigationLinks, id ) {\n\tfor ( const navigationLink of navigationLinks ) {\n\t\t// Is this the link we're looking for?\n\t\tif ( navigationLink.attributes.id === id ) {\n\t\t\treturn navigationLink;\n\t\t}\n\n\t\t// If not does it have innerBlocks?\n\t\tif ( navigationLink.innerBlocks && navigationLink.innerBlocks.length ) {\n\t\t\tconst foundNavigationLink = findNavigationLinkById(\n\t\t\t\tnavigationLink.innerBlocks,\n\t\t\t\tid\n\t\t\t);\n\n\t\t\tif ( foundNavigationLink ) {\n\t\t\t\treturn foundNavigationLink;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function convertToNavigationLinks( pages = [], parentPageID = null ) {\n\tlet navigationLinks = createNavigationLinks( pages );\n\n\t// If a parent page ID is provided, only return the children of that page.\n\tif ( parentPageID ) {\n\t\tconst parentPage = findNavigationLinkById(\n\t\t\tnavigationLinks,\n\t\t\tparentPageID\n\t\t);\n\t\tif ( parentPage && parentPage.innerBlocks ) {\n\t\t\tnavigationLinks = parentPage.innerBlocks;\n\t\t}\n\t}\n\n\t// Transform all links with innerBlocks into Submenus. This can't be done\n\t// sooner because page objects have no information on their children.\n\tconst transformSubmenus = ( listOfLinks ) => {\n\t\tlistOfLinks.forEach( ( block, index, listOfLinksArray ) => {\n\t\t\tconst { attributes, innerBlocks } = block;\n\t\t\tif ( innerBlocks.length !== 0 ) {\n\t\t\t\ttransformSubmenus( innerBlocks );\n\t\t\t\tconst transformedBlock = createBlock(\n\t\t\t\t\t'core/navigation-submenu',\n\t\t\t\t\tattributes,\n\t\t\t\t\tinnerBlocks\n\t\t\t\t);\n\t\t\t\tlistOfLinksArray[ index ] = transformedBlock;\n\t\t\t}\n\t\t} );\n\t};\n\n\ttransformSubmenus( navigationLinks );\n\treturn navigationLinks;\n}\n\nexport function useConvertToNavigationLinks( {\n\tclientId,\n\tpages,\n\tparentClientId,\n\tparentPageID,\n} ) {\n\tconst { replaceBlock, selectBlock } = useDispatch( blockEditorStore );\n\n\treturn () => {\n\t\tconst navigationLinks = convertToNavigationLinks( pages, parentPageID );\n\n\t\t// Replace the Page List block with the Navigation Links.\n\t\treplaceBlock( clientId, navigationLinks );\n\n\t\t// Select the Navigation block to reveal the changes.\n\t\tselectBlock( parentClientId );\n\t};\n}\n"],"mappings":"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","ignoreList":[]}