{"version":3,"names":["_removeAccents","_interopRequireDefault","require","normalizeSearchInput","input","removeAccents","trim","toLowerCase","getPatternSearchRank","pattern","searchValue","normalizedSearchValue","normalizedTitle","title","rank","startsWith","searchTerms","split","hasMatchedTerms","every","searchTerm","includes","searchPatterns","patterns","rankedPatterns","map","filter","sort","rank1","rank2"],"sources":["@wordpress/block-library/src/utils/search-patterns.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport removeAccents from 'remove-accents';\n\n/**\n * Sanitizes the search input string.\n *\n * @param {string} input The search input to normalize.\n *\n * @return {string} The normalized search input.\n */\nexport function normalizeSearchInput( input = '' ) {\n\t// Disregard diacritics.\n\tinput = removeAccents( input );\n\n\t// Trim & Lowercase.\n\tinput = input.trim().toLowerCase();\n\n\treturn input;\n}\n\n/**\n * Get the search rank for a given pattern and a specific search term.\n *\n * @param {Object} pattern     Pattern to rank\n * @param {string} searchValue Search term\n * @return {number} A pattern search rank\n */\nexport function getPatternSearchRank( pattern, searchValue ) {\n\tconst normalizedSearchValue = normalizeSearchInput( searchValue );\n\tconst normalizedTitle = normalizeSearchInput( pattern.title );\n\n\tlet rank = 0;\n\n\tif ( normalizedSearchValue === normalizedTitle ) {\n\t\trank += 30;\n\t} else if ( normalizedTitle.startsWith( normalizedSearchValue ) ) {\n\t\trank += 20;\n\t} else {\n\t\tconst searchTerms = normalizedSearchValue.split( ' ' );\n\t\tconst hasMatchedTerms = searchTerms.every( ( searchTerm ) =>\n\t\t\tnormalizedTitle.includes( searchTerm )\n\t\t);\n\n\t\t// Prefer pattern with every search word in the title.\n\t\tif ( hasMatchedTerms ) {\n\t\t\trank += 10;\n\t\t}\n\t}\n\n\treturn rank;\n}\n\n/**\n * Filters an pattern list given a search term.\n *\n * @param {Array}  patterns    Item list\n * @param {string} searchValue Search input.\n *\n * @return {Array} Filtered pattern list.\n */\nexport function searchPatterns( patterns = [], searchValue = '' ) {\n\tif ( ! searchValue ) {\n\t\treturn patterns;\n\t}\n\n\tconst rankedPatterns = patterns\n\t\t.map( ( pattern ) => {\n\t\t\treturn [ pattern, getPatternSearchRank( pattern, searchValue ) ];\n\t\t} )\n\t\t.filter( ( [ , rank ] ) => rank > 0 );\n\n\trankedPatterns.sort( ( [ , rank1 ], [ , rank2 ] ) => rank2 - rank1 );\n\treturn rankedPatterns.map( ( [ pattern ] ) => pattern );\n}\n"],"mappings":";;;;;;;;;AAGA,IAAAA,cAAA,GAAAC,sBAAA,CAAAC,OAAA;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,oBAAoBA,CAAEC,KAAK,GAAG,EAAE,EAAG;EAClD;EACAA,KAAK,GAAG,IAAAC,sBAAa,EAAED,KAAM,CAAC;;EAE9B;EACAA,KAAK,GAAGA,KAAK,CAACE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAElC,OAAOH,KAAK;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,oBAAoBA,CAAEC,OAAO,EAAEC,WAAW,EAAG;EAC5D,MAAMC,qBAAqB,GAAGR,oBAAoB,CAAEO,WAAY,CAAC;EACjE,MAAME,eAAe,GAAGT,oBAAoB,CAAEM,OAAO,CAACI,KAAM,CAAC;EAE7D,IAAIC,IAAI,GAAG,CAAC;EAEZ,IAAKH,qBAAqB,KAAKC,eAAe,EAAG;IAChDE,IAAI,IAAI,EAAE;EACX,CAAC,MAAM,IAAKF,eAAe,CAACG,UAAU,CAAEJ,qBAAsB,CAAC,EAAG;IACjEG,IAAI,IAAI,EAAE;EACX,CAAC,MAAM;IACN,MAAME,WAAW,GAAGL,qBAAqB,CAACM,KAAK,CAAE,GAAI,CAAC;IACtD,MAAMC,eAAe,GAAGF,WAAW,CAACG,KAAK,CAAIC,UAAU,IACtDR,eAAe,CAACS,QAAQ,CAAED,UAAW,CACtC,CAAC;;IAED;IACA,IAAKF,eAAe,EAAG;MACtBJ,IAAI,IAAI,EAAE;IACX;EACD;EAEA,OAAOA,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,cAAcA,CAAEC,QAAQ,GAAG,EAAE,EAAEb,WAAW,GAAG,EAAE,EAAG;EACjE,IAAK,CAAEA,WAAW,EAAG;IACpB,OAAOa,QAAQ;EAChB;EAEA,MAAMC,cAAc,GAAGD,QAAQ,CAC7BE,GAAG,CAAIhB,OAAO,IAAM;IACpB,OAAO,CAAEA,OAAO,EAAED,oBAAoB,CAAEC,OAAO,EAAEC,WAAY,CAAC,CAAE;EACjE,CAAE,CAAC,CACFgB,MAAM,CAAE,CAAE,GAAIZ,IAAI,CAAE,KAAMA,IAAI,GAAG,CAAE,CAAC;EAEtCU,cAAc,CAACG,IAAI,CAAE,CAAE,GAAIC,KAAK,CAAE,EAAE,GAAIC,KAAK,CAAE,KAAMA,KAAK,GAAGD,KAAM,CAAC;EACpE,OAAOJ,cAAc,CAACC,GAAG,CAAE,CAAE,CAAEhB,OAAO,CAAE,KAAMA,OAAQ,CAAC;AACxD","ignoreList":[]}