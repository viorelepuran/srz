{"version":3,"names":["_memize","_interopRequireDefault","require","_icons","_components","_data","_serverSideRender","_blockEditor","_coreData","_i18n","_jsxRuntime","getYearMonth","memoize","date","dateObj","Date","year","getFullYear","month","getMonth","CalendarEdit","attributes","blockProps","useBlockProps","hasPosts","hasPostsResolved","useSelect","select","getEntityRecords","hasFinishedResolution","coreStore","singlePublishedPostQuery","status","per_page","posts","postsResolved","_date","editorSelectors","postType","getEditedPostAttribute","length","jsx","children","Placeholder","icon","label","__","Spinner","Disabled","default","block"],"sources":["@wordpress/block-library/src/calendar/edit.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { calendar as icon } from '@wordpress/icons';\nimport { Disabled, Placeholder, Spinner } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport ServerSideRender from '@wordpress/server-side-render';\nimport { useBlockProps } from '@wordpress/block-editor';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Returns the year and month of a specified date.\n *\n * @see `WP_REST_Posts_Controller::prepare_date_response()`.\n *\n * @param {string} date Date in `ISO8601/RFC3339` format.\n * @return {Object} Year and date of the specified date.\n */\nconst getYearMonth = memoize( ( date ) => {\n\tif ( ! date ) {\n\t\treturn {};\n\t}\n\tconst dateObj = new Date( date );\n\treturn {\n\t\tyear: dateObj.getFullYear(),\n\t\tmonth: dateObj.getMonth() + 1,\n\t};\n} );\n\nexport default function CalendarEdit( { attributes } ) {\n\tconst blockProps = useBlockProps();\n\tconst { date, hasPosts, hasPostsResolved } = useSelect( ( select ) => {\n\t\tconst { getEntityRecords, hasFinishedResolution } = select( coreStore );\n\n\t\tconst singlePublishedPostQuery = {\n\t\t\tstatus: 'publish',\n\t\t\tper_page: 1,\n\t\t};\n\t\tconst posts = getEntityRecords(\n\t\t\t'postType',\n\t\t\t'post',\n\t\t\tsinglePublishedPostQuery\n\t\t);\n\t\tconst postsResolved = hasFinishedResolution( 'getEntityRecords', [\n\t\t\t'postType',\n\t\t\t'post',\n\t\t\tsinglePublishedPostQuery,\n\t\t] );\n\n\t\tlet _date;\n\n\t\t// FIXME: @wordpress/block-library should not depend on @wordpress/editor.\n\t\t// Blocks can be loaded into a *non-post* block editor.\n\t\t// eslint-disable-next-line @wordpress/data-no-store-string-literals\n\t\tconst editorSelectors = select( 'core/editor' );\n\t\tif ( editorSelectors ) {\n\t\t\tconst postType = editorSelectors.getEditedPostAttribute( 'type' );\n\t\t\t// Dates are used to overwrite year and month used on the calendar.\n\t\t\t// This overwrite should only happen for 'post' post types.\n\t\t\t// For other post types the calendar always displays the current month.\n\t\t\tif ( postType === 'post' ) {\n\t\t\t\t_date = editorSelectors.getEditedPostAttribute( 'date' );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdate: _date,\n\t\t\thasPostsResolved: postsResolved,\n\t\t\thasPosts: postsResolved && posts?.length === 1,\n\t\t};\n\t}, [] );\n\n\tif ( ! hasPosts ) {\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<Placeholder icon={ icon } label={ __( 'Calendar' ) }>\n\t\t\t\t\t{ ! hasPostsResolved ? (\n\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t__( 'No published posts found.' )\n\t\t\t\t\t) }\n\t\t\t\t</Placeholder>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<Disabled>\n\t\t\t\t<ServerSideRender\n\t\t\t\t\tblock=\"core/calendar\"\n\t\t\t\t\tattributes={ { ...attributes, ...getYearMonth( date ) } }\n\t\t\t\t/>\n\t\t\t</Disabled>\n\t\t</div>\n\t);\n}\n"],"mappings":"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","ignoreList":[]}