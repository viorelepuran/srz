{"version":3,"names":["_clsx","_interopRequireDefault","require","_blockEditor","_data","_shared","_jsxRuntime","blockAttributes","value","type","source","selector","multiline","citation","default","mainColor","customMainColor","textColor","customTextColor","parseBorderColor","styleString","matches","match","multilineToInline","padded","values","split","shift","pop","join","v5","attributes","role","textAlign","save","shouldShowCitation","RichText","isEmpty","jsx","useBlockProps","className","clsx","children","jsxs","Content","tagName","migrate","v4","isSolidColorStyle","includes","SOLID_COLOR_CLASS","figureClasses","figureStyles","backgroundClass","getColorClassName","backgroundColor","undefined","borderColor","blockquoteTextColorClass","blockquoteClasses","blockquoteStyles","color","style","border","background","text","v3","figureStyle","attribute","v2","figureClass","_select$getSettings$c","colors","select","blockEditorStore","getSettings","colorObject","getColorObjectByAttributeValues","blockquoteStyle","v1","v0","align","_default","exports"],"sources":["@wordpress/block-library/src/pullquote/deprecated.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport clsx from 'clsx';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetColorClassName,\n\tgetColorObjectByAttributeValues,\n\tRichText,\n\tstore as blockEditorStore,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { SOLID_COLOR_CLASS } from './shared';\n\nconst blockAttributes = {\n\tvalue: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'blockquote',\n\t\tmultiline: 'p',\n\t},\n\tcitation: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'cite',\n\t\tdefault: '',\n\t},\n\tmainColor: {\n\t\ttype: 'string',\n\t},\n\tcustomMainColor: {\n\t\ttype: 'string',\n\t},\n\ttextColor: {\n\t\ttype: 'string',\n\t},\n\tcustomTextColor: {\n\t\ttype: 'string',\n\t},\n};\n\nfunction parseBorderColor( styleString ) {\n\tif ( ! styleString ) {\n\t\treturn;\n\t}\n\tconst matches = styleString.match( /border-color:([^;]+)[;]?/ );\n\tif ( matches && matches[ 1 ] ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n\nfunction multilineToInline( value ) {\n\tvalue = value || `<p></p>`;\n\tconst padded = `</p>${ value }<p>`;\n\tconst values = padded.split( `</p><p>` );\n\n\tvalues.shift();\n\tvalues.pop();\n\n\treturn values.join( '<br>' );\n}\n\nconst v5 = {\n\tattributes: {\n\t\tvalue: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'blockquote',\n\t\t\tmultiline: 'p',\n\t\t\trole: 'content',\n\t\t},\n\t\tcitation: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'cite',\n\t\t\tdefault: '',\n\t\t\trole: 'content',\n\t\t},\n\t\ttextAlign: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\tsave( { attributes } ) {\n\t\tconst { textAlign, citation, value } = attributes;\n\t\tconst shouldShowCitation = ! RichText.isEmpty( citation );\n\n\t\treturn (\n\t\t\t<figure\n\t\t\t\t{ ...useBlockProps.save( {\n\t\t\t\t\tclassName: clsx( {\n\t\t\t\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t\t\t\t} ),\n\t\t\t\t} ) }\n\t\t\t>\n\t\t\t\t<blockquote>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ shouldShowCitation && (\n\t\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t</figure>\n\t\t);\n\t},\n\tmigrate( { value, ...attributes } ) {\n\t\treturn {\n\t\t\tvalue: multilineToInline( value ),\n\t\t\t...attributes,\n\t\t};\n\t},\n};\n\n// TODO: this is ripe for a bit of a clean up according to the example in https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/#example\n\nconst v4 = {\n\tattributes: {\n\t\t...blockAttributes,\n\t},\n\tsave( { attributes } ) {\n\t\tconst {\n\t\t\tmainColor,\n\t\t\tcustomMainColor,\n\t\t\tcustomTextColor,\n\t\t\ttextColor,\n\t\t\tvalue,\n\t\t\tcitation,\n\t\t\tclassName,\n\t\t} = attributes;\n\n\t\tconst isSolidColorStyle = className?.includes( SOLID_COLOR_CLASS );\n\n\t\tlet figureClasses, figureStyles;\n\n\t\t// Is solid color style\n\t\tif ( isSolidColorStyle ) {\n\t\t\tconst backgroundClass = getColorClassName(\n\t\t\t\t'background-color',\n\t\t\t\tmainColor\n\t\t\t);\n\n\t\t\tfigureClasses = clsx( {\n\t\t\t\t'has-background': backgroundClass || customMainColor,\n\t\t\t\t[ backgroundClass ]: backgroundClass,\n\t\t\t} );\n\n\t\t\tfigureStyles = {\n\t\t\t\tbackgroundColor: backgroundClass ? undefined : customMainColor,\n\t\t\t};\n\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t} else if ( customMainColor ) {\n\t\t\tfigureStyles = {\n\t\t\t\tborderColor: customMainColor,\n\t\t\t};\n\t\t}\n\n\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t'color',\n\t\t\ttextColor\n\t\t);\n\t\tconst blockquoteClasses = clsx( {\n\t\t\t'has-text-color': textColor || customTextColor,\n\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t} );\n\n\t\tconst blockquoteStyles = blockquoteTextColorClass\n\t\t\t? undefined\n\t\t\t: { color: customTextColor };\n\n\t\treturn (\n\t\t\t<figure\n\t\t\t\t{ ...useBlockProps.save( {\n\t\t\t\t\tclassName: figureClasses,\n\t\t\t\t\tstyle: figureStyles,\n\t\t\t\t} ) }\n\t\t\t>\n\t\t\t\t<blockquote\n\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\tstyle={ blockquoteStyles }\n\t\t\t\t>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t</figure>\n\t\t);\n\t},\n\tmigrate( {\n\t\tvalue,\n\t\tclassName,\n\t\tmainColor,\n\t\tcustomMainColor,\n\t\tcustomTextColor,\n\t\t...attributes\n\t} ) {\n\t\tconst isSolidColorStyle = className?.includes( SOLID_COLOR_CLASS );\n\t\tlet style;\n\n\t\tif ( customMainColor ) {\n\t\t\tif ( ! isSolidColorStyle ) {\n\t\t\t\t// Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.\n\t\t\t\tstyle = {\n\t\t\t\t\tborder: {\n\t\t\t\t\t\tcolor: customMainColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.\n\t\t\t\tstyle = {\n\t\t\t\t\tcolor: {\n\t\t\t\t\t\tbackground: customMainColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.\n\t\tif ( customTextColor && style ) {\n\t\t\tstyle.color = {\n\t\t\t\t...style.color,\n\t\t\t\ttext: customTextColor,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: multilineToInline( value ),\n\t\t\tclassName,\n\t\t\tbackgroundColor: isSolidColorStyle ? mainColor : undefined,\n\t\t\tborderColor: isSolidColorStyle ? undefined : mainColor,\n\t\t\ttextAlign: isSolidColorStyle ? 'left' : undefined,\n\t\t\tstyle,\n\t\t\t...attributes,\n\t\t};\n\t},\n};\n\nconst v3 = {\n\tattributes: {\n\t\t...blockAttributes,\n\t\t// figureStyle is an attribute that never existed.\n\t\t// We are using it as a way to access the styles previously applied to the figure.\n\t\tfigureStyle: {\n\t\t\tsource: 'attribute',\n\t\t\tselector: 'figure',\n\t\t\tattribute: 'style',\n\t\t},\n\t},\n\tsave( { attributes } ) {\n\t\tconst {\n\t\t\tmainColor,\n\t\t\tcustomMainColor,\n\t\t\ttextColor,\n\t\t\tcustomTextColor,\n\t\t\tvalue,\n\t\t\tcitation,\n\t\t\tclassName,\n\t\t\tfigureStyle,\n\t\t} = attributes;\n\n\t\tconst isSolidColorStyle = className?.includes( SOLID_COLOR_CLASS );\n\n\t\tlet figureClasses, figureStyles;\n\n\t\t// Is solid color style\n\t\tif ( isSolidColorStyle ) {\n\t\t\tconst backgroundClass = getColorClassName(\n\t\t\t\t'background-color',\n\t\t\t\tmainColor\n\t\t\t);\n\n\t\t\tfigureClasses = clsx( {\n\t\t\t\t'has-background': backgroundClass || customMainColor,\n\t\t\t\t[ backgroundClass ]: backgroundClass,\n\t\t\t} );\n\n\t\t\tfigureStyles = {\n\t\t\t\tbackgroundColor: backgroundClass ? undefined : customMainColor,\n\t\t\t};\n\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t} else if ( customMainColor ) {\n\t\t\tfigureStyles = {\n\t\t\t\tborderColor: customMainColor,\n\t\t\t};\n\t\t\t// If normal style and a named color are being used, we need to retrieve the color value to set the style,\n\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t} else if ( mainColor ) {\n\t\t\t// Previously here we queried the color settings to know the color value\n\t\t\t// of a named color. This made the save function impure and the block was refactored,\n\t\t\t// because meanwhile a change in the editor made it impossible to query color settings in the save function.\n\t\t\t// Here instead of querying the color settings to know the color value, we retrieve the value\n\t\t\t// directly from the style previously serialized.\n\t\t\tconst borderColor = parseBorderColor( figureStyle );\n\t\t\tfigureStyles = {\n\t\t\t\tborderColor,\n\t\t\t};\n\t\t}\n\n\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t'color',\n\t\t\ttextColor\n\t\t);\n\t\tconst blockquoteClasses =\n\t\t\t( textColor || customTextColor ) &&\n\t\t\tclsx( 'has-text-color', {\n\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t} );\n\n\t\tconst blockquoteStyles = blockquoteTextColorClass\n\t\t\t? undefined\n\t\t\t: { color: customTextColor };\n\n\t\treturn (\n\t\t\t<figure className={ figureClasses } style={ figureStyles }>\n\t\t\t\t<blockquote\n\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\tstyle={ blockquoteStyles }\n\t\t\t\t>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t</figure>\n\t\t);\n\t},\n\tmigrate( {\n\t\tvalue,\n\t\tclassName,\n\t\tfigureStyle,\n\t\tmainColor,\n\t\tcustomMainColor,\n\t\tcustomTextColor,\n\t\t...attributes\n\t} ) {\n\t\tconst isSolidColorStyle = className?.includes( SOLID_COLOR_CLASS );\n\t\tlet style;\n\n\t\tif ( customMainColor ) {\n\t\t\tif ( ! isSolidColorStyle ) {\n\t\t\t\t// Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.\n\t\t\t\tstyle = {\n\t\t\t\t\tborder: {\n\t\t\t\t\t\tcolor: customMainColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.\n\t\t\t\tstyle = {\n\t\t\t\t\tcolor: {\n\t\t\t\t\t\tbackground: customMainColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.\n\t\tif ( customTextColor && style ) {\n\t\t\tstyle.color = {\n\t\t\t\t...style.color,\n\t\t\t\ttext: customTextColor,\n\t\t\t};\n\t\t}\n\t\t// If is the default style, and a main color is set,\n\t\t// migrate the main color value into a custom border color.\n\t\t// The custom border color value is retrieved by parsing the figure styles.\n\t\tif ( ! isSolidColorStyle && mainColor && figureStyle ) {\n\t\t\tconst borderColor = parseBorderColor( figureStyle );\n\t\t\tif ( borderColor ) {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: multilineToInline( value ),\n\t\t\t\t\t...attributes,\n\t\t\t\t\tclassName,\n\t\t\t\t\t// Block supports: Set style.border.color if a deprecated block has `mainColor`, inline border CSS and is not a solid color style.\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tborder: {\n\t\t\t\t\t\t\tcolor: borderColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tvalue: multilineToInline( value ),\n\t\t\tclassName,\n\t\t\tbackgroundColor: isSolidColorStyle ? mainColor : undefined,\n\t\t\tborderColor: isSolidColorStyle ? undefined : mainColor,\n\t\t\ttextAlign: isSolidColorStyle ? 'left' : undefined,\n\t\t\tstyle,\n\t\t\t...attributes,\n\t\t};\n\t},\n};\n\nconst v2 = {\n\tattributes: blockAttributes,\n\tsave( { attributes } ) {\n\t\tconst {\n\t\t\tmainColor,\n\t\t\tcustomMainColor,\n\t\t\ttextColor,\n\t\t\tcustomTextColor,\n\t\t\tvalue,\n\t\t\tcitation,\n\t\t\tclassName,\n\t\t} = attributes;\n\t\tconst isSolidColorStyle = className?.includes( SOLID_COLOR_CLASS );\n\n\t\tlet figureClass, figureStyles;\n\t\t// Is solid color style\n\t\tif ( isSolidColorStyle ) {\n\t\t\tfigureClass = getColorClassName( 'background-color', mainColor );\n\t\t\tif ( ! figureClass ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tbackgroundColor: customMainColor,\n\t\t\t\t};\n\t\t\t}\n\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t} else if ( customMainColor ) {\n\t\t\tfigureStyles = {\n\t\t\t\tborderColor: customMainColor,\n\t\t\t};\n\t\t\t// Is normal style and a named color is being used, we need to retrieve the color value to set the style,\n\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t} else if ( mainColor ) {\n\t\t\tconst colors =\n\t\t\t\tselect( blockEditorStore ).getSettings().colors ?? [];\n\t\t\tconst colorObject = getColorObjectByAttributeValues(\n\t\t\t\tcolors,\n\t\t\t\tmainColor\n\t\t\t);\n\t\t\tfigureStyles = {\n\t\t\t\tborderColor: colorObject.color,\n\t\t\t};\n\t\t}\n\n\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t'color',\n\t\t\ttextColor\n\t\t);\n\t\tconst blockquoteClasses =\n\t\t\ttextColor || customTextColor\n\t\t\t\t? clsx( 'has-text-color', {\n\t\t\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t\t  } )\n\t\t\t\t: undefined;\n\t\tconst blockquoteStyle = blockquoteTextColorClass\n\t\t\t? undefined\n\t\t\t: { color: customTextColor };\n\t\treturn (\n\t\t\t<figure className={ figureClass } style={ figureStyles }>\n\t\t\t\t<blockquote\n\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\tstyle={ blockquoteStyle }\n\t\t\t\t>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t</figure>\n\t\t);\n\t},\n\tmigrate( {\n\t\tvalue,\n\t\tclassName,\n\t\tmainColor,\n\t\tcustomMainColor,\n\t\tcustomTextColor,\n\t\t...attributes\n\t} ) {\n\t\tconst isSolidColorStyle = className?.includes( SOLID_COLOR_CLASS );\n\t\tlet style = {};\n\n\t\tif ( customMainColor ) {\n\t\t\tif ( ! isSolidColorStyle ) {\n\t\t\t\t// Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.\n\t\t\t\tstyle = {\n\t\t\t\t\tborder: {\n\t\t\t\t\t\tcolor: customMainColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.\n\t\t\t\tstyle = {\n\t\t\t\t\tcolor: {\n\t\t\t\t\t\tbackground: customMainColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.\n\t\tif ( customTextColor && style ) {\n\t\t\tstyle.color = {\n\t\t\t\t...style.color,\n\t\t\t\ttext: customTextColor,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: multilineToInline( value ),\n\t\t\tclassName,\n\t\t\tbackgroundColor: isSolidColorStyle ? mainColor : undefined,\n\t\t\tborderColor: isSolidColorStyle ? undefined : mainColor,\n\t\t\ttextAlign: isSolidColorStyle ? 'left' : undefined,\n\t\t\tstyle,\n\t\t\t...attributes,\n\t\t};\n\t},\n};\n\nconst v1 = {\n\tattributes: {\n\t\t...blockAttributes,\n\t},\n\tsave( { attributes } ) {\n\t\tconst { value, citation } = attributes;\n\t\treturn (\n\t\t\t<blockquote>\n\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t) }\n\t\t\t</blockquote>\n\t\t);\n\t},\n\tmigrate( { value, ...attributes } ) {\n\t\treturn {\n\t\t\tvalue: multilineToInline( value ),\n\t\t\t...attributes,\n\t\t};\n\t},\n};\n\nconst v0 = {\n\tattributes: {\n\t\t...blockAttributes,\n\t\tcitation: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'footer',\n\t\t},\n\t\talign: {\n\t\t\ttype: 'string',\n\t\t\tdefault: 'none',\n\t\t},\n\t},\n\n\tsave( { attributes } ) {\n\t\tconst { value, citation, align } = attributes;\n\n\t\treturn (\n\t\t\t<blockquote className={ `align${ align }` }>\n\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t<RichText.Content tagName=\"footer\" value={ citation } />\n\t\t\t\t) }\n\t\t\t</blockquote>\n\t\t);\n\t},\n\tmigrate( { value, ...attributes } ) {\n\t\treturn {\n\t\t\tvalue: multilineToInline( value ),\n\t\t\t...attributes,\n\t\t};\n\t},\n};\n\n/**\n * New deprecations need to be placed first\n * for them to have higher priority.\n *\n * Old deprecations may need to be updated as well.\n *\n * See block-deprecation.md\n */\nexport default [ v5, v4, v3, v2, v1, v0 ];\n"],"mappings":"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","ignoreList":[]}