"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SiteTitleEdit;
var _clsx = _interopRequireDefault(require("clsx"));
var _data = require("@wordpress/data");
var _coreData = require("@wordpress/core-data");
var _i18n = require("@wordpress/i18n");
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _blocks = require("@wordpress/blocks");
var _htmlEntities = require("@wordpress/html-entities");
var _hooks = require("../utils/hooks");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function SiteTitleEdit({
  attributes,
  setAttributes,
  insertBlocksAfter
}) {
  const {
    level,
    levelOptions,
    textAlign,
    isLink,
    linkTarget
  } = attributes;
  const {
    canUserEdit,
    title
  } = (0, _data.useSelect)(select => {
    const {
      canUser,
      getEntityRecord,
      getEditedEntityRecord
    } = select(_coreData.store);
    const canEdit = canUser('update', {
      kind: 'root',
      name: 'site'
    });
    const settings = canEdit ? getEditedEntityRecord('root', 'site') : {};
    const readOnlySettings = getEntityRecord('root', '__unstableBase');
    return {
      canUserEdit: canEdit,
      title: canEdit ? settings?.title : readOnlySettings?.name
    };
  }, []);
  const {
    editEntityRecord
  } = (0, _data.useDispatch)(_coreData.store);
  const dropdownMenuProps = (0, _hooks.useToolsPanelDropdownMenuProps)();
  function setTitle(newTitle) {
    editEntityRecord('root', 'site', undefined, {
      title: newTitle.trim()
    });
  }
  const TagName = level === 0 ? 'p' : `h${level}`;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _clsx.default)({
      [`has-text-align-${textAlign}`]: textAlign,
      'wp-block-site-title__placeholder': !canUserEdit && !title
    })
  });
  const siteTitleContent = canUserEdit ? /*#__PURE__*/(0, _jsxRuntime.jsx)(TagName, {
    ...blockProps,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.RichText, {
      tagName: isLink ? 'a' : 'span',
      href: isLink ? '#site-title-pseudo-link' : undefined,
      "aria-label": (0, _i18n.__)('Site title text'),
      placeholder: (0, _i18n.__)('Write site titleâ€¦'),
      value: title,
      onChange: setTitle,
      allowedFormats: [],
      disableLineBreaks: true,
      __unstableOnSplitAtEnd: () => insertBlocksAfter((0, _blocks.createBlock)((0, _blocks.getDefaultBlockName)()))
    })
  }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(TagName, {
    ...blockProps,
    children: isLink ? /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
      href: "#site-title-pseudo-link",
      onClick: event => event.preventDefault(),
      children: (0, _htmlEntities.decodeEntities)(title) || (0, _i18n.__)('Site Title placeholder')
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      children: (0, _htmlEntities.decodeEntities)(title) || (0, _i18n.__)('Site Title placeholder')
    })
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_blockEditor.BlockControls, {
      group: "block",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.HeadingLevelDropdown, {
        value: level,
        options: levelOptions,
        onChange: newLevel => setAttributes({
          level: newLevel
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.AlignmentControl, {
        value: textAlign,
        onChange: nextAlign => {
          setAttributes({
            textAlign: nextAlign
          });
        }
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.InspectorControls, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalToolsPanel, {
        label: (0, _i18n.__)('Settings'),
        resetAll: () => {
          setAttributes({
            isLink: true,
            linkTarget: '_self'
          });
        },
        dropdownMenuProps: dropdownMenuProps,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalToolsPanelItem, {
          hasValue: () => !isLink,
          label: (0, _i18n.__)('Make title link to home'),
          onDeselect: () => setAttributes({
            isLink: true
          }),
          isShownByDefault: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToggleControl, {
            __nextHasNoMarginBottom: true,
            label: (0, _i18n.__)('Make title link to home'),
            onChange: () => setAttributes({
              isLink: !isLink
            }),
            checked: isLink
          })
        }), isLink && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalToolsPanelItem, {
          hasValue: () => linkTarget !== '_self',
          label: (0, _i18n.__)('Open in new tab'),
          onDeselect: () => setAttributes({
            linkTarget: '_self'
          }),
          isShownByDefault: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToggleControl, {
            __nextHasNoMarginBottom: true,
            label: (0, _i18n.__)('Open in new tab'),
            onChange: value => setAttributes({
              linkTarget: value ? '_blank' : '_self'
            }),
            checked: linkTarget === '_blank'
          })
        })]
      })
    }), siteTitleContent]
  });
}
//# sourceMappingURL=edit.js.map