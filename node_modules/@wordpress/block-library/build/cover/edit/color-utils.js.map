{"version":3,"names":["_colord","require","_names","_interopRequireDefault","_fastAverageColor","_memize","_hooks","extend","namesPlugin","DEFAULT_BACKGROUND_COLOR","exports","DEFAULT_OVERLAY_COLOR","compositeSourceOver","source","dest","r","a","g","b","retrieveFastAverageColor","fastAverageColor","FastAverageColor","getMediaColor","memoize","url","colord","toRgb","imgCrossOrigin","applyFilters","undefined","color","getColorAsync","defaultColor","silent","process","env","NODE_ENV","crossOrigin","hex","error","compositeIsDark","dimRatio","overlayColor","backgroundColor","isDark","overlay","alpha","background","composite"],"sources":["@wordpress/block-library/src/cover/edit/color-utils.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport { FastAverageColor } from 'fast-average-color';\nimport memoize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * @typedef {import('colord').RgbaColor} RgbaColor\n */\n\nextend( [ namesPlugin ] );\n\n/**\n * Fallback color when the average color can't be computed. The image may be\n * rendering as transparent, and most sites have a light color background.\n */\nexport const DEFAULT_BACKGROUND_COLOR = '#FFF';\n\n/**\n * Default dim color specified in style.css.\n */\nexport const DEFAULT_OVERLAY_COLOR = '#000';\n\n/**\n * Performs a Porter Duff composite source over operation on two rgba colors.\n *\n * @see {@link https://www.w3.org/TR/compositing-1/#porterduffcompositingoperators_srcover}\n *\n * @param {RgbaColor} source Source color.\n * @param {RgbaColor} dest   Destination color.\n *\n * @return {RgbaColor} Composite color.\n */\nexport function compositeSourceOver( source, dest ) {\n\treturn {\n\t\tr: source.r * source.a + dest.r * dest.a * ( 1 - source.a ),\n\t\tg: source.g * source.a + dest.g * dest.a * ( 1 - source.a ),\n\t\tb: source.b * source.a + dest.b * dest.a * ( 1 - source.a ),\n\t\ta: source.a + dest.a * ( 1 - source.a ),\n\t};\n}\n\n/**\n * Retrieves the FastAverageColor singleton.\n *\n * @return {FastAverageColor} The FastAverageColor singleton.\n */\nexport function retrieveFastAverageColor() {\n\tif ( ! retrieveFastAverageColor.fastAverageColor ) {\n\t\tretrieveFastAverageColor.fastAverageColor = new FastAverageColor();\n\t}\n\treturn retrieveFastAverageColor.fastAverageColor;\n}\n\n/**\n * Computes the average color of an image.\n *\n * @param {string} url The url of the image.\n *\n * @return {Promise<string>} Promise of an average color as a hex string.\n */\nexport const getMediaColor = memoize( async ( url ) => {\n\tif ( ! url ) {\n\t\treturn DEFAULT_BACKGROUND_COLOR;\n\t}\n\n\t// making the default color rgb for compat with FAC\n\tconst { r, g, b, a } = colord( DEFAULT_BACKGROUND_COLOR ).toRgb();\n\n\ttry {\n\t\tconst imgCrossOrigin = applyFilters(\n\t\t\t'media.crossOrigin',\n\t\t\tundefined,\n\t\t\turl\n\t\t);\n\t\tconst color = await retrieveFastAverageColor().getColorAsync( url, {\n\t\t\t// The default color is white, which is the color\n\t\t\t// that is returned if there's an error.\n\t\t\t// colord returns alpga 0-1, FAC needs 0-255\n\t\t\tdefaultColor: [ r, g, b, a * 255 ],\n\t\t\t// Errors that come up don't reject the promise,\n\t\t\t// so error logging has to be silenced\n\t\t\t// with this option.\n\t\t\tsilent: process.env.NODE_ENV === 'production',\n\t\t\tcrossOrigin: imgCrossOrigin,\n\t\t} );\n\t\treturn color.hex;\n\t} catch ( error ) {\n\t\t// If there's an error return the fallback color.\n\t\treturn DEFAULT_BACKGROUND_COLOR;\n\t}\n} );\n\n/**\n * Computes if the color combination of the overlay and background color is dark.\n *\n * @param {number} dimRatio        Opacity of the overlay between 0 and 100.\n * @param {string} overlayColor    CSS color string for the overlay.\n * @param {string} backgroundColor CSS color string for the background.\n *\n * @return {boolean} true if the color combination composite result is dark.\n */\nexport function compositeIsDark( dimRatio, overlayColor, backgroundColor ) {\n\t// Opacity doesn't matter if you're overlaying the same color on top of itself.\n\t// And background doesn't matter when overlay is fully opaque.\n\tif ( overlayColor === backgroundColor || dimRatio === 100 ) {\n\t\treturn colord( overlayColor ).isDark();\n\t}\n\tconst overlay = colord( overlayColor )\n\t\t.alpha( dimRatio / 100 )\n\t\t.toRgb();\n\tconst background = colord( backgroundColor ).toRgb();\n\tconst composite = compositeSourceOver( overlay, background );\n\treturn colord( composite ).isDark();\n}\n"],"mappings":"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","ignoreList":[]}