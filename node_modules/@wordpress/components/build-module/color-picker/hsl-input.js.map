{"version":3,"names":["colord","useState","useEffect","useMemo","InputWithSlider","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","HslInput","color","onChange","enableAlpha","colorPropHSLA","toHsl","internalHSLA","setInternalHSLA","isInternalColorSameAsReceivedColor","isEqual","colorValue","updateHSLAValue","partialNewValue","nextOnChangeValue","prevHSLA","children","min","max","label","abbreviation","value","h","nextH","s","nextS","l","nextL","Math","trunc","a","nextA"],"sources":["@wordpress/components/src/color-picker/hsl-input.tsx"],"sourcesContent":["/**\n * External dependencies\n */\nimport { colord } from 'colord';\n\n/**\n * WordPress dependencies\n */\nimport { useState, useEffect, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { InputWithSlider } from './input-with-slider';\nimport type { HslInputProps } from './types';\n\nexport const HslInput = ( { color, onChange, enableAlpha }: HslInputProps ) => {\n\tconst colorPropHSLA = useMemo( () => color.toHsl(), [ color ] );\n\n\tconst [ internalHSLA, setInternalHSLA ] = useState( { ...colorPropHSLA } );\n\n\tconst isInternalColorSameAsReceivedColor = color.isEqual(\n\t\tcolord( internalHSLA )\n\t);\n\n\tuseEffect( () => {\n\t\tif ( ! isInternalColorSameAsReceivedColor ) {\n\t\t\t// Keep internal HSLA color up to date with the received color prop\n\t\t\tsetInternalHSLA( colorPropHSLA );\n\t\t}\n\t}, [ colorPropHSLA, isInternalColorSameAsReceivedColor ] );\n\n\t// If the internal color is equal to the received color prop, we can use the\n\t// HSLA values from the local state which, compared to the received color prop,\n\t// retain more details about the actual H and S values that the user selected,\n\t// and thus allow for better UX when interacting with the H and S sliders.\n\tconst colorValue = isInternalColorSameAsReceivedColor\n\t\t? internalHSLA\n\t\t: colorPropHSLA;\n\n\tconst updateHSLAValue = (\n\t\tpartialNewValue: Partial< typeof colorPropHSLA >\n\t) => {\n\t\tconst nextOnChangeValue = colord( {\n\t\t\t...colorValue,\n\t\t\t...partialNewValue,\n\t\t} );\n\n\t\t// Fire `onChange` only if the resulting color is different from the\n\t\t// current one.\n\t\t// Otherwise, update the internal HSLA color to cause a re-render.\n\t\tif ( ! color.isEqual( nextOnChangeValue ) ) {\n\t\t\tonChange( nextOnChangeValue );\n\t\t} else {\n\t\t\tsetInternalHSLA( ( prevHSLA ) => ( {\n\t\t\t\t...prevHSLA,\n\t\t\t\t...partialNewValue,\n\t\t\t} ) );\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<InputWithSlider\n\t\t\t\tmin={ 0 }\n\t\t\t\tmax={ 359 }\n\t\t\t\tlabel=\"Hue\"\n\t\t\t\tabbreviation=\"H\"\n\t\t\t\tvalue={ colorValue.h }\n\t\t\t\tonChange={ ( nextH: number ) => {\n\t\t\t\t\tupdateHSLAValue( { h: nextH } );\n\t\t\t\t} }\n\t\t\t/>\n\t\t\t<InputWithSlider\n\t\t\t\tmin={ 0 }\n\t\t\t\tmax={ 100 }\n\t\t\t\tlabel=\"Saturation\"\n\t\t\t\tabbreviation=\"S\"\n\t\t\t\tvalue={ colorValue.s }\n\t\t\t\tonChange={ ( nextS: number ) => {\n\t\t\t\t\tupdateHSLAValue( { s: nextS } );\n\t\t\t\t} }\n\t\t\t/>\n\t\t\t<InputWithSlider\n\t\t\t\tmin={ 0 }\n\t\t\t\tmax={ 100 }\n\t\t\t\tlabel=\"Lightness\"\n\t\t\t\tabbreviation=\"L\"\n\t\t\t\tvalue={ colorValue.l }\n\t\t\t\tonChange={ ( nextL: number ) => {\n\t\t\t\t\tupdateHSLAValue( { l: nextL } );\n\t\t\t\t} }\n\t\t\t/>\n\t\t\t{ enableAlpha && (\n\t\t\t\t<InputWithSlider\n\t\t\t\t\tmin={ 0 }\n\t\t\t\t\tmax={ 100 }\n\t\t\t\t\tlabel=\"Alpha\"\n\t\t\t\t\tabbreviation=\"A\"\n\t\t\t\t\tvalue={ Math.trunc( 100 * colorValue.a ) }\n\t\t\t\t\tonChange={ ( nextA: number ) => {\n\t\t\t\t\t\tupdateHSLAValue( { a: nextA / 100 } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</>\n\t);\n};\n"],"mappings":"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","ignoreList":[]}