{"version":3,"names":[],"sources":["@wordpress/components/src/toolbar/toolbar-button/types.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport type { ReactNode } from 'react';\n\nexport type ToolbarButtonProps = {\n\t/**\n\t * Children to be rendered inside the button.\n\t */\n\tchildren?: ReactNode;\n\t/**\n\t * An optional class name for the button container.\n\t */\n\tcontainerClassName?: string;\n\t/**\n\t * Additional props to be passed alongside props.\n\t */\n\textraProps?: any;\n\t/**\n\t * Indicates if the button is active.\n\t */\n\tisActive?: boolean;\n\t/**\n\t * Indicates if the button is disabled.\n\t *\n\t * @deprecated Use `disabled` instead.\n\t * @ignore\n\t */\n\tisDisabled?: boolean;\n\t/**\n\t * An optional subscript for the button.\n\t */\n\tsubscript?: string;\n\t/**\n\t * An optional title/label for the button.\n\t */\n\ttitle?: string;\n};\n\nexport type ToolbarButtonOverriddenProps = {\n\t/**\n\t * Whether to keep the button focusable when disabled.\n\t *\n\t * In most cases, it is recommended to set this to `true`. Disabling a control without maintaining focusability\n\t * can cause accessibility issues, by hiding their presence from screen reader users,\n\t * or by preventing focus from returning to a trigger element.\n\t *\n\t * Learn more about the [focusability of disabled controls](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols)\n\t * in the WAI-ARIA Authoring Practices Guide.\n\t *\n\t * @default true\n\t */\n\taccessibleWhenDisabled?: boolean;\n};\n\nexport type ToolbarButtonContainerProps = {\n\t/**\n\t * Children to be rendered inside the button container.\n\t */\n\tchildren?: ReactNode;\n\t/**\n\t * An optional class name for the button container.\n\t */\n\tclassName?: string;\n};\n"],"mappings":"","ignoreList":[]}