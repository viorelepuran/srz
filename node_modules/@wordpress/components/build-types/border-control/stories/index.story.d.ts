/**
 * External dependencies
 */
import type { Meta } from '@storybook/react';
/**
 * Internal dependencies
 */
import { BorderControl } from '..';
import type { Border } from '../types';
declare const meta: Meta<typeof BorderControl>;
export default meta;
export declare const Default: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../color-palette/types").ColorPaletteProps, "colors" | "__experimentalIsRenderedInSidebar"> & {
    disableCustomColors?: boolean;
    enableAlpha?: boolean;
} & import("../types").LabelProps & {
    disableUnits?: boolean;
    enableStyle?: boolean;
    isCompact?: boolean;
    onChange: (value?: Border) => void;
    placeholder?: HTMLInputElement["placeholder"];
    __unstablePopoverProps?: Omit<import("../../popover/types").PopoverProps, "children">;
    shouldSanitizeBorder?: boolean;
    showDropdownHeader?: boolean;
    size?: "default" | "__unstable-large";
    value?: Border;
    width?: import("react").CSSProperties["width"];
    withSlider?: boolean;
    __next40pxDefaultSize?: boolean;
    __shouldNotWarnDeprecated36pxSize?: boolean;
} & import("react").RefAttributes<any> & Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "size" | "width" | "children" | "onChange" | "value" | "placeholder" | "as" | keyof import("react").RefAttributes<any> | "__next40pxDefaultSize" | "__shouldNotWarnDeprecated36pxSize" | "colors" | "__experimentalIsRenderedInSidebar" | "disableCustomColors" | "enableAlpha" | "enableStyle" | keyof import("../types").LabelProps | "disableUnits" | "isCompact" | "__unstablePopoverProps" | "shouldSanitizeBorder" | "showDropdownHeader" | "withSlider">>;
/**
 * Render a slider beside the control.
 */
export declare const WithSlider: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../color-palette/types").ColorPaletteProps, "colors" | "__experimentalIsRenderedInSidebar"> & {
    disableCustomColors?: boolean;
    enableAlpha?: boolean;
} & import("../types").LabelProps & {
    disableUnits?: boolean;
    enableStyle?: boolean;
    isCompact?: boolean;
    onChange: (value?: Border) => void;
    placeholder?: HTMLInputElement["placeholder"];
    __unstablePopoverProps?: Omit<import("../../popover/types").PopoverProps, "children">;
    shouldSanitizeBorder?: boolean;
    showDropdownHeader?: boolean;
    size?: "default" | "__unstable-large";
    value?: Border;
    width?: import("react").CSSProperties["width"];
    withSlider?: boolean;
    __next40pxDefaultSize?: boolean;
    __shouldNotWarnDeprecated36pxSize?: boolean;
} & import("react").RefAttributes<any> & Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "size" | "width" | "children" | "onChange" | "value" | "placeholder" | "as" | keyof import("react").RefAttributes<any> | "__next40pxDefaultSize" | "__shouldNotWarnDeprecated36pxSize" | "colors" | "__experimentalIsRenderedInSidebar" | "disableCustomColors" | "enableAlpha" | "enableStyle" | keyof import("../types").LabelProps | "disableUnits" | "isCompact" | "__unstablePopoverProps" | "shouldSanitizeBorder" | "showDropdownHeader" | "withSlider">>;
/**
 * When rendering with a slider, the `width` prop is useful to customize the width of the number input.
 */
export declare const WithSliderCustomWidth: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../color-palette/types").ColorPaletteProps, "colors" | "__experimentalIsRenderedInSidebar"> & {
    disableCustomColors?: boolean;
    enableAlpha?: boolean;
} & import("../types").LabelProps & {
    disableUnits?: boolean;
    enableStyle?: boolean;
    isCompact?: boolean;
    onChange: (value?: Border) => void;
    placeholder?: HTMLInputElement["placeholder"];
    __unstablePopoverProps?: Omit<import("../../popover/types").PopoverProps, "children">;
    shouldSanitizeBorder?: boolean;
    showDropdownHeader?: boolean;
    size?: "default" | "__unstable-large";
    value?: Border;
    width?: import("react").CSSProperties["width"];
    withSlider?: boolean;
    __next40pxDefaultSize?: boolean;
    __shouldNotWarnDeprecated36pxSize?: boolean;
} & import("react").RefAttributes<any> & Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "size" | "width" | "children" | "onChange" | "value" | "placeholder" | "as" | keyof import("react").RefAttributes<any> | "__next40pxDefaultSize" | "__shouldNotWarnDeprecated36pxSize" | "colors" | "__experimentalIsRenderedInSidebar" | "disableCustomColors" | "enableAlpha" | "enableStyle" | keyof import("../types").LabelProps | "disableUnits" | "isCompact" | "__unstablePopoverProps" | "shouldSanitizeBorder" | "showDropdownHeader" | "withSlider">>;
/**
 * Restrict the width of the control and prevent it from expanding to take up additional space.
 * When `true`, the `width` prop will be ignored.
 */
export declare const IsCompact: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../color-palette/types").ColorPaletteProps, "colors" | "__experimentalIsRenderedInSidebar"> & {
    disableCustomColors?: boolean;
    enableAlpha?: boolean;
} & import("../types").LabelProps & {
    disableUnits?: boolean;
    enableStyle?: boolean;
    isCompact?: boolean;
    onChange: (value?: Border) => void;
    placeholder?: HTMLInputElement["placeholder"];
    __unstablePopoverProps?: Omit<import("../../popover/types").PopoverProps, "children">;
    shouldSanitizeBorder?: boolean;
    showDropdownHeader?: boolean;
    size?: "default" | "__unstable-large";
    value?: Border;
    width?: import("react").CSSProperties["width"];
    withSlider?: boolean;
    __next40pxDefaultSize?: boolean;
    __shouldNotWarnDeprecated36pxSize?: boolean;
} & import("react").RefAttributes<any> & Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "size" | "width" | "children" | "onChange" | "value" | "placeholder" | "as" | keyof import("react").RefAttributes<any> | "__next40pxDefaultSize" | "__shouldNotWarnDeprecated36pxSize" | "colors" | "__experimentalIsRenderedInSidebar" | "disableCustomColors" | "enableAlpha" | "enableStyle" | keyof import("../types").LabelProps | "disableUnits" | "isCompact" | "__unstablePopoverProps" | "shouldSanitizeBorder" | "showDropdownHeader" | "withSlider">>;
/**
 * The `colors` object can contain multiple origins.
 */
export declare const WithMultipleOrigins: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../color-palette/types").ColorPaletteProps, "colors" | "__experimentalIsRenderedInSidebar"> & {
    disableCustomColors?: boolean;
    enableAlpha?: boolean;
} & import("../types").LabelProps & {
    disableUnits?: boolean;
    enableStyle?: boolean;
    isCompact?: boolean;
    onChange: (value?: Border) => void;
    placeholder?: HTMLInputElement["placeholder"];
    __unstablePopoverProps?: Omit<import("../../popover/types").PopoverProps, "children">;
    shouldSanitizeBorder?: boolean;
    showDropdownHeader?: boolean;
    size?: "default" | "__unstable-large";
    value?: Border;
    width?: import("react").CSSProperties["width"];
    withSlider?: boolean;
    __next40pxDefaultSize?: boolean;
    __shouldNotWarnDeprecated36pxSize?: boolean;
} & import("react").RefAttributes<any> & Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "size" | "width" | "children" | "onChange" | "value" | "placeholder" | "as" | keyof import("react").RefAttributes<any> | "__next40pxDefaultSize" | "__shouldNotWarnDeprecated36pxSize" | "colors" | "__experimentalIsRenderedInSidebar" | "disableCustomColors" | "enableAlpha" | "enableStyle" | keyof import("../types").LabelProps | "disableUnits" | "isCompact" | "__unstablePopoverProps" | "shouldSanitizeBorder" | "showDropdownHeader" | "withSlider">>;
//# sourceMappingURL=index.story.d.ts.map