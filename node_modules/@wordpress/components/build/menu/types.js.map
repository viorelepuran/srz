{"version":3,"names":[],"sources":["@wordpress/components/src/menu/types.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport type * as Ariakit from '@ariakit/react';\n\nexport interface ContextProps {\n\t/**\n\t * The ariakit store shared across all Menu subcomponents.\n\t */\n\tstore: Ariakit.MenuStore;\n\t/**\n\t * The variant used by the underlying menu popover.\n\t */\n\tvariant?: 'toolbar';\n}\n\nexport interface Props {\n\t/**\n\t * The elements, which should include one instance of the `Menu.TriggerButton`\n\t * component and one instance of the `Menu.Popover` component.\n\t */\n\tchildren?: Ariakit.MenuProviderProps[ 'children' ];\n\t/**\n\t * Whether the menu popover and its contents should be visible by default.\n\t *\n\t * Note: this prop will be overridden by the `open` prop if it is\n\t * provided (meaning the component will be used in \"controlled\" mode).\n\t *\n\t * @default false\n\t */\n\tdefaultOpen?: Ariakit.MenuProviderProps[ 'defaultOpen' ];\n\t/**\n\t * Whether the menu popover and its contents should be visible.\n\t * Should be used in conjunction with `onOpenChange` in order to control\n\t * the open state of the menu popover.\n\t *\n\t * Note: this prop will set the component in \"controlled\" mode, and it will\n\t * override the `defaultOpen` prop.\n\t */\n\topen?: Ariakit.MenuProviderProps[ 'open' ];\n\t/**\n\t * A callback that gets called when the `open` state changes.\n\t */\n\tonOpenChange?: Ariakit.MenuProviderProps[ 'setOpen' ];\n\t/**\n\t * The placement of the menu popover.\n\t *\n\t * @default 'bottom-start' for root-level menus, 'right-start' for submenus\n\t */\n\tplacement?: Ariakit.MenuProviderProps[ 'placement' ];\n}\n\nexport interface PopoverProps {\n\t/**\n\t * The contents of the menu popover, which should include instances of the\n\t * `Menu.Item`, `Menu.CheckboxItem`, `Menu.RadioItem`, `Menu.Group`, and\n\t * `Menu.Separator` components.\n\t */\n\tchildren?: Ariakit.MenuProps[ 'children' ];\n\t/**\n\t * The modality of the menu popover. When set to true, interaction with\n\t * outside elements will be disabled and only menu content will be visible to\n\t * screen readers.\n\t *\n\t * Determines whether the menu popover is modal. Modal dialogs have distinct\n\t * states and behaviors:\n\t * - The `portal` and `preventBodyScroll` props are set to `true`. They can\n\t *   still be manually set to `false`.\n\t * - When the dialog is open, element tree outside it will be inert.\n\t *\n\t * @default true\n\t */\n\tmodal?: Ariakit.MenuProps[ 'modal' ];\n\t/**\n\t * The distance between the popover and the anchor element.\n\t *\n\t * @default 8 for root-level menus, 16 for nested menus\n\t */\n\tgutter?: Ariakit.MenuProps[ 'gutter' ];\n\t/**\n\t * The skidding of the popover along the anchor element. Can be set to\n\t * negative values to make the popover shift to the opposite side.\n\t *\n\t * @default 0 for root-level menus, -8 for nested menus\n\t */\n\tshift?: Ariakit.MenuProps[ 'shift' ];\n\t/**\n\t * Determines if the menu popover will hide when the user presses the\n\t * Escape key.\n\t *\n\t * This prop can be either a boolean or a function that accepts an event as an\n\t * argument and returns a boolean. The event object represents the keydown\n\t * event that initiated the hide action, which could be either a native\n\t * keyboard event or a React synthetic event.\n\t *\n\t * @default `( event ) => { event.preventDefault(); return true; }`\n\t */\n\thideOnEscape?: Ariakit.MenuProps[ 'hideOnEscape' ];\n}\n\nexport interface TriggerButtonProps {\n\t/**\n\t * The contents of the menu trigger button.\n\t */\n\tchildren?: Ariakit.MenuButtonProps[ 'children' ];\n\t/**\n\t * Allows the component to be rendered as a different HTML element or React\n\t * component. The value can be a React element or a function that takes in the\n\t * original component props and gives back a React element with the props\n\t * merged.\n\t */\n\trender?: Ariakit.MenuButtonProps[ 'render' ];\n\t/**\n\t * Determines if the element is disabled. This sets the `aria-disabled`\n\t * attribute accordingly, enabling support for all elements, including those\n\t * that don't support the native `disabled` attribute.\n\t *\n\t * This feature can be combined with the `accessibleWhenDisabled` prop to\n\t * make disabled elements still accessible via keyboard.\n\t *\n\t * @default false\n\t */\n\tdisabled?: Ariakit.MenuButtonProps[ 'disabled' ];\n\t/**\n\t * Indicates whether the element should be focusable even when it is\n\t * `disabled`.\n\t *\n\t * This is important when discoverability is a concern. For example:\n\t *\n\t * > A toolbar in an editor contains a set of special smart paste functions\n\t * that are disabled when the clipboard is empty or when the function is not\n\t * applicable to the current content of the clipboard. It could be helpful to\n\t * keep the disabled buttons focusable if the ability to discover their\n\t * functionality is primarily via their presence on the toolbar.\n\t *\n\t * Learn more on [Focusability of disabled\n\t * controls](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols).\n\t */\n\taccessibleWhenDisabled?: Ariakit.MenuButtonProps[ 'accessibleWhenDisabled' ];\n}\n\nexport interface GroupProps {\n\t/**\n\t * The contents of the menu group, which should include one instance of the\n\t * `Menu.GroupLabel` component and one or more instances of `Menu.Item`,\n\t * `Menu.CheckboxItem`, and `Menu.RadioItem`.\n\t */\n\tchildren: Ariakit.MenuGroupProps[ 'children' ];\n}\n\nexport interface GroupLabelProps {\n\t/**\n\t * The contents of the menu group label, which should provide an accessible\n\t * label for the menu group.\n\t */\n\tchildren: Ariakit.MenuGroupLabelProps[ 'children' ];\n}\n\nexport interface ItemProps {\n\t/**\n\t * The contents of the menu item, which could include one instance of the\n\t * `Menu.ItemLabel` component and/or one instance of the `Menu.ItemHelpText`\n\t * component.\n\t */\n\tchildren: Ariakit.MenuItemProps[ 'children' ];\n\t/**\n\t * The contents of the menu item's prefix, such as an icon.\n\t */\n\tprefix?: React.ReactNode;\n\t/**\n\t * The contents of the menu item's suffix, such as a keyboard shortcut.\n\t */\n\tsuffix?: React.ReactNode;\n\t/**\n\t * Determines if the menu should hide when this item is clicked.\n\t *\n\t * **Note**: This behavior isn't triggered if this menu item is rendered as a\n\t * link and modifier keys are used to either open the link in a new tab or\n\t * download it.\n\t *\n\t * @default true\n\t */\n\thideOnClick?: Ariakit.MenuItemProps[ 'hideOnClick' ];\n\t/**\n\t * Determines if the element is disabled. This sets the `aria-disabled`\n\t * attribute accordingly, enabling support for all elements, including those\n\t * that don't support the native `disabled` attribute.\n\t *\n\t * @default false\n\t */\n\tdisabled?: Ariakit.MenuItemProps[ 'disabled' ];\n\t/**\n\t * Allows the component to be rendered as a different HTML element or React\n\t * component. The value can be a React element or a function that takes in the\n\t * original component props and gives back a React element with the props\n\t * merged.\n\t */\n\trender?: Ariakit.MenuItemProps[ 'render' ];\n\t/**\n\t * The ariakit menu store. This prop is only meant for internal use.\n\t * @ignore\n\t */\n\tstore?: Ariakit.MenuItemProps[ 'store' ];\n}\n\nexport interface CheckboxItemProps {\n\t/**\n\t * The contents of the menu item, which could include one instance of the\n\t * `Menu.ItemLabel` component and/or one instance of the `Menu.ItemHelpText`\n\t * component.\n\t */\n\tchildren: Ariakit.MenuItemCheckboxProps[ 'children' ];\n\t/**\n\t * The contents of the menu item's suffix, such as a keyboard shortcut.\n\t */\n\tsuffix?: React.ReactNode;\n\t/**\n\t * Determines if the menu should hide when this item is clicked.\n\t *\n\t * **Note**: This behavior isn't triggered if this menu item is rendered as a\n\t * link and modifier keys are used to either open the link in a new tab or\n\t * download it.\n\t *\n\t * @default false\n\t */\n\thideOnClick?: Ariakit.MenuItemCheckboxProps[ 'hideOnClick' ];\n\t/**\n\t * Determines if the element is disabled. This sets the `aria-disabled`\n\t * attribute accordingly, enabling support for all elements, including those\n\t * that don't support the native `disabled` attribute.\n\t *\n\t * @default false\n\t */\n\tdisabled?: Ariakit.MenuItemCheckboxProps[ 'disabled' ];\n\t/**\n\t * Allows the component to be rendered as a different HTML element or React\n\t * component. The value can be a React element or a function that takes in the\n\t * original component props and gives back a React element with the props\n\t * merged.\n\t */\n\trender?: Ariakit.MenuItemCheckboxProps[ 'render' ];\n\t/**\n\t * The checkbox menu item's name.\n\t */\n\tname: Ariakit.MenuItemCheckboxProps[ 'name' ];\n\t/**\n\t * The checkbox item's value, useful when using multiple checkbox menu items\n\t * associated to the same `name`.\n\t */\n\tvalue?: Ariakit.MenuItemCheckboxProps[ 'value' ];\n\t/**\n\t * The controlled checked state of the checkbox menu item.\n\t *\n\t * Note: this prop will override the `defaultChecked` prop.\n\t */\n\tchecked?: Ariakit.MenuItemCheckboxProps[ 'checked' ];\n\t/**\n\t * The checked state of the checkbox menu item when it is initially rendered.\n\t * Use when not wanting to control its checked state.\n\t *\n\t * Note: this prop will be overriden by the `checked` prop, if it is defined.\n\t */\n\tdefaultChecked?: Ariakit.MenuItemCheckboxProps[ 'defaultChecked' ];\n\t/**\n\t * A function that is called when the checkbox's checked state changes.\n\t */\n\tonChange?: Ariakit.MenuItemCheckboxProps[ 'onChange' ];\n}\n\nexport interface RadioItemProps {\n\t/**\n\t * The contents of the menu item, which could include one instance of the\n\t * `Menu.ItemLabel` component and/or one instance of the `Menu.ItemHelpText`\n\t * component.\n\t */\n\tchildren: Ariakit.MenuItemRadioProps[ 'children' ];\n\t/**\n\t * The contents of the menu item's suffix, such as a keyboard shortcut.\n\t */\n\tsuffix?: React.ReactNode;\n\t/**\n\t * Determines if the menu should hide when this item is clicked.\n\t *\n\t * **Note**: This behavior isn't triggered if this menu item is rendered as a\n\t * link and modifier keys are used to either open the link in a new tab or\n\t * download it.\n\t *\n\t * @default false\n\t */\n\thideOnClick?: Ariakit.MenuItemRadioProps[ 'hideOnClick' ];\n\t/**\n\t * Determines if the element is disabled. This sets the `aria-disabled`\n\t * attribute accordingly, enabling support for all elements, including those\n\t * that don't support the native `disabled` attribute.\n\t *\n\t * @default false\n\t */\n\tdisabled?: Ariakit.MenuItemRadioProps[ 'disabled' ];\n\t/**\n\t * Allows the component to be rendered as a different HTML element or React\n\t * component. The value can be a React element or a function that takes in the\n\t * original component props and gives back a React element with the props\n\t * merged.\n\t */\n\trender?: Ariakit.MenuItemRadioProps[ 'render' ];\n\t/**\n\t * The radio item's name.\n\t */\n\tname: Ariakit.MenuItemRadioProps[ 'name' ];\n\t/**\n\t * The radio item's value.\n\t */\n\tvalue: Ariakit.MenuItemRadioProps[ 'value' ];\n\t/**\n\t * The controlled checked state of the radio menu item.\n\t *\n\t * Note: this prop will override the `defaultChecked` prop.\n\t */\n\tchecked?: Ariakit.MenuItemRadioProps[ 'checked' ];\n\t/**\n\t * The checked state of the radio menu item when it is initially rendered.\n\t * Use when not wanting to control its checked state.\n\t *\n\t * Note: this prop will be overriden by the `checked` prop, if it is defined.\n\t */\n\tdefaultChecked?: Ariakit.MenuItemRadioProps[ 'defaultChecked' ];\n\t/**\n\t * A function that is called when the checkbox's checked state changes.\n\t */\n\tonChange?: Ariakit.MenuItemRadioProps[ 'onChange' ];\n}\n\nexport interface SeparatorProps {}\n"],"mappings":"","ignoreList":[]}