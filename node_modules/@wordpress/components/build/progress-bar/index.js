"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ProgressBar = void 0;
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var ProgressBarStyled = _interopRequireWildcard(require("./styles"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function UnforwardedProgressBar(props, ref) {
  const {
    className,
    value,
    ...progressProps
  } = props;
  const isIndeterminate = !Number.isFinite(value);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ProgressBarStyled.Track, {
    className: className,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(ProgressBarStyled.Indicator, {
      style: {
        '--indicator-width': !isIndeterminate ? `${value}%` : undefined
      },
      isIndeterminate: isIndeterminate
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(ProgressBarStyled.ProgressElement, {
      max: 100,
      value: value,
      "aria-label": (0, _i18n.__)('Loading â€¦'),
      ref: ref,
      ...progressProps
    })]
  });
}

/**
 * A simple horizontal progress bar component.
 *
 * Supports two modes: determinate and indeterminate. A progress bar is determinate
 * when a specific progress value has been specified (from 0 to 100), and indeterminate
 * when a value hasn't been specified.
 *
 * ```jsx
 * import { ProgressBar } from '@wordpress/components';
 *
 * const MyLoadingComponent = () => {
 * 	return <ProgressBar />;
 * };
 * ```
 */
const ProgressBar = exports.ProgressBar = (0, _element.forwardRef)(UnforwardedProgressBar);
var _default = exports.default = ProgressBar;
//# sourceMappingURL=index.js.map