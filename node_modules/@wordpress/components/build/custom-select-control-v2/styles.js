"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WithHintItemWrapper = exports.WithHintItemHint = exports.SelectedItemCheck = exports.SelectedExperimentalHintWrapper = exports.SelectedExperimentalHintItem = exports.SelectPopover = exports.SelectItem = exports.Select = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _react2 = require("@emotion/react");
var _utils = require("../utils");
var _space = require("../utils/space");
var _selectControlStyles = require("../select-control/styles/select-control-styles");
var _inputControlStyles = require("../input-control/styles/input-control-styles");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /**
 * External dependencies
 */ /**
 * Internal dependencies
 */
// TODO: extract to common utils and apply to relevant components
const ANIMATION_PARAMS = {
  SLIDE_AMOUNT: '2px',
  DURATION: '400ms',
  EASING: 'cubic-bezier( 0.16, 1, 0.3, 1 )'
};
const INLINE_PADDING = {
  compact: _utils.CONFIG.controlPaddingXSmall,
  small: _utils.CONFIG.controlPaddingXSmall,
  default: _utils.CONFIG.controlPaddingX
};
const getSelectSize = (size, heightProperty) => {
  const sizes = {
    compact: {
      [heightProperty]: 32,
      paddingInlineStart: INLINE_PADDING.compact,
      paddingInlineEnd: INLINE_PADDING.compact + _selectControlStyles.chevronIconSize
    },
    default: {
      [heightProperty]: 40,
      paddingInlineStart: INLINE_PADDING.default,
      paddingInlineEnd: INLINE_PADDING.default + _selectControlStyles.chevronIconSize
    },
    small: {
      [heightProperty]: 24,
      paddingInlineStart: INLINE_PADDING.small,
      paddingInlineEnd: INLINE_PADDING.small + _selectControlStyles.chevronIconSize
    }
  };
  return sizes[size] || sizes.default;
};
const getSelectItemSize = size => {
  // Used to visually align the checkmark with the chevron
  const checkmarkCorrection = 6;
  const sizes = {
    compact: {
      paddingInlineStart: INLINE_PADDING.compact,
      paddingInlineEnd: INLINE_PADDING.compact - checkmarkCorrection
    },
    default: {
      paddingInlineStart: INLINE_PADDING.default,
      paddingInlineEnd: INLINE_PADDING.default - checkmarkCorrection
    },
    small: {
      paddingInlineStart: INLINE_PADDING.small,
      paddingInlineEnd: INLINE_PADDING.small - checkmarkCorrection
    }
  };
  return sizes[size] || sizes.default;
};
const Select = exports.Select = /*#__PURE__*/(0, _base.default)(Ariakit.Select, process.env.NODE_ENV === "production" ? {
  // Do not forward `hasCustomRenderProp` to the underlying Ariakit.Select component
  shouldForwardProp: prop => prop !== 'hasCustomRenderProp',
  target: "e1p3eej77"
} : {
  // Do not forward `hasCustomRenderProp` to the underlying Ariakit.Select component
  shouldForwardProp: prop => prop !== 'hasCustomRenderProp',
  target: "e1p3eej77",
  label: "Select"
})(({
  size,
  hasCustomRenderProp
}) => /*#__PURE__*/(0, _react2.css)("display:block;background-color:", _utils.COLORS.theme.background, ";border:none;color:", _utils.COLORS.theme.foreground, ";cursor:pointer;font-family:inherit;text-align:start;user-select:none;width:100%;&[data-focus-visible]{outline:none;}", getSelectSize(size, hasCustomRenderProp ? 'minHeight' : 'height'), " ", !hasCustomRenderProp && truncateStyles, " ", (0, _inputControlStyles.fontSizeStyles)({
  inputSize: size
}), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Select;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const slideDownAndFade = (0, _react2.keyframes)({
  '0%': {
    opacity: 0,
    transform: `translateY(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateY(0)'
  }
});
const SelectPopover = exports.SelectPopover = /*#__PURE__*/(0, _base.default)(Ariakit.SelectPopover, process.env.NODE_ENV === "production" ? {
  target: "e1p3eej76"
} : {
  target: "e1p3eej76",
  label: "SelectPopover"
})("display:flex;flex-direction:column;background-color:", _utils.COLORS.theme.background, ";border-radius:", _utils.CONFIG.radiusSmall, ";border:1px solid ", _utils.COLORS.theme.foreground, ";box-shadow:", _utils.CONFIG.elevationMedium, ";z-index:1000000;max-height:min( var( --popover-available-height, 400px ), 400px );overflow:auto;overscroll-behavior:contain;min-width:min-content;&[data-open]{@media not ( prefers-reduced-motion ){animation-duration:", ANIMATION_PARAMS.DURATION, ";animation-timing-function:", ANIMATION_PARAMS.EASING, ";animation-name:", slideDownAndFade, ";will-change:transform,opacity;}}&[data-focus-visible]{outline:none;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SelectItem = exports.SelectItem = /*#__PURE__*/(0, _base.default)(Ariakit.SelectItem, process.env.NODE_ENV === "production" ? {
  target: "e1p3eej75"
} : {
  target: "e1p3eej75",
  label: "SelectItem"
})(({
  size
}) => /*#__PURE__*/(0, _react2.css)("cursor:default;display:flex;align-items:center;justify-content:space-between;font-size:", _utils.CONFIG.fontSize, ";line-height:28px;padding-block:", (0, _space.space)(2), ";scroll-margin:", (0, _space.space)(1), ";user-select:none;&[aria-disabled='true']{cursor:not-allowed;}&[data-active-item]{background-color:", _utils.COLORS.theme.gray[300], ";}", getSelectItemSize(size), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:SelectItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const truncateStyles = process.env.NODE_ENV === "production" ? {
  name: "1h52dri",
  styles: "overflow:hidden;text-overflow:ellipsis;white-space:nowrap"
} : {
  name: "5u3cjr-truncateStyles",
  styles: "overflow:hidden;text-overflow:ellipsis;white-space:nowrap;label:truncateStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const SelectedExperimentalHintWrapper = exports.SelectedExperimentalHintWrapper = /*#__PURE__*/(0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej74"
} : {
  target: "e1p3eej74",
  label: "SelectedExperimentalHintWrapper"
})(truncateStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SelectedExperimentalHintItem = exports.SelectedExperimentalHintItem = /*#__PURE__*/(0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej73"
} : {
  target: "e1p3eej73",
  label: "SelectedExperimentalHintItem"
})("color:", _utils.COLORS.theme.gray[600], ";margin-inline-start:", (0, _space.space)(2), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const WithHintItemWrapper = exports.WithHintItemWrapper = /*#__PURE__*/(0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej72"
} : {
  target: "e1p3eej72",
  label: "WithHintItemWrapper"
})("display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;flex:1;column-gap:", (0, _space.space)(4), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const WithHintItemHint = exports.WithHintItemHint = /*#__PURE__*/(0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej71"
} : {
  target: "e1p3eej71",
  label: "WithHintItemHint"
})("color:", _utils.COLORS.theme.gray[600], ";text-align:initial;line-height:", _utils.CONFIG.fontLineHeightBase, ";padding-inline-end:", (0, _space.space)(1), ";margin-block:", (0, _space.space)(1), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SelectedItemCheck = exports.SelectedItemCheck = /*#__PURE__*/(0, _base.default)(Ariakit.SelectItemCheck, process.env.NODE_ENV === "production" ? {
  target: "e1p3eej70"
} : {
  target: "e1p3eej70",
  label: "SelectedItemCheck"
})("display:flex;align-items:center;margin-inline-start:", (0, _space.space)(2), ";fill:currentColor;align-self:start;margin-block-start:2px;font-size:0;", WithHintItemWrapper, "~&,&:not(:empty){font-size:24px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=styles.js.map