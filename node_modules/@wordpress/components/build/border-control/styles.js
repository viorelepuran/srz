"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapperWidth = exports.wrapperHeight = exports.resetButtonWrapper = exports.innerWrapper = exports.colorIndicatorWrapper = exports.colorIndicatorBorder = exports.borderSlider = exports.borderControlPopoverControls = exports.borderControlPopoverContent = exports.borderControlDropdown = exports.borderControl = exports.borderColorIndicator = void 0;
var _react = require("@emotion/react");
var _utils = require("../utils");
var _space = require("../utils/space");
var _baseControlStyles = require("../base-control/styles/base-control-styles");
var _unitControlStyles = require("../unit-control/styles/unit-control-styles");
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /**
 * External dependencies
 */ /**
 * Internal dependencies
 */
const focusBoxShadow = /*#__PURE__*/(0, _react.css)("box-shadow:inset ", _utils.CONFIG.controlBoxShadowFocus, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:focusBoxShadow;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCMEIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const borderControl = exports.borderControl = /*#__PURE__*/(0, _react.css)("border:0;padding:0;margin:0;", _utils.boxSizingReset, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:borderControl;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCZ0MiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const innerWrapper = () => /*#__PURE__*/(0, _react.css)(_unitControlStyles.ValueInput, "{flex:1 1 40%;}&& ", _unitControlStyles.UnitSelect, "{min-height:0;}" + (process.env.NODE_ENV === "production" ? "" : ";label:innerWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZCcUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");

/*
 * This style is only applied to the UnitControl wrapper when the border width
 * field should be a set width. Omitting this allows the UnitControl &
 * RangeControl to share the available width in a 40/60 split respectively.
 */
exports.innerWrapper = innerWrapper;
const wrapperWidth = exports.wrapperWidth = /*#__PURE__*/(0, _react.css)(_unitControlStyles.ValueInput, "{flex:0 0 auto;}" + (process.env.NODE_ENV === "production" ? "" : ";label:wrapperWidth;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDK0IiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const wrapperHeight = size => {
  return /*#__PURE__*/(0, _react.css)("height:", size === '__unstable-large' ? '40px' : '30px', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:wrapperHeight;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EVyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2JvcmRlci1jb250cm9sL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIGJveFNpemluZ1Jlc2V0LCBydGwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uL3V0aWxzL3NwYWNlJztcbmltcG9ydCB7IFN0eWxlZExhYmVsIH0gZnJvbSAnLi4vYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB7XG5cdFZhbHVlSW5wdXQgYXMgVW5pdENvbnRyb2xXcmFwcGVyLFxuXHRVbml0U2VsZWN0LFxufSBmcm9tICcuLi91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbXBvcnQgdHlwZSB7IEJvcmRlciB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBmb2N1c0JveFNoYWRvdyA9IGNzc2Bcblx0Ym94LXNoYWRvdzogaW5zZXQgJHsgQ09ORklHLmNvbnRyb2xCb3hTaGFkb3dGb2N1cyB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlckNvbnRyb2wgPSBjc3NgXG5cdGJvcmRlcjogMDtcblx0cGFkZGluZzogMDtcblx0bWFyZ2luOiAwO1xuXHQkeyBib3hTaXppbmdSZXNldCB9XG5gO1xuXG5leHBvcnQgY29uc3QgaW5uZXJXcmFwcGVyID0gKCkgPT4gY3NzYFxuXHQkeyBVbml0Q29udHJvbFdyYXBwZXIgfSB7XG5cdFx0ZmxleDogMSAxIDQwJTtcblx0fVxuXHQmJiAkeyBVbml0U2VsZWN0IH0ge1xuXHRcdC8qIFByZXZlbnQgdW5pdCBzZWxlY3QgZm9yY2luZyBtaW4gaGVpZ2h0IGxhcmdlciB0aGFuIGl0cyBVbml0Q29udHJvbCAqL1xuXHRcdG1pbi1oZWlnaHQ6IDA7XG5cdH1cbmA7XG5cbi8qXG4gKiBUaGlzIHN0eWxlIGlzIG9ubHkgYXBwbGllZCB0byB0aGUgVW5pdENvbnRyb2wgd3JhcHBlciB3aGVuIHRoZSBib3JkZXIgd2lkdGhcbiAqIGZpZWxkIHNob3VsZCBiZSBhIHNldCB3aWR0aC4gT21pdHRpbmcgdGhpcyBhbGxvd3MgdGhlIFVuaXRDb250cm9sICZcbiAqIFJhbmdlQ29udHJvbCB0byBzaGFyZSB0aGUgYXZhaWxhYmxlIHdpZHRoIGluIGEgNDAvNjAgc3BsaXQgcmVzcGVjdGl2ZWx5LlxuICovXG5leHBvcnQgY29uc3Qgd3JhcHBlcldpZHRoID0gY3NzYFxuXHQkeyBVbml0Q29udHJvbFdyYXBwZXIgfSB7XG5cdFx0LyogRm9yY2UgdGhlIFVuaXRDb250cm9sJ3Mgc2V0IHdpZHRoLiAqL1xuXHRcdGZsZXg6IDAgMCBhdXRvO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3Qgd3JhcHBlckhlaWdodCA9ICggc2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJyApID0+IHtcblx0cmV0dXJuIGNzc2Bcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICc0MHB4JyA6ICczMHB4JyB9O1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IGJvcmRlckNvbnRyb2xEcm9wZG93biA9IGNzc2Bcblx0YmFja2dyb3VuZDogI2ZmZjtcblxuXHQmJiA+IGJ1dHRvbiB7XG5cdFx0YXNwZWN0LXJhdGlvOiAxO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdCR7IHJ0bChcblx0XHRcdHsgYm9yZGVyUmFkaXVzOiBgMnB4IDAgMCAycHhgIH0sXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDAgMnB4IDJweCAwYCB9XG5cdFx0KSgpIH1cblx0XHRib3JkZXI6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXIgfTtcblxuXHRcdCY6Zm9jdXMsXG5cdFx0Jjpob3Zlcjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdCR7IGZvY3VzQm94U2hhZG93IH1cblx0XHRcdGJvcmRlci1jb2xvcjogJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHR6LWluZGV4OiAxO1xuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IGNvbG9ySW5kaWNhdG9yQm9yZGVyID0gKCBib3JkZXI/OiBCb3JkZXIgKSA9PiB7XG5cdGNvbnN0IHsgY29sb3IsIHN0eWxlIH0gPSBib3JkZXIgfHwge307XG5cblx0Y29uc3QgZmFsbGJhY2tDb2xvciA9XG5cdFx0ISEgc3R5bGUgJiYgc3R5bGUgIT09ICdub25lJyA/IENPTE9SUy5ncmF5WyAzMDAgXSA6IHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1zdHlsZTogJHsgc3R5bGUgPT09ICdub25lJyA/ICdzb2xpZCcgOiBzdHlsZSB9O1xuXHRcdGJvcmRlci1jb2xvcjogJHsgY29sb3IgfHwgZmFsbGJhY2tDb2xvciB9O1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbG9ySW5kaWNhdG9yV3JhcHBlciA9IChcblx0Ym9yZGVyPzogQm9yZGVyLFxuXHRzaXplPzogJ2RlZmF1bHQnIHwgJ19fdW5zdGFibGUtbGFyZ2UnXG4pID0+IHtcblx0Y29uc3QgeyBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Z1bGwgfTtcblx0XHRib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHQkeyBzdHlsZSA/IGNvbG9ySW5kaWNhdG9yQm9yZGVyKCBib3JkZXIgKSA6IHVuZGVmaW5lZCB9XG5cdFx0d2lkdGg6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdGhlaWdodDogJHsgc2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gJzI0cHgnIDogJzIycHgnIH07XG5cdFx0cGFkZGluZzogJHsgc2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gJzJweCcgOiAnMXB4JyB9O1xuXG5cdFx0Lypcblx0XHQgKiBDb2xvckluZGljYXRvclxuXHRcdCAqXG5cdFx0ICogVGhlIHRyYW5zcGFyZW50IGNvbG9ycyB1c2VkIGhlcmUgZW5zdXJlIHZpc2liaWxpdHkgb2YgdGhlIGluZGljYXRvclxuXHRcdCAqIG92ZXIgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYm9yZGVyIGNvbnRyb2wgZHJvcGRvd24ncyB0b2dnbGUgYnV0dG9uLlxuXHRcdCAqL1xuXHRcdCYgPiBzcGFuIHtcblx0XHRcdGhlaWdodDogJHsgc3BhY2UoIDQgKSB9O1xuXHRcdFx0d2lkdGg6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcblx0XHRcdFx0LTQ1ZGVnLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA1MiUsXG5cdFx0XHRcdHRyYW5zcGFyZW50IDUyJVxuXHRcdFx0KTtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBNdXN0IGVxdWFsICRjb2xvci1wYWxldHRlLWNpcmNsZS1zaXplIGZyb206XG4vLyBAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2NpcmN1bGFyLW9wdGlvbi1waWNrZXIvc3R5bGUuc2Nzc1xuY29uc3Qgc3dhdGNoU2l6ZSA9IDI4O1xuY29uc3Qgc3dhdGNoR2FwID0gMTI7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRyb2xzID0gY3NzYFxuXHR3aWR0aDogJHsgc3dhdGNoU2l6ZSAqIDYgKyBzd2F0Y2hHYXAgKiA1IH1weDtcblxuXHQ+IGRpdjpmaXJzdC1vZi10eXBlID4gJHsgU3R5bGVkTGFiZWwgfSB7XG5cdFx0bWFyZ2luLWJvdHRvbTogMDtcblx0fVxuXG5cdCYmICR7IFN0eWxlZExhYmVsIH0gKyBidXR0b246bm90KCAuaGFzLXRleHQgKSB7XG5cdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRlbnQgPSBjc3NgYDtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvckluZGljYXRvciA9IGNzc2BgO1xuXG5leHBvcnQgY29uc3QgcmVzZXRCdXR0b25XcmFwcGVyID0gY3NzYFxuXHRkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuXHRtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlclNsaWRlciA9ICgpID0+IGNzc2Bcblx0ZmxleDogMSAxIDYwJTtcblx0JHsgcnRsKCB7IG1hcmdpblJpZ2h0OiBzcGFjZSggMyApIH0gKSgpIH1cbmA7XG4iXX0= */");
};
exports.wrapperHeight = wrapperHeight;
const borderControlDropdown = exports.borderControlDropdown = /*#__PURE__*/(0, _react.css)("background:#fff;&&>button{aspect-ratio:1;padding:0;display:flex;align-items:center;justify-content:center;", (0, _utils.rtl)({
  borderRadius: `2px 0 0 2px`
}, {
  borderRadius: `0 2px 2px 0`
})(), " border:", _utils.CONFIG.borderWidth, " solid ", _utils.COLORS.ui.border, ";&:focus,&:hover:not( :disabled ){", focusBoxShadow, " border-color:", _utils.COLORS.ui.borderFocus, ";z-index:1;position:relative;}}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderControlDropdown;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlEd0MiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const colorIndicatorBorder = border => {
  const {
    color,
    style
  } = border || {};
  const fallbackColor = !!style && style !== 'none' ? _utils.COLORS.gray[300] : undefined;
  return /*#__PURE__*/(0, _react.css)("border-style:", style === 'none' ? 'solid' : style, ";border-color:", color || fallbackColor, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:colorIndicatorBorder;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdGVyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2JvcmRlci1jb250cm9sL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIGJveFNpemluZ1Jlc2V0LCBydGwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uL3V0aWxzL3NwYWNlJztcbmltcG9ydCB7IFN0eWxlZExhYmVsIH0gZnJvbSAnLi4vYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB7XG5cdFZhbHVlSW5wdXQgYXMgVW5pdENvbnRyb2xXcmFwcGVyLFxuXHRVbml0U2VsZWN0LFxufSBmcm9tICcuLi91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbXBvcnQgdHlwZSB7IEJvcmRlciB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBmb2N1c0JveFNoYWRvdyA9IGNzc2Bcblx0Ym94LXNoYWRvdzogaW5zZXQgJHsgQ09ORklHLmNvbnRyb2xCb3hTaGFkb3dGb2N1cyB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlckNvbnRyb2wgPSBjc3NgXG5cdGJvcmRlcjogMDtcblx0cGFkZGluZzogMDtcblx0bWFyZ2luOiAwO1xuXHQkeyBib3hTaXppbmdSZXNldCB9XG5gO1xuXG5leHBvcnQgY29uc3QgaW5uZXJXcmFwcGVyID0gKCkgPT4gY3NzYFxuXHQkeyBVbml0Q29udHJvbFdyYXBwZXIgfSB7XG5cdFx0ZmxleDogMSAxIDQwJTtcblx0fVxuXHQmJiAkeyBVbml0U2VsZWN0IH0ge1xuXHRcdC8qIFByZXZlbnQgdW5pdCBzZWxlY3QgZm9yY2luZyBtaW4gaGVpZ2h0IGxhcmdlciB0aGFuIGl0cyBVbml0Q29udHJvbCAqL1xuXHRcdG1pbi1oZWlnaHQ6IDA7XG5cdH1cbmA7XG5cbi8qXG4gKiBUaGlzIHN0eWxlIGlzIG9ubHkgYXBwbGllZCB0byB0aGUgVW5pdENvbnRyb2wgd3JhcHBlciB3aGVuIHRoZSBib3JkZXIgd2lkdGhcbiAqIGZpZWxkIHNob3VsZCBiZSBhIHNldCB3aWR0aC4gT21pdHRpbmcgdGhpcyBhbGxvd3MgdGhlIFVuaXRDb250cm9sICZcbiAqIFJhbmdlQ29udHJvbCB0byBzaGFyZSB0aGUgYXZhaWxhYmxlIHdpZHRoIGluIGEgNDAvNjAgc3BsaXQgcmVzcGVjdGl2ZWx5LlxuICovXG5leHBvcnQgY29uc3Qgd3JhcHBlcldpZHRoID0gY3NzYFxuXHQkeyBVbml0Q29udHJvbFdyYXBwZXIgfSB7XG5cdFx0LyogRm9yY2UgdGhlIFVuaXRDb250cm9sJ3Mgc2V0IHdpZHRoLiAqL1xuXHRcdGZsZXg6IDAgMCBhdXRvO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3Qgd3JhcHBlckhlaWdodCA9ICggc2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJyApID0+IHtcblx0cmV0dXJuIGNzc2Bcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICc0MHB4JyA6ICczMHB4JyB9O1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IGJvcmRlckNvbnRyb2xEcm9wZG93biA9IGNzc2Bcblx0YmFja2dyb3VuZDogI2ZmZjtcblxuXHQmJiA+IGJ1dHRvbiB7XG5cdFx0YXNwZWN0LXJhdGlvOiAxO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdCR7IHJ0bChcblx0XHRcdHsgYm9yZGVyUmFkaXVzOiBgMnB4IDAgMCAycHhgIH0sXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDAgMnB4IDJweCAwYCB9XG5cdFx0KSgpIH1cblx0XHRib3JkZXI6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXIgfTtcblxuXHRcdCY6Zm9jdXMsXG5cdFx0Jjpob3Zlcjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdCR7IGZvY3VzQm94U2hhZG93IH1cblx0XHRcdGJvcmRlci1jb2xvcjogJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHR6LWluZGV4OiAxO1xuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IGNvbG9ySW5kaWNhdG9yQm9yZGVyID0gKCBib3JkZXI/OiBCb3JkZXIgKSA9PiB7XG5cdGNvbnN0IHsgY29sb3IsIHN0eWxlIH0gPSBib3JkZXIgfHwge307XG5cblx0Y29uc3QgZmFsbGJhY2tDb2xvciA9XG5cdFx0ISEgc3R5bGUgJiYgc3R5bGUgIT09ICdub25lJyA/IENPTE9SUy5ncmF5WyAzMDAgXSA6IHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1zdHlsZTogJHsgc3R5bGUgPT09ICdub25lJyA/ICdzb2xpZCcgOiBzdHlsZSB9O1xuXHRcdGJvcmRlci1jb2xvcjogJHsgY29sb3IgfHwgZmFsbGJhY2tDb2xvciB9O1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbG9ySW5kaWNhdG9yV3JhcHBlciA9IChcblx0Ym9yZGVyPzogQm9yZGVyLFxuXHRzaXplPzogJ2RlZmF1bHQnIHwgJ19fdW5zdGFibGUtbGFyZ2UnXG4pID0+IHtcblx0Y29uc3QgeyBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Z1bGwgfTtcblx0XHRib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHQkeyBzdHlsZSA/IGNvbG9ySW5kaWNhdG9yQm9yZGVyKCBib3JkZXIgKSA6IHVuZGVmaW5lZCB9XG5cdFx0d2lkdGg6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdGhlaWdodDogJHsgc2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gJzI0cHgnIDogJzIycHgnIH07XG5cdFx0cGFkZGluZzogJHsgc2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gJzJweCcgOiAnMXB4JyB9O1xuXG5cdFx0Lypcblx0XHQgKiBDb2xvckluZGljYXRvclxuXHRcdCAqXG5cdFx0ICogVGhlIHRyYW5zcGFyZW50IGNvbG9ycyB1c2VkIGhlcmUgZW5zdXJlIHZpc2liaWxpdHkgb2YgdGhlIGluZGljYXRvclxuXHRcdCAqIG92ZXIgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYm9yZGVyIGNvbnRyb2wgZHJvcGRvd24ncyB0b2dnbGUgYnV0dG9uLlxuXHRcdCAqL1xuXHRcdCYgPiBzcGFuIHtcblx0XHRcdGhlaWdodDogJHsgc3BhY2UoIDQgKSB9O1xuXHRcdFx0d2lkdGg6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcblx0XHRcdFx0LTQ1ZGVnLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA1MiUsXG5cdFx0XHRcdHRyYW5zcGFyZW50IDUyJVxuXHRcdFx0KTtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBNdXN0IGVxdWFsICRjb2xvci1wYWxldHRlLWNpcmNsZS1zaXplIGZyb206XG4vLyBAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2NpcmN1bGFyLW9wdGlvbi1waWNrZXIvc3R5bGUuc2Nzc1xuY29uc3Qgc3dhdGNoU2l6ZSA9IDI4O1xuY29uc3Qgc3dhdGNoR2FwID0gMTI7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRyb2xzID0gY3NzYFxuXHR3aWR0aDogJHsgc3dhdGNoU2l6ZSAqIDYgKyBzd2F0Y2hHYXAgKiA1IH1weDtcblxuXHQ+IGRpdjpmaXJzdC1vZi10eXBlID4gJHsgU3R5bGVkTGFiZWwgfSB7XG5cdFx0bWFyZ2luLWJvdHRvbTogMDtcblx0fVxuXG5cdCYmICR7IFN0eWxlZExhYmVsIH0gKyBidXR0b246bm90KCAuaGFzLXRleHQgKSB7XG5cdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRlbnQgPSBjc3NgYDtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvckluZGljYXRvciA9IGNzc2BgO1xuXG5leHBvcnQgY29uc3QgcmVzZXRCdXR0b25XcmFwcGVyID0gY3NzYFxuXHRkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuXHRtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlclNsaWRlciA9ICgpID0+IGNzc2Bcblx0ZmxleDogMSAxIDYwJTtcblx0JHsgcnRsKCB7IG1hcmdpblJpZ2h0OiBzcGFjZSggMyApIH0gKSgpIH1cbmA7XG4iXX0= */");
};
exports.colorIndicatorBorder = colorIndicatorBorder;
const colorIndicatorWrapper = (border, size) => {
  const {
    style
  } = border || {};
  return /*#__PURE__*/(0, _react.css)("border-radius:", _utils.CONFIG.radiusFull, ";border:2px solid transparent;", style ? colorIndicatorBorder(border) : undefined, " width:", size === '__unstable-large' ? '24px' : '22px', ";height:", size === '__unstable-large' ? '24px' : '22px', ";padding:", size === '__unstable-large' ? '2px' : '1px', ";&>span{height:", (0, _space.space)(4), ";width:", (0, _space.space)(4), ";background:linear-gradient(\n\t\t\t\t-45deg,\n\t\t\t\ttransparent 48%,\n\t\t\t\trgb( 0 0 0 / 20% ) 48%,\n\t\t\t\trgb( 0 0 0 / 20% ) 52%,\n\t\t\t\ttransparent 52%\n\t\t\t);}" + (process.env.NODE_ENV === "production" ? "" : ";label:colorIndicatorWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9HVyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2JvcmRlci1jb250cm9sL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIGJveFNpemluZ1Jlc2V0LCBydGwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uL3V0aWxzL3NwYWNlJztcbmltcG9ydCB7IFN0eWxlZExhYmVsIH0gZnJvbSAnLi4vYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB7XG5cdFZhbHVlSW5wdXQgYXMgVW5pdENvbnRyb2xXcmFwcGVyLFxuXHRVbml0U2VsZWN0LFxufSBmcm9tICcuLi91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbXBvcnQgdHlwZSB7IEJvcmRlciB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBmb2N1c0JveFNoYWRvdyA9IGNzc2Bcblx0Ym94LXNoYWRvdzogaW5zZXQgJHsgQ09ORklHLmNvbnRyb2xCb3hTaGFkb3dGb2N1cyB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlckNvbnRyb2wgPSBjc3NgXG5cdGJvcmRlcjogMDtcblx0cGFkZGluZzogMDtcblx0bWFyZ2luOiAwO1xuXHQkeyBib3hTaXppbmdSZXNldCB9XG5gO1xuXG5leHBvcnQgY29uc3QgaW5uZXJXcmFwcGVyID0gKCkgPT4gY3NzYFxuXHQkeyBVbml0Q29udHJvbFdyYXBwZXIgfSB7XG5cdFx0ZmxleDogMSAxIDQwJTtcblx0fVxuXHQmJiAkeyBVbml0U2VsZWN0IH0ge1xuXHRcdC8qIFByZXZlbnQgdW5pdCBzZWxlY3QgZm9yY2luZyBtaW4gaGVpZ2h0IGxhcmdlciB0aGFuIGl0cyBVbml0Q29udHJvbCAqL1xuXHRcdG1pbi1oZWlnaHQ6IDA7XG5cdH1cbmA7XG5cbi8qXG4gKiBUaGlzIHN0eWxlIGlzIG9ubHkgYXBwbGllZCB0byB0aGUgVW5pdENvbnRyb2wgd3JhcHBlciB3aGVuIHRoZSBib3JkZXIgd2lkdGhcbiAqIGZpZWxkIHNob3VsZCBiZSBhIHNldCB3aWR0aC4gT21pdHRpbmcgdGhpcyBhbGxvd3MgdGhlIFVuaXRDb250cm9sICZcbiAqIFJhbmdlQ29udHJvbCB0byBzaGFyZSB0aGUgYXZhaWxhYmxlIHdpZHRoIGluIGEgNDAvNjAgc3BsaXQgcmVzcGVjdGl2ZWx5LlxuICovXG5leHBvcnQgY29uc3Qgd3JhcHBlcldpZHRoID0gY3NzYFxuXHQkeyBVbml0Q29udHJvbFdyYXBwZXIgfSB7XG5cdFx0LyogRm9yY2UgdGhlIFVuaXRDb250cm9sJ3Mgc2V0IHdpZHRoLiAqL1xuXHRcdGZsZXg6IDAgMCBhdXRvO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3Qgd3JhcHBlckhlaWdodCA9ICggc2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJyApID0+IHtcblx0cmV0dXJuIGNzc2Bcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICc0MHB4JyA6ICczMHB4JyB9O1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IGJvcmRlckNvbnRyb2xEcm9wZG93biA9IGNzc2Bcblx0YmFja2dyb3VuZDogI2ZmZjtcblxuXHQmJiA+IGJ1dHRvbiB7XG5cdFx0YXNwZWN0LXJhdGlvOiAxO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdCR7IHJ0bChcblx0XHRcdHsgYm9yZGVyUmFkaXVzOiBgMnB4IDAgMCAycHhgIH0sXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDAgMnB4IDJweCAwYCB9XG5cdFx0KSgpIH1cblx0XHRib3JkZXI6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXIgfTtcblxuXHRcdCY6Zm9jdXMsXG5cdFx0Jjpob3Zlcjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdCR7IGZvY3VzQm94U2hhZG93IH1cblx0XHRcdGJvcmRlci1jb2xvcjogJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHR6LWluZGV4OiAxO1xuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IGNvbG9ySW5kaWNhdG9yQm9yZGVyID0gKCBib3JkZXI/OiBCb3JkZXIgKSA9PiB7XG5cdGNvbnN0IHsgY29sb3IsIHN0eWxlIH0gPSBib3JkZXIgfHwge307XG5cblx0Y29uc3QgZmFsbGJhY2tDb2xvciA9XG5cdFx0ISEgc3R5bGUgJiYgc3R5bGUgIT09ICdub25lJyA/IENPTE9SUy5ncmF5WyAzMDAgXSA6IHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1zdHlsZTogJHsgc3R5bGUgPT09ICdub25lJyA/ICdzb2xpZCcgOiBzdHlsZSB9O1xuXHRcdGJvcmRlci1jb2xvcjogJHsgY29sb3IgfHwgZmFsbGJhY2tDb2xvciB9O1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbG9ySW5kaWNhdG9yV3JhcHBlciA9IChcblx0Ym9yZGVyPzogQm9yZGVyLFxuXHRzaXplPzogJ2RlZmF1bHQnIHwgJ19fdW5zdGFibGUtbGFyZ2UnXG4pID0+IHtcblx0Y29uc3QgeyBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Z1bGwgfTtcblx0XHRib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHQkeyBzdHlsZSA/IGNvbG9ySW5kaWNhdG9yQm9yZGVyKCBib3JkZXIgKSA6IHVuZGVmaW5lZCB9XG5cdFx0d2lkdGg6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdGhlaWdodDogJHsgc2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gJzI0cHgnIDogJzIycHgnIH07XG5cdFx0cGFkZGluZzogJHsgc2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gJzJweCcgOiAnMXB4JyB9O1xuXG5cdFx0Lypcblx0XHQgKiBDb2xvckluZGljYXRvclxuXHRcdCAqXG5cdFx0ICogVGhlIHRyYW5zcGFyZW50IGNvbG9ycyB1c2VkIGhlcmUgZW5zdXJlIHZpc2liaWxpdHkgb2YgdGhlIGluZGljYXRvclxuXHRcdCAqIG92ZXIgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYm9yZGVyIGNvbnRyb2wgZHJvcGRvd24ncyB0b2dnbGUgYnV0dG9uLlxuXHRcdCAqL1xuXHRcdCYgPiBzcGFuIHtcblx0XHRcdGhlaWdodDogJHsgc3BhY2UoIDQgKSB9O1xuXHRcdFx0d2lkdGg6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcblx0XHRcdFx0LTQ1ZGVnLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA1MiUsXG5cdFx0XHRcdHRyYW5zcGFyZW50IDUyJVxuXHRcdFx0KTtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBNdXN0IGVxdWFsICRjb2xvci1wYWxldHRlLWNpcmNsZS1zaXplIGZyb206XG4vLyBAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2NpcmN1bGFyLW9wdGlvbi1waWNrZXIvc3R5bGUuc2Nzc1xuY29uc3Qgc3dhdGNoU2l6ZSA9IDI4O1xuY29uc3Qgc3dhdGNoR2FwID0gMTI7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRyb2xzID0gY3NzYFxuXHR3aWR0aDogJHsgc3dhdGNoU2l6ZSAqIDYgKyBzd2F0Y2hHYXAgKiA1IH1weDtcblxuXHQ+IGRpdjpmaXJzdC1vZi10eXBlID4gJHsgU3R5bGVkTGFiZWwgfSB7XG5cdFx0bWFyZ2luLWJvdHRvbTogMDtcblx0fVxuXG5cdCYmICR7IFN0eWxlZExhYmVsIH0gKyBidXR0b246bm90KCAuaGFzLXRleHQgKSB7XG5cdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRlbnQgPSBjc3NgYDtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvckluZGljYXRvciA9IGNzc2BgO1xuXG5leHBvcnQgY29uc3QgcmVzZXRCdXR0b25XcmFwcGVyID0gY3NzYFxuXHRkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuXHRtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlclNsaWRlciA9ICgpID0+IGNzc2Bcblx0ZmxleDogMSAxIDYwJTtcblx0JHsgcnRsKCB7IG1hcmdpblJpZ2h0OiBzcGFjZSggMyApIH0gKSgpIH1cbmA7XG4iXX0= */");
};

// Must equal $color-palette-circle-size from:
// @wordpress/components/src/circular-option-picker/style.scss
exports.colorIndicatorWrapper = colorIndicatorWrapper;
const swatchSize = 28;
const swatchGap = 12;
const borderControlPopoverControls = exports.borderControlPopoverControls = /*#__PURE__*/(0, _react.css)("width:", swatchSize * 6 + swatchGap * 5, "px;>div:first-of-type>", _baseControlStyles.StyledLabel, "{margin-bottom:0;}&& ", _baseControlStyles.StyledLabel, "+button:not( .has-text ){min-width:24px;padding:0;}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderControlPopoverControls;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFJK0MiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const borderControlPopoverContent = exports.borderControlPopoverContent = /*#__PURE__*/(0, _react.css)(process.env.NODE_ENV === "production" ? "" : ";label:borderControlPopoverContent;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtKOEMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const borderColorIndicator = exports.borderColorIndicator = /*#__PURE__*/(0, _react.css)(process.env.NODE_ENV === "production" ? "" : ";label:borderColorIndicator;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1KdUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
const resetButtonWrapper = exports.resetButtonWrapper = process.env.NODE_ENV === "production" ? {
  name: "1ghe26v",
  styles: "display:flex;justify-content:flex-end;margin-top:12px"
} : {
  name: "1a93xby-resetButtonWrapper",
  styles: "display:flex;justify-content:flex-end;margin-top:12px;label:resetButtonWrapper;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFKcUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const borderSlider = () => /*#__PURE__*/(0, _react.css)("flex:1 1 60%;", (0, _utils.rtl)({
  marginRight: (0, _space.space)(3)
})(), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:borderSlider;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJKcUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9ib3JkZXItY29udHJvbC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBib3hTaXppbmdSZXNldCwgcnRsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgeyBTdHlsZWRMYWJlbCB9IGZyb20gJy4uL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQge1xuXHRWYWx1ZUlucHV0IGFzIFVuaXRDb250cm9sV3JhcHBlcixcblx0VW5pdFNlbGVjdCxcbn0gZnJvbSAnLi4vdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBCb3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZm9jdXNCb3hTaGFkb3cgPSBjc3NgXG5cdGJveC1zaGFkb3c6IGluc2V0ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRib3JkZXI6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGlubmVyV3JhcHBlciA9ICgpID0+IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdGZsZXg6IDEgMSA0MCU7XG5cdH1cblx0JiYgJHsgVW5pdFNlbGVjdCB9IHtcblx0XHQvKiBQcmV2ZW50IHVuaXQgc2VsZWN0IGZvcmNpbmcgbWluIGhlaWdodCBsYXJnZXIgdGhhbiBpdHMgVW5pdENvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG4vKlxuICogVGhpcyBzdHlsZSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIFVuaXRDb250cm9sIHdyYXBwZXIgd2hlbiB0aGUgYm9yZGVyIHdpZHRoXG4gKiBmaWVsZCBzaG91bGQgYmUgYSBzZXQgd2lkdGguIE9taXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBVbml0Q29udHJvbCAmXG4gKiBSYW5nZUNvbnRyb2wgdG8gc2hhcmUgdGhlIGF2YWlsYWJsZSB3aWR0aCBpbiBhIDQwLzYwIHNwbGl0IHJlc3BlY3RpdmVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9IGNzc2Bcblx0JHsgVW5pdENvbnRyb2xXcmFwcGVyIH0ge1xuXHRcdC8qIEZvcmNlIHRoZSBVbml0Q29udHJvbCdzIHNldCB3aWR0aC4gKi9cblx0XHRmbGV4OiAwIDAgYXV0bztcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIHNpemU/OiAnZGVmYXVsdCcgfCAnX191bnN0YWJsZS1sYXJnZScgKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnNDBweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdGFzcGVjdC1yYXRpbzogMTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQkeyBydGwoXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDJweCAwIDAgMnB4YCB9LFxuXHRcdFx0eyBib3JkZXJSYWRpdXM6IGAwIDJweCAycHggMGAgfVxuXHRcdCkoKSB9XG5cdFx0Ym9yZGVyOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyIH07XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0c2l6ZT86ICdkZWZhdWx0JyB8ICdfX3Vuc3RhYmxlLWxhcmdlJ1xuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XG5cdFx0Ym9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0JHsgc3R5bGUgPyBjb2xvckluZGljYXRvckJvcmRlciggYm9yZGVyICkgOiB1bmRlZmluZWQgfVxuXHRcdHdpZHRoOiAkeyBzaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyAnMjRweCcgOiAnMjJweCcgfTtcblx0XHRoZWlnaHQ6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcyNHB4JyA6ICcyMnB4JyB9O1xuXHRcdHBhZGRpbmc6ICR7IHNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/ICcycHgnIDogJzFweCcgfTtcblxuXHRcdC8qXG5cdFx0ICogQ29sb3JJbmRpY2F0b3Jcblx0XHQgKlxuXHRcdCAqIFRoZSB0cmFuc3BhcmVudCBjb2xvcnMgdXNlZCBoZXJlIGVuc3VyZSB2aXNpYmlsaXR5IG9mIHRoZSBpbmRpY2F0b3Jcblx0XHQgKiBvdmVyIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJvcmRlciBjb250cm9sIGRyb3Bkb3duJ3MgdG9nZ2xlIGJ1dHRvbi5cblx0XHQgKi9cblx0XHQmID4gc3BhbiB7XG5cdFx0XHRoZWlnaHQ6ICR7IHNwYWNlKCA0ICkgfTtcblx0XHRcdHdpZHRoOiAkeyBzcGFjZSggNCApIH07XG5cdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdC00NWRlZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNDglLFxuXHRcdFx0XHRyZ2IoIDAgMCAwIC8gMjAlICkgNTIlLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA1MiVcblx0XHRcdCk7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gTXVzdCBlcXVhbCAkY29sb3ItcGFsZXR0ZS1jaXJjbGUtc2l6ZSBmcm9tOlxuLy8gQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9jaXJjdWxhci1vcHRpb24tcGlja2VyL3N0eWxlLnNjc3NcbmNvbnN0IHN3YXRjaFNpemUgPSAyODtcbmNvbnN0IHN3YXRjaEdhcCA9IDEyO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0d2lkdGg6ICR7IHN3YXRjaFNpemUgKiA2ICsgc3dhdGNoR2FwICogNSB9cHg7XG5cblx0PiBkaXY6Zmlyc3Qtb2YtdHlwZSA+ICR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdH1cblxuXHQmJiAkeyBTdHlsZWRMYWJlbCB9ICsgYnV0dG9uOm5vdCggLmhhcy10ZXh0ICkge1xuXHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250ZW50ID0gY3NzYGA7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3JJbmRpY2F0b3IgPSBjc3NgYDtcblxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uV3JhcHBlciA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0bWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5gO1xuIl19 */");
exports.borderSlider = borderSlider;
//# sourceMappingURL=styles.js.map